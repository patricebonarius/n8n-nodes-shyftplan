{
	"info": { "title": "API - shyftplan", "version": "0.0.1" },
	"swagger": "2.0",
	"produces": ["application/json"],
	"host": "release.sppt-beta.com",
	"tags": [
		{ "name": "sessions", "description": "Operations about sessions" },
		{ "name": "absences", "description": "Operations about absences" },
		{ "name": "absence_reasons", "description": "Operations about absence_reasons" },
		{ "name": "assignment_groups", "description": "Operations about assignment_groups" },
		{ "name": "availabilities", "description": "Operations about availabilities" },
		{
			"name": "availability_aggregations",
			"description": "Operations about availability_aggregations"
		},
		{ "name": "background_jobs", "description": "Operations about background_jobs" },
		{ "name": "bulk_requests", "description": "Operations about bulk_requests" },
		{ "name": "chat_messages", "description": "Operations about chat_messages" },
		{ "name": "calendar", "description": "Operations about calendars" },
		{ "name": "companies", "description": "Operations about companies" },
		{ "name": "custom_fields", "description": "Operations about custom_fields" },
		{ "name": "employee_evaluations", "description": "Operations about employee_evaluations" },
		{ "name": "employments", "description": "Operations about employments" },
		{ "name": "employments_paygrades", "description": "Operations about employments_paygrades" },
		{ "name": "employments_positions", "description": "Operations about employments_positions" },
		{
			"name": "employments_rotation_groups",
			"description": "Operations about employments_rotation_groups"
		},
		{ "name": "employments_surveys", "description": "Operations about employments_surveys" },
		{ "name": "evaluation_breaks", "description": "Operations about evaluation_breaks" },
		{ "name": "evaluations", "description": "Operations about evaluations" },
		{ "name": "individual_rotations", "description": "Operations about individual_rotations" },
		{ "name": "languages", "description": "Operations about languages" },
		{ "name": "live_staff_shifts", "description": "Operations about live_staff_shifts" },
		{ "name": "locations", "description": "Operations about locations" },
		{ "name": "locations_positions", "description": "Operations about locations_positions" },
		{ "name": "newsfeeds", "description": "Operations about newsfeeds" },
		{
			"name": "notification_configurations",
			"description": "Operations about notification_configurations"
		},
		{ "name": "paygrade_types", "description": "Operations about paygrade_types" },
		{ "name": "shifts", "description": "Operations about shifts" },
		{ "name": "payments", "description": "Operations about payments" },
		{ "name": "payslips", "description": "Operations about payslips" },
		{ "name": "positions", "description": "Operations about positions" },
		{ "name": "punch_timings", "description": "Operations about punch_timings" },
		{ "name": "qualifications", "description": "Operations about qualifications" },
		{ "name": "replaced_evaluations", "description": "Operations about replaced_evaluations" },
		{ "name": "replace_requests", "description": "Operations about replace_requests" },
		{ "name": "requests", "description": "Operations about requests" },
		{ "name": "rights", "description": "Operations about rights" },
		{
			"name": "shift_assignment_groups",
			"description": "Operations about shift_assignment_groups"
		},
		{ "name": "shiftplans", "description": "Operations about shiftplans" },
		{ "name": "shift_breaks", "description": "Operations about shift_breaks" },
		{ "name": "shifts_tags", "description": "Operations about shifts_tags" },
		{ "name": "shift_presets", "description": "Operations about shift_presets" },
		{ "name": "shift_rotations", "description": "Operations about shift_rotations" },
		{ "name": "shift_rotation_groups", "description": "Operations about shift_rotation_groups" },
		{ "name": "special_dates", "description": "Operations about special_dates" },
		{ "name": "sso_settings", "description": "Operations about sso_settings" },
		{ "name": "staff_shifts", "description": "Operations about staff_shifts" },
		{ "name": "staff_shifts_tags", "description": "Operations about staff_shifts_tags" },
		{ "name": "tags", "description": "Operations about tags" },
		{ "name": "users", "description": "Operations about users" },
		{ "name": "absence_entitlements", "description": "Operations about absence_entitlements" },
		{ "name": "login", "description": "Operations about logins" }
	],
	"paths": {
		"/api/v1/sessions/refresh": {
			"post": {
				"description": "Refresh user session",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "string",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully updated",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"404": {
						"description": "Couldn't find Company",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["sessions"],
				"operationId": "postApiV1SessionsRefresh"
			}
		},
		"/api/v1/absences/employments": {
			"get": {
				"description": "List all Employments which can be seen on Absences.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "with_deleted",
						"description": "Include soft-deleted employments",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "query",
						"name": "order_key",
						"description": "Sort Employments",
						"type": "string",
						"default": "last_name",
						"enum": ["id", "last_name", "first_name"],
						"required": false
					},
					{
						"in": "query",
						"name": "order_dir",
						"description": "Sort Employments",
						"type": "string",
						"default": "asc",
						"enum": ["asc", "desc"],
						"required": false
					}
				],
				"responses": {
					"200": { "description": "List all Employments which can be seen on Absences." }
				},
				"tags": ["absences"],
				"operationId": "getApiV1AbsencesEmployments"
			}
		},
		"/api/v1/absences/employments/{id}/absence_info": {
			"get": {
				"description": "Return absence info of Employment for given dates",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start of Absence.",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End of Absence.",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "absence_days",
						"description": "Number of days of absence",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "query",
						"name": "absence_reason_id",
						"description": "Absence Reason ID. If not present, the first absence reason is taken",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "is_full_day",
						"description": "Is the Absence for the full day(s).",
						"type": "boolean",
						"default": true,
						"required": false
					}
				],
				"responses": {
					"200": { "description": "Return absence info of Employment for given dates" }
				},
				"tags": ["absences"],
				"operationId": "getApiV1AbsencesEmploymentsIdAbsenceInfo"
			}
		},
		"/api/v1/absences/employments/{id}/carry_over_info": {
			"get": {
				"description": "Return carryover info of Employment for given period.Absence Reason should have carryover days enabled.Period should be within one year and include carry over days.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "absence_reason_id",
						"description": "Absence Reason ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start of the period.",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End of the period.",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Stats about requested period",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_CarryOverInfoResponse" }
					},
					"400.1": {
						"description": "Employment is not found",
						"schema": { "$ref": "#/definitions/V1_Entities_EmploymentNotFoundError" }
					},
					"400.2": {
						"description": "Absence Reason is not found",
						"schema": { "$ref": "#/definitions/V1_Entities_AbsenceReasonNotFoundError" }
					},
					"400.3": {
						"description": "Carryover days are disabled",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_CarryOverDisabledError" }
					},
					"400.4": {
						"description": "Time period is not supported",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_NotSupportedRangeError" }
					}
				},
				"tags": ["absences"],
				"operationId": "getApiV1AbsencesEmploymentsIdCarryOverInfo"
			}
		},
		"/api/v1/absences/employments/{id}": {
			"get": {
				"description": "Return a Employment which can be seen on Absences.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Return a Employment which can be seen on Absences." }
				},
				"tags": ["absences"],
				"operationId": "getApiV1AbsencesEmploymentsId"
			}
		},
		"/api/v1/absences/{id}/withdraw": {
			"post": {
				"description": "Withdraw a Absence.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Withdraw a Absence." } },
				"tags": ["absences"],
				"operationId": "postApiV1AbsencesIdWithdraw"
			}
		},
		"/api/v1/absences/{id}": {
			"put": {
				"description": "Update a Absence",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of Absence.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of Absence.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "absence_reason_id",
						"description": "Absence Reason ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "days",
						"description": "Number of days from Absence.",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "state",
						"description": "State of Absence.",
						"type": "string",
						"default": "new",
						"enum": ["new", "refused", "accepted", "withdrawn"],
						"required": false
					},
					{
						"in": "formData",
						"name": "refuse_message",
						"description": "Message explaining why the absence is declined",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "notes",
						"description": "Note of Absence.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "paid",
						"description": "Defines if Absence is paid.",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "force_collision",
						"description": "Create absences even when conflicts exists when set to true.",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "force_collision_and_remove",
						"description": "Remove staff from conflicting Shifts.",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "is_full_day",
						"description": "Is the Absence for the full day(s).",
						"type": "boolean",
						"default": true,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_AbsenceResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Couldn't find absence",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Carryover days are disabled for this Absence Reason",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_NotSupportedRangeError" }
					}
				},
				"tags": ["absences"],
				"operationId": "putApiV1AbsencesId"
			},
			"delete": {
				"description": "Delete a Absence.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Delete a Absence." } },
				"tags": ["absences"],
				"operationId": "deleteApiV1AbsencesId"
			},
			"get": {
				"description": "Return a Absence.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Absence." } },
				"tags": ["absences"],
				"operationId": "getApiV1AbsencesId"
			}
		},
		"/api/v1/absences/{id}/decline": {
			"post": {
				"description": "Decline a Absence.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "refuse_message",
						"description": "Message explaining why the absence is declined",
						"type": "string",
						"required": false
					}
				],
				"responses": { "201": { "description": "Decline a Absence." } },
				"tags": ["absences"],
				"operationId": "postApiV1AbsencesIdDecline"
			}
		},
		"/api/v1/absences/{id}/approve": {
			"post": {
				"description": "Approve a Absence.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "force_collision",
						"description": "Create absences even when conflicts exists when set to true.",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "force_collision_and_remove",
						"description": "Remove staff from conflicting Shifts.",
						"type": "boolean",
						"required": false
					}
				],
				"responses": { "201": { "description": "Approve a Absence." } },
				"tags": ["absences"],
				"operationId": "postApiV1AbsencesIdApprove"
			}
		},
		"/api/v1/absences/{id}/attachment": {
			"post": {
				"description": "Add attachment to an absence",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "file",
						"description": "Attachment file (\u003c= 5MB)",
						"type": "file",
						"required": true
					}
				],
				"responses": { "201": { "description": "Add attachment to an absence" } },
				"tags": ["absences"],
				"operationId": "postApiV1AbsencesIdAttachment"
			}
		},
		"/api/v1/absences": {
			"get": {
				"description": "List all Absences",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Single Absence ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Array of Absence ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "absence_reason_id",
						"description": "Single Absence Reason ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "absence_reason_ids[]",
						"description": "Array of Absence Reason ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "emp_staff_number",
						"description": "Single Employment staff number",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "emp_staff_numbers[]",
						"description": "Array of Employment  staff number",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "emp_status",
						"description": "Single employment status",
						"type": "string",
						"enum": ["inactive", "active", "destroyed", "noemail"],
						"required": false
					},
					{
						"in": "query",
						"name": "emp_statuses[]",
						"description": "Array of employment statuses",
						"type": "array",
						"items": { "type": "string", "enum": ["inactive", "active", "destroyed", "noemail"] },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Single Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "state",
						"description": "State of absence",
						"type": "string",
						"enum": ["new", "accepted", "refused", "withdrawn"],
						"required": false
					},
					{
						"in": "query",
						"name": "states[]",
						"description": "Array of states of absences",
						"type": "array",
						"items": { "type": "string", "enum": ["new", "accepted", "refused", "withdrawn"] },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "paid",
						"description": "Paid or unpaid Absences",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "attachment",
						"description": "Attached file -           'true' returns only those absences which have attachment;           'false' returns only those absences which do not have attachment;           'empty value' returns all absences regardless of attachments",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start of absence",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End of absence",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "order_key",
						"description": "Sort Absences",
						"type": "string",
						"default": "starts_at",
						"enum": ["id", "starts_at"],
						"required": false
					},
					{
						"in": "query",
						"name": "order_dir",
						"description": "Sort Absences",
						"type": "string",
						"default": "desc",
						"enum": ["asc", "desc"],
						"required": false
					},
					{
						"in": "query",
						"name": "include_deleted_staff_shifts_info",
						"description": "Include deleted staff shifts information",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "query",
						"name": "extended_info",
						"description": "Paid or unpaid Absences",
						"type": "boolean",
						"default": true,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_AbsenceIndexResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["absences"],
				"operationId": "getApiV1Absences"
			},
			"post": {
				"description": "Create an Absence",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of Absence.",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of Absence.",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "absence_reason_id",
						"description": "Absence Reason ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "days",
						"description": "Number of days from Absence.",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "paid",
						"description": "Defines if Absence is paid.",
						"type": "boolean",
						"required": true
					},
					{
						"in": "formData",
						"name": "state",
						"description": "Initial State of Absence.",
						"type": "string",
						"default": "new",
						"enum": ["new", "refused", "accepted", "withdrawn"],
						"required": false
					},
					{
						"in": "formData",
						"name": "notes",
						"description": "Note of Absence.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "is_full_day",
						"description": "Is the Absence for the full day(s).",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "force_collision",
						"description": "Create absences even when conflicts exists when set to true.",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "force_collision_and_remove",
						"description": "Remove staff from conflicting Shifts.",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "file",
						"description": "Attachment file (\u003c= 5MB)",
						"type": "file",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully updated",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_AbsenceResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Couldn't find absence",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.1": {
						"description": "Couldn't find Employment",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_AbsenceResponseEntity_NotSupportedRangeError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["absences"],
				"operationId": "postApiV1Absences"
			}
		},
		"/api/v1/absence_reasons": {
			"post": {
				"description": "Create a new Absence Reason.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Absence Reason.",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "short_name",
						"description": "Short name of the Absence Reason.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "days",
						"description": "No of Days of the Absence Reason.",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "carry_over_days_enabled",
						"description": "Can Carry leftover absence days to the next year?",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "carry_over_days_deadline",
						"description": "Expiration date of carry over absence days.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "calculation_type",
						"description": "Absence days calculation type.",
						"type": "string",
						"default": "standard",
						"enum": ["standard", "shift_hours", "shifts_count"],
						"required": true
					},
					{
						"in": "formData",
						"name": "hours_calculation_type",
						"description": "Absence hours calculation type.",
						"type": "string",
						"default": "employee_profile",
						"enum": ["employee_profile", "scheduled_shifts"],
						"required": true
					},
					{
						"in": "formData",
						"name": "is_absence_attachments_allowed",
						"description": "Allow Attachments?",
						"type": "boolean",
						"default": false,
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["absence_reasons"],
				"operationId": "postApiV1AbsenceReasons"
			},
			"get": {
				"description": "List all Absence Reasons.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter for an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Absence Reasons." } },
				"tags": ["absence_reasons"],
				"operationId": "getApiV1AbsenceReasons"
			}
		},
		"/api/v1/absence_reasons/stats": {
			"get": {
				"description": "Return aggregated absence days for each absence reason",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start of the search period.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End of the search period.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Filter for an array Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "attachment",
						"description": "Filter for attached file -           'true' filters for only those absences which have attachment;           'false' filters for only those absences which do not have attachment;           'empty value' filters for all absences regardless of attachments",
						"type": "boolean",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_AbsenceReasons_Entities_AbsenceReasonsStats" }
					},
					"404": {
						"description": "Employment not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["absence_reasons"],
				"operationId": "getApiV1AbsenceReasonsStats"
			}
		},
		"/api/v1/absence_reasons/{id}": {
			"delete": {
				"description": "Delete an Absence Reason.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence Reason ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully deleted Absence Reason.",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "AbsenceReason not found\\nCompany not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["absence_reasons"],
				"operationId": "deleteApiV1AbsenceReasonsId"
			},
			"put": {
				"description": "Update an Absence Reason.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence Reason ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Absence Reason.",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "short_name",
						"description": "Short name of the Absence Reason.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "days",
						"description": "No of Days of the Absence Reason.",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "carry_over_days_enabled",
						"description": "Can Carry leftover absence days to the next year?",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "carry_over_days_deadline",
						"description": "Expiration date of carry over absence days.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "calculation_type",
						"description": "Absence days calculation type.",
						"type": "string",
						"default": "standard",
						"enum": ["standard", "shift_hours", "shifts_count"],
						"required": true
					},
					{
						"in": "formData",
						"name": "hours_calculation_type",
						"description": "Absence hours calculation type.",
						"type": "string",
						"default": "employee_profile",
						"enum": ["employee_profile", "scheduled_shifts"],
						"required": true
					},
					{
						"in": "formData",
						"name": "is_absence_attachments_allowed",
						"description": "Allow Attachments?",
						"type": "boolean",
						"default": false,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "AbsenceReason not found\\nCompany not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["absence_reasons"],
				"operationId": "putApiV1AbsenceReasonsId"
			},
			"get": {
				"description": "Return a Absence Reason.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Absence Reason ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_AbsenceReasons_Entities_AbsenceReasonResponse" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "AbsenceReason not found\\nCompany not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["absence_reasons"],
				"operationId": "getApiV1AbsenceReasonsId"
			}
		},
		"/api/v1/assignment_groups": {
			"post": {
				"description": "Create a new AssignmentGroup",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "AssignmentGroup metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_AssignmentGroupResponseEntity_AssignmentGroupResponse"
						}
					},
					"404": {
						"description": "Couldn't find Company\\nCouldn't find Shiftplan",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Name is already taken\\nShiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["assignment_groups"],
				"operationId": "postApiV1AssignmentGroups"
			},
			"get": {
				"description": "List all AssignmentGroups.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single AssignmentGroup ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of AssignmentGroup ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_id",
						"description": "Filter for single Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_ids[]",
						"description": "Filter an array of Shiftplan ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all AssignmentGroups." } },
				"tags": ["assignment_groups"],
				"operationId": "getApiV1AssignmentGroups"
			}
		},
		"/api/v1/assignment_groups/{id}/unassign_employment": {
			"post": {
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "AssignmentGroup ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "start_date",
						"description": "Start Date to Filter shifts to in ISO 8601 format with time and UTC offset",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "end_date",
						"description": "End Date to Filter shifts to in ISO 8601 format with time and UTC offset",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": { "201": { "description": "created UnassignEmployment" } },
				"tags": ["assignment_groups"],
				"operationId": "postApiV1AssignmentGroupsIdUnassignEmployment"
			}
		},
		"/api/v1/assignment_groups/{id}": {
			"put": {
				"description": "Update an existing AssignmentGroup",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "AssignmentGroup ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "AssignmentGroup metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_AssignmentGroupResponseEntity_AssignmentGroupResponse"
						}
					},
					"404": {
						"description": "Couldn't find Company\\nCouldn't find Assignment Group",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Name is already taken\\nShiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["assignment_groups"],
				"operationId": "putApiV1AssignmentGroupsId"
			},
			"delete": {
				"description": "Delete an AssignmentGroup",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "AssignmentGroup id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Delete an AssignmentGroup" } },
				"tags": ["assignment_groups"],
				"operationId": "deleteApiV1AssignmentGroupsId"
			},
			"get": {
				"description": "Return an AssignmentGroup.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "AssignmentGroup ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return an AssignmentGroup." } },
				"tags": ["assignment_groups"],
				"operationId": "getApiV1AssignmentGroupsId"
			}
		},
		"/api/v1/assignment_groups/{id}/assign_employment": {
			"post": {
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "start_date",
						"description": "Start Date to Filter shifts to in ISO 8601 format with time and UTC offset",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "end_date",
						"description": "End Date to Filter shifts to in ISO 8601 format with time and UTC offset",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "AssignmentGroup ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eshifts_collision\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003elocations_position_changed\u003c/li\u003e\u003cli\u003eminimum_break\u003c/li\u003e\u003cli\u003emaximum_working_hours\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003emaximum_earning\u003c/li\u003e\u003cli\u003eoutside_employment_period\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eunavailable\u003c/li\u003e\u003cli\u003enot_available\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					}
				],
				"responses": { "201": { "description": "created AssignEmployment" } },
				"tags": ["assignment_groups"],
				"operationId": "postApiV1AssignmentGroupsIdAssignEmployment"
			}
		},
		"/api/v1/assignment_groups/{id}/remove_shift": {
			"put": {
				"description": "Remove AssignmentGroup from a Shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "AssignmentGroup id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "Shift id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Remove AssignmentGroup from a Shift" } },
				"tags": ["assignment_groups"],
				"operationId": "putApiV1AssignmentGroupsIdRemoveShift"
			}
		},
		"/api/v1/assignment_groups/{id}/add_shift": {
			"put": {
				"description": "Add AssignmentGroup to a Shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "AssignmentGroup id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "Shift id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Add AssignmentGroup to a Shift" } },
				"tags": ["assignment_groups"],
				"operationId": "putApiV1AssignmentGroupsIdAddShift"
			}
		},
		"/api/v1/availabilities": {
			"get": {
				"description": "List all Availabilities",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Availability ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Availability ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter for single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Return all availabilities which can be applied to the timeframe. NOTICE: starts_at AND ends_at needs to be set",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "Return all availabilities which can be applied to the timeframe. NOTICE: starts_at AND ends_at needs to be set",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Availabilities" } },
				"tags": ["availabilities"],
				"operationId": "getApiV1Availabilities"
			},
			"post": {
				"description": "Create a new Availability",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the Availability (rounded to steps of 15 minutes)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the Availability (rounded to steps of 15 minutes)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "override",
						"description": "Destroy conflicting availabilities",
						"type": "boolean",
						"default": false,
						"required": true
					},
					{
						"in": "formData",
						"name": "available",
						"description": "Is the Employee available or inavailable",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "repeat",
						"description": "Is the Availability weekly repeated",
						"type": "boolean",
						"default": false,
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a new Availability" } },
				"tags": ["availabilities"],
				"operationId": "postApiV1Availabilities"
			}
		},
		"/api/v1/availabilities/exceptions": {
			"get": {
				"description": "List all Availability Exceptions",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single AvailabilityException ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of AvailabilityException ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "availability_id",
						"description": "Filter for single Availability ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "availability_ids[]",
						"description": "Filter an array of Availability ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Availability Exceptions" } },
				"tags": ["availabilities"],
				"operationId": "getApiV1AvailabilitiesExceptions"
			}
		},
		"/api/v1/availabilities/exceptions/{exception_id}": {
			"delete": {
				"description": "Delete an existing Availability Exception",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "exception_id",
						"description": "Availability Exception id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Delete an existing Availability Exception" } },
				"tags": ["availabilities"],
				"operationId": "deleteApiV1AvailabilitiesExceptionsExceptionId"
			},
			"get": {
				"description": "Return a Availability Exception",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "exception_id",
						"description": "Availability Exception id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Availability Exception" } },
				"tags": ["availabilities"],
				"operationId": "getApiV1AvailabilitiesExceptionsExceptionId"
			}
		},
		"/api/v1/availabilities/{availability_id}": {
			"delete": {
				"description": "Delete an existing Availability",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "availability_id",
						"description": "Availability id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Delete an existing Availability" } },
				"tags": ["availabilities"],
				"operationId": "deleteApiV1AvailabilitiesAvailabilityId"
			},
			"put": {
				"description": "Update an existing Availability",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "availability_id",
						"description": "Availability id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the Availability (rounded to steps of 15 minutes)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the Availability (rounded to steps of 15 minutes)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "override",
						"description": "Destroy conflicting availabilities",
						"type": "boolean",
						"default": false,
						"required": true
					},
					{
						"in": "formData",
						"name": "available",
						"description": "Is the Employee available or inavailable",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "formData",
						"name": "update_all",
						"description": "Set to true to update all records of repeating event",
						"type": "boolean",
						"default": true,
						"required": true
					}
				],
				"responses": { "200": { "description": "Update an existing Availability" } },
				"tags": ["availabilities"],
				"operationId": "putApiV1AvailabilitiesAvailabilityId"
			},
			"get": {
				"description": "Return a Availability",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "availability_id",
						"description": "Availability id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Availability" } },
				"tags": ["availabilities"],
				"operationId": "getApiV1AvailabilitiesAvailabilityId"
			}
		},
		"/api/v1/availabilities/{availability_id}/exceptions": {
			"get": {
				"description": "List all Availability Exceptions for parent Availability",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "availability_id",
						"description": "Availability id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": {
					"200": { "description": "List all Availability Exceptions for parent Availability" }
				},
				"tags": ["availabilities"],
				"operationId": "getApiV1AvailabilitiesAvailabilityIdExceptions"
			},
			"post": {
				"description": "Create a new Availability Exception",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "availability_id",
						"description": "Availability id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the selected Availability out of a repeated Availability which should be counted as an exception (must fit the exact availability start)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the selected Availability out of a repeated Availability which should be counted as an exception (must fit the exact availability start)",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a new Availability Exception" } },
				"tags": ["availabilities"],
				"operationId": "postApiV1AvailabilitiesAvailabilityIdExceptions"
			}
		},
		"/api/v1/availability_aggregations": {
			"get": {
				"description": "Gets all availabilities aggregated",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start of time frame in ISO 8601 format with time and UTC offset (time is nullified)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End of time frame in ISO 8601 format with time and UTC offset (time is nullified)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "position_ids[]",
						"description": "Array of Position ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "order_key",
						"description": "Sort keys",
						"type": "string",
						"default": "employee_last_name",
						"enum": ["employee_last_name", "available_hours", "contract_hours"],
						"required": false
					},
					{
						"in": "query",
						"name": "order_dir",
						"description": "Sort direction",
						"type": "string",
						"default": "desc",
						"enum": ["asc", "desc"],
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_AvailabilityAggregationIndexResponseEntity" }
					},
					"404": {
						"description": "Couldn't find Company",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid\\nStart date should be earlier than end date\\nCurrent company cannot be blank",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["availability_aggregations"],
				"operationId": "getApiV1AvailabilityAggregations"
			}
		},
		"/api/v1/background_jobs": {
			"get": {
				"description": "Return list of Background Jobs. Background jobs are deleted after 14 days.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID for which we need to fetch the Background Jobs",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Filter by created_after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Filter by updated_after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Background Job IDs",
						"type": "array",
						"items": { "type": "string" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_BackgroundJobIndexResponseEntity" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Couldn't find Company",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["background_jobs"],
				"operationId": "getApiV1BackgroundJobs"
			}
		},
		"/api/v1/background_jobs/{id}": {
			"get": {
				"description": "Return a Background Job. Background jobs are deleted after 14 days.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Background Job ID",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID for which we need to fetch the Background Job",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_BackgroundJobResponseEntity" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Couldn't find Company\\nBackground Job not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["background_jobs"],
				"operationId": "getApiV1BackgroundJobsId"
			}
		},
		"/api/v1/bulk_requests": {
			"post": {
				"description": "Make bulk calls in the API",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "payload[][path]",
						"description": "Path to the individual API",
						"type": "array",
						"required": true,
						"items": { "type": "string" }
					},
					{
						"in": "formData",
						"name": "payload[][method]",
						"description": "HTTP methods. Currently only DELETE, PATCH and POST.",
						"type": "array",
						"default": "DELETE",
						"required": true,
						"items": { "type": "string", "enum": ["DELETE", "PATCH", "POST"] }
					},
					{
						"in": "formData",
						"name": "payload[][data]",
						"description": "Data to change.",
						"type": "array",
						"required": false,
						"items": { "type": "json" }
					},
					{
						"in": "formData",
						"name": "payload[][ids][]",
						"description": "Ids of the objects",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "payload[][group_id]",
						"description": "Group Id",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_BulkRequestResponseEntity_BulkRequestResponseEntity"
						}
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422.1": {
						"description": "Payload must be an array of hashes",
						"schema": {
							"$ref": "#/definitions/V1_BulkRequestResponseEntity_PayloadMustBeArrayErrorDetails"
						}
					},
					"422.2": {
						"description": "The maximum amount of payload for bulk requests is 100 requests",
						"schema": {
							"$ref": "#/definitions/V1_BulkRequestResponseEntity_MaximumAmountOfPayloadRequestsError"
						}
					},
					"422.3": {
						"description": "One or more of the requests is invalid",
						"schema": { "$ref": "#/definitions/V1_BulkRequestResponseEntity_InvalidPayloadError" }
					},
					"422.4": {
						"description": "This payload is not in the correct format",
						"schema": {
							"$ref": "#/definitions/V1_BulkRequestResponseEntity_IncorrectPayloadFormatError"
						}
					},
					"422.5": {
						"description": "This change is not allowed",
						"schema": { "$ref": "#/definitions/V1_BulkRequestResponseEntity_NotAllowedChangeError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["bulk_requests"],
				"operationId": "postApiV1BulkRequests"
			}
		},
		"/api/v1/bulk_requests/{id}": {
			"get": {
				"description": "Return a Bulk Request",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Bulk Request ID",
						"type": "string",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully returned a Bulk Request",
						"schema": {
							"$ref": "#/definitions/V1_BulkRequestResponseEntity_BulkRequestResponseEntity"
						}
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403.1": {
						"description": "Must have made the bulk request to access",
						"schema": {
							"$ref": "#/definitions/V1_BulkRequestResponseEntity_MustBeTheSameEmploymentError"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403.2": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["bulk_requests"],
				"operationId": "getApiV1BulkRequestsId"
			}
		},
		"/api/v1/chat_messages/employments": {
			"get": {
				"description": "List of employments you can chat",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "query", "name": "company_id", "type": "string", "required": true }
				],
				"responses": { "200": { "description": "List of employments you can chat" } },
				"tags": ["chat_messages"],
				"operationId": "getApiV1ChatMessagesEmployments"
			}
		},
		"/api/v1/chat_messages/chats": {
			"get": {
				"description": "List of chats",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "query", "name": "company_id", "type": "string", "required": true }
				],
				"responses": { "200": { "description": "List of chats" } },
				"tags": ["chat_messages"],
				"operationId": "getApiV1ChatMessagesChats"
			}
		},
		"/api/v1/chat_messages": {
			"get": {
				"description": "List of messages in a chat",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "query", "name": "company_id", "type": "string", "required": true },
					{
						"in": "query",
						"name": "recipient_type",
						"type": "string",
						"enum": ["Employment", "LocationsPosition", "Location"],
						"required": true
					},
					{
						"in": "query",
						"name": "recipient_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "last_message_id",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": { "200": { "description": "List of messages in a chat" } },
				"tags": ["chat_messages"],
				"operationId": "getApiV1ChatMessages"
			},
			"post": {
				"description": "Send a message",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "formData", "name": "company_id", "type": "string", "required": true },
					{
						"in": "formData",
						"name": "recipient_type",
						"type": "string",
						"enum": ["Employment", "LocationsPosition", "Location"],
						"required": true
					},
					{
						"in": "formData",
						"name": "recipient_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "formData", "name": "message", "type": "string", "required": true }
				],
				"responses": { "201": { "description": "Send a message" } },
				"tags": ["chat_messages"],
				"operationId": "postApiV1ChatMessages"
			}
		},
		"/api/v1/calendar/aggregations": {
			"get": {
				"description": "Display aggregations of shifts and absences",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "query", "name": "company_id", "type": "string", "required": true },
					{
						"in": "query",
						"name": "start_date",
						"description": "Start date for aggregation",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "query",
						"name": "end_date",
						"description": "End date for aggregation",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "query",
						"name": "locations_position_ids[]",
						"description": "Array of LocationsPosition ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_rotation_group_ids[]",
						"description": "Array of ShiftRotationGroup ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_ids[]",
						"description": "Array of Shiftplan ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successful response",
						"schema": { "$ref": "#/definitions/V1_Calendars_Entities_AggregationIndexResponse" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid\\nStart date and end date must be present\\nStart date must be before end date\\nDifference between start date and end date should be below 32 days",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["calendar"],
				"operationId": "getApiV1CalendarAggregations"
			}
		},
		"/api/v1/companies": {
			"get": {
				"description": "List all Companies",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_CompanyResponseEntity_CompanyEntity" }
					}
				},
				"tags": ["companies"],
				"operationId": "getApiV1Companies"
			},
			"post": {
				"description": "Creates a Company",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "name",
						"description": "New Company name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "probable_employees",
						"description": "Probable number of employees",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "time_zone",
						"description": "Company time_zone",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "first_name",
						"description": "Contact persons first_name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "last_name",
						"description": "Contact persons last_name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "email",
						"description": "Contact persons email",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "password",
						"description": "Contact persons password",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "phone_number",
						"description": "Contact persons phone_number",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "tnc_check",
						"description": "Terms \u0026 Conditions checkbox (\"1\" is the only accepted value)",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "contract_check",
						"description": "Order processing contract checkbox (\"1\" is the only accepted value)",
						"type": "string",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_CompanyResponseEntity_CompanyEntity" }
					}
				},
				"tags": ["companies"],
				"operationId": "postApiV1Companies"
			}
		},
		"/api/v1/companies/{id}": {
			"get": {
				"description": "Return a Company",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_CompanyResponseEntity_CompanyEntity" }
					}
				},
				"tags": ["companies"],
				"operationId": "getApiV1CompaniesId"
			}
		},
		"/api/v1/companies/{id}/ui_settings": {
			"post": {
				"description": "Create/Update Company UI Setting",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true },
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "setting",
						"description": "Setting JSON",
						"type": "json",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_CompanyUiSettingEntity" }
					},
					"404": {
						"description": ["Company not found"],
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["companies"],
				"operationId": "postApiV1CompaniesIdUiSettings"
			},
			"get": {
				"description": "Get Company UI Setting",
				"produces": ["application/json"],
				"parameters": [
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true },
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_CompanyUiSettingEntity" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["companies"],
				"operationId": "getApiV1CompaniesIdUiSettings"
			}
		},
		"/api/v1/custom_fields": {
			"post": {
				"description": "Create a custom_field",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id to create custom_field",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the custom_field",
						"type": "string",
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a custom_field" } },
				"tags": ["custom_fields"],
				"operationId": "postApiV1CustomFields"
			},
			"get": {
				"description": "List all Custom Fields.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single CustomField ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for an array of CustomField ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter for array of company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Custom Fields." } },
				"tags": ["custom_fields"],
				"operationId": "getApiV1CustomFields"
			}
		},
		"/api/v1/custom_fields/{id}": {
			"delete": {
				"description": "Delete a custom_field",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "custom_field id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Delete a custom_field" } },
				"tags": ["custom_fields"],
				"operationId": "deleteApiV1CustomFieldsId"
			},
			"put": {
				"description": "Update a custom_field",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "custom_field id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the custom_field",
						"type": "string",
						"required": true
					}
				],
				"responses": { "200": { "description": "Update a custom_field" } },
				"tags": ["custom_fields"],
				"operationId": "putApiV1CustomFieldsId"
			},
			"get": {
				"description": "Return a custom_field.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "custom_field id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a custom_field." } },
				"tags": ["custom_fields"],
				"operationId": "getApiV1CustomFieldsId"
			}
		},
		"/api/v1/employee_evaluations/{staff_shift_id}": {
			"get": {
				"description": "Show employee evaluation.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EmployeeEvaluationResponseEntity"
						}
					},
					"404": {
						"description": "Company not found; StaffShift not found; EmployeeEvaluation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_InvalidError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "getApiV1EmployeeEvaluationsStaffShiftId"
			},
			"post": {
				"description": "Sets an employee evaluation for a StaffShift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eminimum_break\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "evaluation_breaks[][starts_at]",
						"description": "Evaluation break starts from",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "formData",
						"name": "evaluation_breaks[][ends_at]",
						"description": "Evaluation break ends at",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "formData",
						"name": "payments[][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "payments[][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{
						"in": "formData",
						"name": "payments[][child_payments[]][][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "payments[][child_payments[]][][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{
						"in": "formData",
						"name": "evaluation_starts_at",
						"description": "Start of the Evaluation",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "evaluation_ends_at",
						"description": "End of the Evaluation",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "note",
						"description": "Comment",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "evaluation_break",
						"description": "Break duration in minutes",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "untimed_breaks",
						"description": "Untimed Breaks",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "evaluation_tag_ids[]",
						"description": "Array of EvaluationTag IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EmployeeEvaluationResponseEntity"
						}
					},
					"404.1": {
						"description": "Company not found; StaffShift not found; Couldn't find Paygrade Type",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.2": {
						"description": "Evaluation Tag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_EvaluationTagNotFoundError" }
					},
					"422.1": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_InvalidError" }
					},
					"422.2": {
						"description": "Sum of duration of all evaluation_breaks cannot be bigger than evaluation_break",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreakDurationInvalidError"
						}
					},
					"422.3": {
						"description": "There must be no overlapping breaks in evaluation",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreaksOverlapInvalidError"
						}
					},
					"422.4": {
						"description": "Either of evaluation breaks is invalid",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreakInvalidError"
						}
					},
					"422.5": {
						"description": "Incorrect evaluation tag context",
						"schema": { "$ref": "#/definitions/V1_Entities_EvaluationTagInvalidContextError" }
					},
					"422.6": {
						"description": "Paygrade type id of child payment cannot be same as parent",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentPaygradeTypeIdInvalidError"
						}
					},
					"422.7": {
						"description": "Invalid payment value",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentValueInvalidError"
						}
					},
					"422.8": {
						"description": "employee_payments.child_payments.paygrade_type_id already present",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EmployeePaymentTypeAlreadyPresentInvalidError"
						}
					},
					"422.9": {
						"description": "Minimum Break Conflict",
						"schema": { "$ref": "#/definitions/V1_Entities_MinimumBreakConflict" }
					},
					"400": {
						"description": "evaluation_break, untimed_breaks are mutually exclusive",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "postApiV1EmployeeEvaluationsStaffShiftId"
			},
			"delete": {
				"description": "Decline Employee Evaluation",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Decline Employee Evaluation",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationResponseEntity"
						}
					},
					"404": {
						"description": "Company not found\\nStaffShift not found\\nEmployeeEvaluation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "deleteApiV1EmployeeEvaluationsStaffShiftId"
			}
		},
		"/api/v1/employee_evaluations/{staff_shift_id}/accept": {
			"post": {
				"description": "Accepts an employee evaluation for a StaffShift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_break_warning",
						"description": "Ignore minimum break time warning (DEPRECATED. Please use ignore_conflicts)",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eminimum_break\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully accepted",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationResponseEntity"
						}
					},
					"404": {
						"description": "Company not found; StaffShift not found; EmployeeEvaluation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422.1": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_InvalidError" }
					},
					"422.2": {
						"description": "Minimum Break Conflict",
						"schema": { "$ref": "#/definitions/V1_Entities_MinimumBreakConflict" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "postApiV1EmployeeEvaluationsStaffShiftIdAccept"
			}
		},
		"/api/v1/employee_evaluations/{evaluation_id}/tags/{evaluation_tag_id}": {
			"delete": {
				"description": "Deletes EvaluationTag for Evaluation",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_tag_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_SuccessfullyDeletedResponse"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Evaluation Not Found, Company Not Found, Evaluation Tag Not Found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": { "description": "", "schema": { "$ref": "#/definitions/V1_Entities_Invalid" } }
				},
				"tags": ["employee_evaluations"],
				"operationId": "deleteApiV1EmployeeEvaluationsEvaluationIdTagsEvaluationTagId"
			}
		},
		"/api/v1/employee_evaluations/{evaluation_id}/tags": {
			"post": {
				"description": "Creates EvaluationTag for Evaluation",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "tag_id",
						"description": "Tag ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_EmployeeEvaluationTagsResponse"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Evaluation Not Found, Company Not Found, Tag Not Found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"400.1": {
						"description": "Tag does not have the correct context",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_IncorrectTagContextError"
						}
					},
					"400.2": {
						"description": "Tag is already on evaluation",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_TagAlreadyOnEvaluationError"
						}
					},
					"422": { "description": "", "schema": { "$ref": "#/definitions/V1_Entities_Invalid" } }
				},
				"tags": ["employee_evaluations"],
				"operationId": "postApiV1EmployeeEvaluationsEvaluationIdTags"
			},
			"get": {
				"description": "Gets EvaluationTags for Evaluation",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_EmployeeEvaluationTagsIndexResponse"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Evaluation Not Found, Company Not Found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "getApiV1EmployeeEvaluationsEvaluationIdTags"
			}
		},
		"/api/v1/employee_evaluations/{staff_shift_id}/payments/{payment_id}": {
			"put": {
				"description": "Updates Payment for Evaluation",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of the Company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "parent_payment_id",
						"description": "ID of Parent Payment",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "paygrade_type_id",
						"description": "ID of the Paygrade Type",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Payment value",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "payment_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentsResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Payment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentNotFoundError"
						}
					},
					"404.2": {
						"description": "ChildPayment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_ChildPaymentNotFoundError"
						}
					},
					"400.1": {
						"description": "Paygrade Type is not Bonus",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaygradeTypeNotBonusError"
						}
					},
					"400.2": {
						"description": "Paygrade Type is not Regular",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaygradeTypeNotRegularError"
						}
					},
					"422": {
						"description": "Cannot update payment",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "putApiV1EmployeeEvaluationsStaffShiftIdPaymentsPaymentId"
			},
			"get": {
				"description": "Gets Payment for Evaluation by id",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "ID of the Company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "payment_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentsResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Payment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentNotFoundError"
						}
					},
					"404.2": {
						"description": "ChildPayment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_ChildPaymentNotFoundError"
						}
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "getApiV1EmployeeEvaluationsStaffShiftIdPaymentsPaymentId"
			}
		},
		"/api/v1/employee_evaluations/{staff_shift_id}/payments": {
			"post": {
				"description": "Creates Payments for Evaluation",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Payment value",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "parent_payment_id",
						"description": "ID of Parent Payment",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of the Company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "paygrade_type_id",
						"description": "ID of PaygradeType",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": { "$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentsResponse" }
					},
					"400.1": {
						"description": "PaygradeType is not bonus",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaygradeTypeNotBonusError"
						}
					},
					"400.2": {
						"description": "Parent Payment is not regular",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_ParentPaymentNotRegularError"
						}
					},
					"404.1": {
						"description": "Payment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentNotFoundError"
						}
					},
					"404.2": {
						"description": "ChildPayment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_ChildPaymentNotFoundError"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"422": {
						"description": "Payment is not valid or PaygradeType has already been used",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "postApiV1EmployeeEvaluationsStaffShiftIdPayments"
			},
			"get": {
				"description": "Gets Payments for Evaluation",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "ID of the Company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentsIndexResponse"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "getApiV1EmployeeEvaluationsStaffShiftIdPayments"
			}
		},
		"/api/v1/employee_evaluations/{staff_shift_id}/evaluation_break/{evaluation_break_id}": {
			"delete": {
				"description": "Delete evaluation break",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_break_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": { "$ref": "#/definitions/V1_EvaluationBreakResponseEntity" }
					},
					"404": {
						"description": "Company not found\\nEvaluationBreak not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "deleteApiV1EmployeeEvaluationsStaffShiftIdEvaluationBreakEvaluationBreakId"
			},
			"put": {
				"description": "Update Evaluation break",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Evaluation break starts from",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Evaluation break ends at",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_break_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Update Evaluation break",
						"schema": { "$ref": "#/definitions/V1_EvaluationBreakResponseEntity" }
					},
					"404": {
						"description": "Company not found\\nEvaluationBreak not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "putApiV1EmployeeEvaluationsStaffShiftIdEvaluationBreakEvaluationBreakId"
			}
		},
		"/api/v1/employee_evaluations/{staff_shift_id}/evaluation_break": {
			"post": {
				"description": "Create Evaluation break",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Evaluation break starts from",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Evaluation break ends at",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Create Evaluation break",
						"schema": { "$ref": "#/definitions/V1_EvaluationBreakResponseEntity" }
					},
					"404": {
						"description": "Company not found\\nStaffShift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employee_evaluations"],
				"operationId": "postApiV1EmployeeEvaluationsStaffShiftIdEvaluationBreak"
			}
		},
		"/api/v2/employments": {
			"post": {
				"description": "Create an employee. Stakeholders can not be created.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "formData", "name": "first_name", "type": "string", "required": true },
					{ "in": "formData", "name": "last_name", "type": "string", "required": true },
					{ "in": "formData", "name": "is_paid_monthly", "type": "boolean", "required": false },
					{
						"in": "formData",
						"name": "sso_only",
						"description": "Create user as Single Sign-On only user. Password will be ignored if this flag is set",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "user_token",
						"description": "Token for punch-timing",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "maximum_money_enabled",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "maximum_money",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[mon_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[tue_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[wed_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[thu_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[fri_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[sat_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[sun_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[vacation_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "exit_date",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "exit_month_payed_partially",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "billing_type_id",
						"description": " 1 = abrechnen (is billed);  2 = nicht abrechnen (is not billed)",
						"type": "integer",
						"format": "int32",
						"enum": [1, 2],
						"required": false
					},
					{ "in": "formData", "name": "note", "type": "string", "required": false },
					{ "in": "formData", "name": "phone_number", "type": "string", "required": false },
					{ "in": "formData", "name": "staff_number", "type": "string", "required": false },
					{
						"in": "formData",
						"name": "email",
						"description": "email used to login to the employment created",
						"type": "string",
						"required": false
					},
					{ "in": "formData", "name": "password", "type": "string", "required": false }
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": { "$ref": "#/definitions/V2_EmploymentResponseEntity_EmploymentResponse" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"422.1": {
						"description": "Employment with company_id already exists",
						"schema": {
							"$ref": "#/definitions/V2_EmploymentResponseEntity_DuplicateEmploymentWithSameCompanyIdResponse"
						}
					},
					"422.2": {
						"description": "Employment with user_id already exists",
						"schema": {
							"$ref": "#/definitions/V2_EmploymentResponseEntity_DuplicateEmploymentWithSameUserIdResponse"
						}
					}
				},
				"tags": ["employments"],
				"operationId": "postApiV2Employments"
			}
		},
		"/api/v1/employments": {
			"get": {
				"description": "List all Employments.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "search",
						"description": "Search string to filter employees by name or staff number",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "staff_numbers[]",
						"description": "Filter an array of Staff numbers ID",
						"type": "array",
						"items": { "type": "string" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Filter for Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "Filter for single LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_ids[]",
						"description": "Filter an array of LocationsPosition ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_id",
						"description": "Filter for single Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_ids[]",
						"description": "Filter an array of Shiftplan ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_rotation_group_ids[]",
						"description": "Filter an array of Shift rotation group ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "not_in_shift_rotation_group_ids[]",
						"description": "Filter for employments who are not in these rotation groups",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "is_stakeholder",
						"description": "Filter for Stakeholders",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "is_owner",
						"description": "Filter for Owners",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "is_employee",
						"description": "Filter for Employees",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "invitation_state",
						"description": "tbd",
						"type": "string",
						"enum": ["new", "accepted", "refused"],
						"required": false
					},
					{
						"in": "query",
						"name": "invitation_states[]",
						"description": "tbd",
						"type": "array",
						"items": { "type": "string", "enum": ["new", "accepted", "refused"] },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "include_live_info",
						"description": "Include live info(might be slow)",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "query",
						"name": "with_deleted",
						"description": "Include soft-deleted employments",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "query",
						"name": "qualification_id",
						"description": "Filter for single Qualification ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "qualification_ids[]",
						"description": "Filter an array of Qualification ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "tag_ids[]",
						"description": "Filter by an array of Employee Attribute IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "access_level",
						"description": "Access level filter used for employments",
						"type": "string",
						"default": "all",
						"enum": ["all", "manage_availabilities"],
						"required": false
					},
					{
						"in": "query",
						"name": "order_key",
						"description": "Sort keys",
						"type": "string",
						"default": "last_name",
						"enum": ["last_name", "state"],
						"required": false
					},
					{
						"in": "query",
						"name": "order_dir",
						"description": "Sort direction",
						"type": "string",
						"default": "asc",
						"enum": ["asc", "desc"],
						"required": false
					}
				],
				"responses": {
					"200.1": {
						"description": "With viewable right - Success",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentResponseEntity_DefaultEmploymentsResponseEntity"
						}
					},
					"200.2": {
						"description": "With payment viewable right - Success",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentResponseEntity_PaymentViewableEmploymentsResponseEntity"
						}
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1Employments"
			}
		},
		"/api/v1/employments/info": {
			"get": {
				"description": "List of employees available/working at shift schedule",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Page no",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Total employees page page",
						"type": "integer",
						"format": "int32",
						"default": 10,
						"required": false
					},
					{
						"in": "query",
						"name": "filters[start_date]",
						"description": "Start date in ISO 8601 format with time and UTC offset",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "filters[end_date]",
						"description": "End date in ISO 8601 format with time and UTC offset",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "filters[employment_ids][]",
						"description": "Employment IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[location_ids][]",
						"description": "Location IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[locations_position_ids][]",
						"description": "Locations position IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[shift_rotation_group_ids][]",
						"description": "Shift rotation group IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[search_string]",
						"description": "Search employee by the name or staff number",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[tag_ids][]",
						"description": "Filter by an array of Employee Attribute IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "sort_name",
						"description": "Sorting param",
						"type": "string",
						"default": "name",
						"enum": [
							"name",
							"worked-minutes",
							"remaining-minutes",
							"hour-account-hours",
							"bring-shifts",
							"earned-amount",
							"maximum-money",
							"remaining-money"
						],
						"required": false
					},
					{
						"in": "query",
						"name": "sort_direction",
						"description": "Sorting direction",
						"type": "string",
						"default": "ASC",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentResponseEntity_EmploymentInfoResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found\\nShiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "ends_at cannot be before starts_at",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsInfo"
			}
		},
		"/api/v1/employments/potential_conflicts": {
			"get": {
				"description": "Given the list of employees, returns potential conflict that these employees may have for the given date.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "conflicts",
						"description": "Either true to check all conflicts from company settings or an Array of conflicts to check.Possible values are:\u003cul\u003e \u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003eshifts_collision\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": true,
						"required": true
					},
					{
						"in": "query",
						"name": "shift_preset_id_per_employment[][shift_preset_id]",
						"description": "Shift Preset ID",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "shift_preset_id_per_employment[][employment_ids][]",
						"description": "Employment IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": true
					},
					{
						"in": "query",
						"name": "date",
						"description": "Date for which to check potential conflicts to in ISO 8601 format with time and UTC offset",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentResponseEntity_PotentialConflictsResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": ["Company not found", "Employment not found", "ShiftPreset Not found"],
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsPotentialConflicts"
			}
		},
		"/api/v1/employments/my": {
			"get": {
				"description": "List all Users Employments.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "Success" } },
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsMy"
			}
		},
		"/api/v1/employments/{id}/notifications": {
			"get": {
				"description": "Get count of new absences the employment has manage rights over in a given company",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully retrieved notifications",
						"schema": {
							"$ref": "#/definitions/V1_Employments_Notifications_Entities_NewAbsencesCount"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Requested employment does not belong to user",
						"schema": { "$ref": "#/definitions/V1_Entities_InvalidError" }
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdNotifications"
			}
		},
		"/api/v1/employments/{id}/availabilities": {
			"get": {
				"description": "Get all availabilities (and unavailabilities) related to this employment as per params",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start Date to get availabilities from",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End Date to get availabilities from",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "availability_ids[]",
						"description": "Availabilities Ids to filter for",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Page to fetch for pagination",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Per Page items for pagination",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Get all availabilities (and unavailabilities) related to this employment as per params"
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdAvailabilities"
			}
		},
		"/api/v1/employments/{id}": {
			"delete": {
				"description": "Soft Destroy an employment... You can restore it back later",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": { "description": "Soft Destroy an employment... You can restore it back later" }
				},
				"tags": ["employments"],
				"operationId": "deleteApiV1EmploymentsId"
			},
			"get": {
				"description": "Return an Employment.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200.1": {
						"description": "With viewable right - Success",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentResponseEntity_DefaultEmploymentResponseEntity"
						}
					},
					"200.2": {
						"description": "With payment viewable right - Success",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentResponseEntity_PaymentViewableEmploymentResponseEntity"
						}
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsId"
			}
		},
		"/api/v1/employments/{id}/destroy_employment": {
			"post": {
				"description": "Permanently destroy an employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Permanently destroy an employment" } },
				"tags": ["employments"],
				"operationId": "postApiV1EmploymentsIdDestroyEmployment"
			}
		},
		"/api/v1/employments/{id}/restore_employment": {
			"post": {
				"description": "Restore an employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Restore an employment" } },
				"tags": ["employments"],
				"operationId": "postApiV1EmploymentsIdRestoreEmployment"
			}
		},
		"/api/v1/employments/{id}/rights": {
			"get": {
				"description": "Return rights of an employee",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return rights of an employee" } },
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdRights"
			}
		},
		"/api/v1/employments/{id}/live_info": {
			"get": {
				"description": "Return live info of Employment",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return live info of Employment" } },
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdLiveInfo"
			}
		},
		"/api/v1/employments/{id}/yearly_bring_shifts/for_year": {
			"put": {
				"description": "Update yearly bring shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "year",
						"description": "Year to update.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "hours",
						"description": "Hours of the Yearly Bring Shift.",
						"type": "number",
						"format": "float",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_YearlyBringShiftResponse"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"400.1": {
						"description": "Hours must be bigger than 0",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_NegativeHoursError"
						}
					},
					"400.2": {
						"description": "Year outside of range",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_YearsOutsideRangeError"
						}
					},
					"400.3": {
						"description": "BringShifts feature not enabled",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_FeatureNotEnabledError"
						}
					},
					"404": {
						"description": "Company not found\\nEmployment not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["employments"],
				"operationId": "putApiV1EmploymentsIdYearlyBringShiftsForYear"
			}
		},
		"/api/v1/employments/{id}/yearly_bring_shifts": {
			"get": {
				"description": "Get yearly bring shifts by range",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "start_year",
						"description": "Start of year range.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "end_year",
						"description": "End of year range.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_YearlyBringShiftIndexResponse"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"400.1": {
						"description": "StartYear has to be lower or equal than EndYear",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_InconsistentYearsError"
						}
					},
					"400.2": {
						"description": "Year outside of range",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_YearsOutsideRangeError"
						}
					},
					"400.3": {
						"description": "BringShifts feature not enabled",
						"schema": {
							"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_FeatureNotEnabledError"
						}
					},
					"404": {
						"description": "Company not found\\nEmployment not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdYearlyBringShifts"
			}
		},
		"/api/v1/employments/{id}/paygrades": {
			"post": {
				"description": "Create paygrades for employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employments_position_id",
						"description": "EmploymentsPosition ID to add paygrade for particular position to the employment",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "monthly_paygrade",
						"description": "Add to Monthly Paygrade of employment if true",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "parent_paygrade_id",
						"description": "Parent paygrade ID to which a bonus paygrade to be added",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "paygrade_type_id",
						"description": "Paygrade Type ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Paygrade value",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "update_paygrades",
						"description": "Update paygrades on shifts",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "formData",
						"name": "update_start_date",
						"description": "Paygrade value",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "update_end_date",
						"description": "Paygrade value",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "update_force",
						"description": "Paygrade value",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "formData",
						"name": "update_all",
						"description": "Paygrade value",
						"type": "boolean",
						"default": true,
						"required": true
					}
				],
				"responses": { "201": { "description": "Create paygrades for employment" } },
				"tags": ["employments"],
				"operationId": "postApiV1EmploymentsIdPaygrades"
			},
			"get": {
				"description": "employment all paygrades",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "employment all paygrades" } },
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdPaygrades"
			}
		},
		"/api/v1/employments/{id}/paygrades/{paygrade_id}": {
			"delete": {
				"description": "Delete paygrade or bonus paygrade for an employment",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "update_paygrades",
						"description": "Update paygrades on shifts",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "query",
						"name": "update_start_date",
						"description": "Paygrade value",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "query",
						"name": "update_end_date",
						"description": "Paygrade value",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "query",
						"name": "update_force",
						"description": "Paygrade value",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "query",
						"name": "update_all",
						"description": "Paygrade value",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "path",
						"name": "paygrade_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": { "description": "Delete paygrade or bonus paygrade for an employment" }
				},
				"tags": ["employments"],
				"operationId": "deleteApiV1EmploymentsIdPaygradesPaygradeId"
			},
			"get": {
				"description": "Paygrade or bonus paygrade for an employment",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "paygrade_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Paygrade or bonus paygrade for an employment" } },
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdPaygradesPaygradeId"
			},
			"put": {
				"description": "Change paygrade or bonus paygrade for an employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "paygrade_type_id",
						"description": "Paygrade Type ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Paygrade value",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "update_paygrades",
						"description": "Update paygrades on shifts",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "formData",
						"name": "update_start_date",
						"description": "Paygrade value",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "update_end_date",
						"description": "Paygrade value",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "update_force",
						"description": "Paygrade value",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "formData",
						"name": "update_all",
						"description": "Paygrade value",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "path",
						"name": "paygrade_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Change paygrade or bonus paygrade for an employment" }
				},
				"tags": ["employments"],
				"operationId": "putApiV1EmploymentsIdPaygradesPaygradeId"
			}
		},
		"/api/v1/employments/{id}/ui_settings": {
			"get": {
				"description": "Get Employment UI Setting",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_EmploymentUiSettingEntity" }
					},
					"404": {
						"description": "Company not found\\nEmployment not found\\nEmployment can only change UI settings for themselves",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employments"],
				"operationId": "getApiV1EmploymentsIdUiSettings"
			},
			"post": {
				"description": "Create Employment UI Setting",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "setting",
						"description": "Setting JSON",
						"type": "json",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"201": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_EmploymentUiSettingEntity" }
					},
					"404": {
						"description": "Company not found\\nEmployment not found\\nEmployment can only change for themselves",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employments"],
				"operationId": "postApiV1EmploymentsIdUiSettings"
			}
		},
		"/api/v1/employments_paygrades": {
			"get": {
				"description": "List all employments_paygrades related to one given company.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter for an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": { "description": "List all employments_paygrades related to one given company." }
				},
				"tags": ["employments_paygrades"],
				"operationId": "getApiV1EmploymentsPaygrades"
			}
		},
		"/api/v1/employments_positions": {
			"post": {
				"description": "Create a new EmploymentsPosition",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "EmploymentsPosition metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": { "201": { "description": "Create a new EmploymentsPosition" } },
				"tags": ["employments_positions"],
				"operationId": "postApiV1EmploymentsPositions"
			},
			"get": {
				"description": "List all EmploymentsPositions.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Comapny ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single EmploymentsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of EmploymentsPosition ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter for single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Filter for single Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "Filter for single LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_ids[]",
						"description": "Filter an array of LocationsPosition ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "response_format",
						"description": "Set to nested if result should look like {items: [...], total: x}",
						"type": "string",
						"default": "plain",
						"enum": ["plain", "nested", "compact"],
						"required": false
					}
				],
				"responses": { "200": { "description": "List all EmploymentsPositions." } },
				"tags": ["employments_positions"],
				"operationId": "getApiV1EmploymentsPositions"
			}
		},
		"/api/v1/employments_positions/{id}": {
			"delete": {
				"description": "Delete a EmploymentsPosition",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "EmploymentsPosition ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "keep_future_staff_shifts",
						"description": "Keep future staff shifts",
						"type": "boolean",
						"default": true,
						"required": false
					}
				],
				"responses": { "204": { "description": "Delete a EmploymentsPosition" } },
				"tags": ["employments_positions"],
				"operationId": "deleteApiV1EmploymentsPositionsId"
			},
			"get": {
				"description": "Return a EmploymentsPosition.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "EmploymentsPosition ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a EmploymentsPosition." } },
				"tags": ["employments_positions"],
				"operationId": "getApiV1EmploymentsPositionsId"
			}
		},
		"/api/v1/employments_rotation_groups": {
			"get": {
				"description": "Get collection of rotation groups of employees",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company Id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Employment Ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_rotation_group_ids[]",
						"description": "Shift rotation group Ids (only applicable for regular rotations)",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_rotation_ids[]",
						"description": "Shift rotation Ids (only applicable for regular rotations)",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "rotation_type[]",
						"type": "array",
						"items": {
							"type": "string",
							"enum": ["regular", "individual"],
							"default": ["regular"]
						},
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "List of employments rotation groups",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupIndexResponse"
						}
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employments_rotation_groups"],
				"operationId": "getApiV1EmploymentsRotationGroups"
			},
			"post": {
				"description": "Create employments rotation groups",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_rotation_group_id",
						"description": "Shift Rotation Group ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Employments rotation group valid from",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Employments rotation group ends at",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupResponse"
						}
					},
					"404": {
						"description": "Shift rotation group/Employment not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.1": {
						"description": "ends_at Should be after the start time.",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.2": {
						"description": "base Employee can't be in two groups at any moment in time",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.3": {
						"description": "base Employee cannot be assigned to the rotation group, because employee cannot work on shift preset ShiftPresetName",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employments_rotation_groups"],
				"operationId": "postApiV1EmploymentsRotationGroups"
			}
		},
		"/api/v1/employments_rotation_groups/{id}": {
			"delete": {
				"description": "Delete employments rotation group",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupResponse"
						}
					},
					"404": {
						"description": "Employments rotation group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employments_rotation_groups"],
				"operationId": "deleteApiV1EmploymentsRotationGroupsId"
			},
			"put": {
				"description": "Update an Employments rotation group.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Employmnets rotation group valid from",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Employmnets rotation group ends at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "strategy_to_unassign_from_shifts",
						"description": "When ends_at is provided, it is possible to unassign employee from shifts after ends_at. There are two strategies: \"all\" and \"rotation_group\". When \"all\" is passed, employee is unassigned from all shifts after end_at. When \"rotation_group\" is passed, employee is unassigned from all shifts of the rotation group after ends_at. Employee is unassigned in the background.",
						"type": "string",
						"enum": ["all", "rotation_group"],
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": {
							"$ref": "#/definitions/V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupResponse"
						}
					},
					"404": {
						"description": "Shift rotation group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.1": {
						"description": "ends_at Should be after the start time.",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.2": {
						"description": "base Employee can't be in two groups at any moment in time",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.3": {
						"description": "base Employee cannot be assigned to the rotation group, because employee cannot work on shift preset ShiftPresetName",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["employments_rotation_groups"],
				"operationId": "putApiV1EmploymentsRotationGroupsId"
			}
		},
		"/api/v1/employments_surveys/{id}": {
			"post": {
				"description": "Save employments_survey for the Employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "first_name",
						"description": "First Name of the Employee",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "last_name",
						"description": "Last Name of the Employee",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "middle_name",
						"description": "Other given names",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "other_address",
						"description": "By default the adress of the User model is used. If you want to use an alternative one set this value to true and fill out all address fields.",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "street",
						"description": "Put street when other_address is true",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "street_number",
						"description": "Put street_number when other_address is true",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "zip",
						"description": "Put zip when other_address is true",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "city",
						"description": "Put city when other_address is true",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "country",
						"description": "Select country when other_address is true",
						"type": "string",
						"default": "DE",
						"enum": [
							"TJ",
							"JM",
							"HT",
							"ST",
							"MS",
							"AE",
							"PK",
							"NL",
							"LU",
							"BZ",
							"IR",
							"BO",
							"UY",
							"GH",
							"SA",
							"CI",
							"MF",
							"TF",
							"AI",
							"QA",
							"SX",
							"LY",
							"BV",
							"PG",
							"KG",
							"GQ",
							"EH",
							"NU",
							"PR",
							"GD",
							"KR",
							"HM",
							"SM",
							"SL",
							"CD",
							"MK",
							"TR",
							"DZ",
							"GE",
							"PS",
							"BB",
							"UA",
							"GP",
							"PF",
							"NA",
							"BW",
							"SY",
							"TG",
							"DO",
							"AQ",
							"CH",
							"MG",
							"FO",
							"VG",
							"GI",
							"BN",
							"LA",
							"IS",
							"EE",
							"UM",
							"LT",
							"RS",
							"MR",
							"AD",
							"HU",
							"TK",
							"MY",
							"AO",
							"CV",
							"NF",
							"PA",
							"GW",
							"BE",
							"PT",
							"GB",
							"IM",
							"US",
							"YE",
							"HK",
							"AZ",
							"CC",
							"ML",
							"SK",
							"VU",
							"TL",
							"HR",
							"SR",
							"MU",
							"CZ",
							"PM",
							"LS",
							"WS",
							"KM",
							"IT",
							"BI",
							"WF",
							"GN",
							"SG",
							"CO",
							"CN",
							"AW",
							"MA",
							"FI",
							"VA",
							"ZW",
							"KY",
							"BH",
							"PY",
							"EC",
							"LR",
							"RU",
							"PL",
							"OM",
							"MT",
							"SS",
							"DE",
							"TM",
							"SJ",
							"MM",
							"TT",
							"IL",
							"BD",
							"NR",
							"LK",
							"UG",
							"NG",
							"BQ",
							"MX",
							"CW",
							"SI",
							"MN",
							"CA",
							"AX",
							"VN",
							"TW",
							"JP",
							"IO",
							"RO",
							"BG",
							"GU",
							"BR",
							"AM",
							"ZM",
							"DJ",
							"JE",
							"AT",
							"CM",
							"SE",
							"FJ",
							"KZ",
							"GL",
							"GY",
							"CX",
							"MW",
							"TN",
							"ZA",
							"TO",
							"CY",
							"MV",
							"PN",
							"RW",
							"NI",
							"KN",
							"BJ",
							"ET",
							"GM",
							"TZ",
							"VC",
							"FK",
							"SD",
							"MC",
							"AU",
							"CL",
							"DK",
							"FR",
							"TC",
							"CU",
							"AL",
							"MZ",
							"BS",
							"NE",
							"GT",
							"LI",
							"NP",
							"BF",
							"PW",
							"KW",
							"IN",
							"GA",
							"TV",
							"MO",
							"SH",
							"MD",
							"CK",
							"AR",
							"SC",
							"IE",
							"ES",
							"LB",
							"BM",
							"RE",
							"KI",
							"AG",
							"MQ",
							"SV",
							"JO",
							"TH",
							"SO",
							"MH",
							"CG",
							"KP",
							"GF",
							"BA",
							"YT",
							"GS",
							"KE",
							"PE",
							"BT",
							"SZ",
							"CR",
							"TD",
							"DM",
							"NC",
							"GR",
							"GG",
							"HN",
							"VI",
							"CF",
							"SN",
							"AF",
							"MP",
							"PH",
							"BY",
							"LV",
							"NO",
							"EG",
							"KH",
							"IQ",
							"LC",
							"NZ",
							"BL",
							"UZ",
							"ID",
							"ER",
							"VE",
							"FM",
							"SB",
							"ME",
							"AS"
						],
						"required": false
					},
					{
						"in": "formData",
						"name": "date_of_entry",
						"description": "Start date. Format: yyyy-mm-dd",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "birth_date",
						"description": "Format: yyyy-mm-dd",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "nationality",
						"description": "Nationality of the Employee",
						"type": "string",
						"default": "DE",
						"enum": [
							"TJ",
							"JM",
							"HT",
							"ST",
							"MS",
							"AE",
							"PK",
							"NL",
							"LU",
							"BZ",
							"IR",
							"BO",
							"UY",
							"GH",
							"SA",
							"CI",
							"MF",
							"TF",
							"AI",
							"QA",
							"SX",
							"LY",
							"BV",
							"PG",
							"KG",
							"GQ",
							"EH",
							"NU",
							"PR",
							"GD",
							"KR",
							"HM",
							"SM",
							"SL",
							"CD",
							"MK",
							"TR",
							"DZ",
							"GE",
							"PS",
							"BB",
							"UA",
							"GP",
							"PF",
							"NA",
							"BW",
							"SY",
							"TG",
							"DO",
							"AQ",
							"CH",
							"MG",
							"FO",
							"VG",
							"GI",
							"BN",
							"LA",
							"IS",
							"EE",
							"UM",
							"LT",
							"RS",
							"MR",
							"AD",
							"HU",
							"TK",
							"MY",
							"AO",
							"CV",
							"NF",
							"PA",
							"GW",
							"BE",
							"PT",
							"GB",
							"IM",
							"US",
							"YE",
							"HK",
							"AZ",
							"CC",
							"ML",
							"SK",
							"VU",
							"TL",
							"HR",
							"SR",
							"MU",
							"CZ",
							"PM",
							"LS",
							"WS",
							"KM",
							"IT",
							"BI",
							"WF",
							"GN",
							"SG",
							"CO",
							"CN",
							"AW",
							"MA",
							"FI",
							"VA",
							"ZW",
							"KY",
							"BH",
							"PY",
							"EC",
							"LR",
							"RU",
							"PL",
							"OM",
							"MT",
							"SS",
							"DE",
							"TM",
							"SJ",
							"MM",
							"TT",
							"IL",
							"BD",
							"NR",
							"LK",
							"UG",
							"NG",
							"BQ",
							"MX",
							"CW",
							"SI",
							"MN",
							"CA",
							"AX",
							"VN",
							"TW",
							"JP",
							"IO",
							"RO",
							"BG",
							"GU",
							"BR",
							"AM",
							"ZM",
							"DJ",
							"JE",
							"AT",
							"CM",
							"SE",
							"FJ",
							"KZ",
							"GL",
							"GY",
							"CX",
							"MW",
							"TN",
							"ZA",
							"TO",
							"CY",
							"MV",
							"PN",
							"RW",
							"NI",
							"KN",
							"BJ",
							"ET",
							"GM",
							"TZ",
							"VC",
							"FK",
							"SD",
							"MC",
							"AU",
							"CL",
							"DK",
							"FR",
							"TC",
							"CU",
							"AL",
							"MZ",
							"BS",
							"NE",
							"GT",
							"LI",
							"NP",
							"BF",
							"PW",
							"KW",
							"IN",
							"GA",
							"TV",
							"MO",
							"SH",
							"MD",
							"CK",
							"AR",
							"SC",
							"IE",
							"ES",
							"LB",
							"BM",
							"RE",
							"KI",
							"AG",
							"MQ",
							"SV",
							"JO",
							"TH",
							"SO",
							"MH",
							"CG",
							"KP",
							"GF",
							"BA",
							"YT",
							"GS",
							"KE",
							"PE",
							"BT",
							"SZ",
							"CR",
							"TD",
							"DM",
							"NC",
							"GR",
							"GG",
							"HN",
							"VI",
							"CF",
							"SN",
							"AF",
							"MP",
							"PH",
							"BY",
							"LV",
							"NO",
							"EG",
							"KH",
							"IQ",
							"LC",
							"NZ",
							"BL",
							"UZ",
							"ID",
							"ER",
							"VE",
							"FM",
							"SB",
							"ME",
							"AS"
						],
						"required": false
					},
					{
						"in": "formData",
						"name": "gender",
						"description": "Gender of the Employee",
						"type": "string",
						"enum": ["male", "female"],
						"required": false
					},
					{
						"in": "formData",
						"name": "bank_account_holder",
						"description": "Bank Account Holder",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "bank_name",
						"description": "Name of the Bank",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "bank_account_number",
						"description": "IBAN",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "bank_identifier_code",
						"description": "BIC",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_relationship",
						"description": "Status of employment. As of now only german taxation options",
						"type": "string",
						"enum": [
							"trainee",
							"full_time_employee",
							"mini_job",
							"volunteer_internship",
							"internship",
							"working_stundent",
							"owner",
							"short_time_employee"
						],
						"required": false
					},
					{
						"in": "formData",
						"name": "internship_certificate",
						"description": "Upload a PDF file not more than 4MB if employment_relationship is internship",
						"type": "file",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_type",
						"description": "Select one if employment_relationship is of any type but minijob",
						"type": "string",
						"enum": ["main_employment", "secondary_employment"],
						"required": false
					},
					{
						"in": "formData",
						"name": "further_minijobs",
						"description": "In order to correctly calculate your social security contributions, the payroll department needs a complete overview of all your employment relationships. If details are wrong or missing, then you and your employer might have to pay the outstanding contributions later all at once.",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "minijob_salary",
						"description": "Enter a value between 1 - 450 if further_minijobs is true",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "pension_insurance_exemption",
						"description": "Select one if employment_relationship is of type minijob",
						"type": "string",
						"enum": ["done", "later", "none"],
						"required": false
					},
					{
						"in": "formData",
						"name": "job_description",
						"description": "Main activity at work",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "highest_school_degree",
						"description": "Highest school degree",
						"type": "string",
						"enum": ["unknown", "none", "primary", "secondary", "mid_level", "high"],
						"required": false
					},
					{
						"in": "formData",
						"name": "highest_level_of_education",
						"description": "Highest level of education",
						"type": "string",
						"enum": [
							"unknown",
							"none",
							"professional",
							"engineer",
							"bachelor",
							"master",
							"doctorate"
						],
						"required": false
					},
					{
						"in": "formData",
						"name": "health_insurance_name",
						"description": "On the backside of health insurance card you can find “7. Kennnummer des Trägers” consisting of a number and then the name of health insurance provider (Enter if employment_relationship is not minijob)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "health_insurance_identification_number",
						"description": "On the backside of health insurance card you can find “7. Kennnummer des Trägers” consisting of a number and then the name of health insurance provider (Enter if employment_relationship is not minijob)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "social_security_number",
						"description": "The social security number serves to associate social security contributions with your person. Those social security contributions and the wage tax are deducted from your gross salary, which leads to the net salary visible in your bank account. Your social security contributions are important for you to continue receiving money in the case of an accident or illness and the longer you pay contributions, the higher will be your pension too. Therefore the social security number is also called pension insurance number. The number consists of 11 digits and 1 letter and amongst other things it contains your date of birth. This number will only be issued once in your life and you can inquire about it at your health insurance provider or contact the German Pension Insurance (in a subsidiary near you or via their free service hotline 0800/1000 480 25).",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "never_worked_in_germany",
						"description": "When you are working in Germany for the first time, we need to request a social security number for you from the German pension insurance",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "birth_name",
						"description": "Fill in case of never_worked_in_germany is set to true. If you are married and carry a different last name now, enter the last name you were given at birth here. Otherwise leave blank.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "birth_place",
						"description": "Fill in case of never_worked_in_germany is set to true.",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "tax_identification_number",
						"description": "The tax identification number (also called personal identification number, IdNr. or tax ID) has life-long validity and consists of 11 digits. Every person registered in Germany automatically receives a tax identification number. You can find it on your income tax assessment note or on the income tax notification of any year, but not on your monthly pay slip. Also don’t confuse this number with the eTIN! In case you really can’t find your tax ID anymore, you can use this form to request the number to be send to you via mail - it may take up to four weeks",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "family_status",
						"description": "Martial status",
						"type": "string",
						"enum": ["single", "married", "divorced", "widowed"],
						"required": false
					},
					{
						"in": "formData",
						"name": "tax_bracket",
						"description": "Select tax bracket",
						"type": "string",
						"enum": [
							"I",
							"II",
							"III",
							"IV",
							"IV_factor",
							"V",
							"VI",
							"flat_rate_2",
							"flat_rate_20",
							"flat_rate_25",
							"flat_rate_5",
							"untaxed",
							"untaxed_dba"
						],
						"required": false
					},
					{
						"in": "formData",
						"name": "tax_bracket_factor",
						"description": "Fill if tax_bracket is \"IV with factor\" (Value between 0.000 - 1.000)",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "denomination",
						"description": "Relevant for the deduction of church tax from your gross pay.",
						"type": "string",
						"enum": [
							"none",
							"protestant",
							"roman_catholic",
							"old_catholic",
							"is",
							"lt",
							"rf",
							"fr",
							"Ib",
							"Il",
							"If",
							"Iw",
							"fg",
							"fm",
							"fb",
							"fs",
							"fa",
							"jd",
							"ur"
						],
						"required": false
					},
					{
						"in": "formData",
						"name": "has_capital_forming_benefits",
						"description": "Captial-forming benefits",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "capital_forming_benefits_bank_name",
						"description": "Fill if has_capital_forming_benefits is true. Institute that issued your contract",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "capital_forming_benefits_contract_number",
						"description": "Fill if has_capital_forming_benefits is true. Contract number",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "capital_forming_benefits_contract_start",
						"description": "Fill if has_capital_forming_benefits is true. Commencement of the contract. Format: yyyy-mm-dd",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "capital_forming_benefits_total",
						"description": "Fill if has_capital_forming_benefits is true. Total amount per month",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "capital_forming_benefits_employers_contribution",
						"description": "Fill if has_capital_forming_benefits is true. Employer’s contribution",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "has_children",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "children_count",
						"description": "Fill if has_children is true.",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "children_proof",
						"description": "Selcet if has_children is true",
						"type": "string",
						"enum": ["done", "later"],
						"required": false
					},
					{
						"in": "formData",
						"name": "children_allowance",
						"description": "Fill if has_children is true. In general you are entitled to one children’s allowance per year and per child, which includes all underaged children and under certain conditions also children until the completion of their 25th year of life (see: https://service.berlin.de/dienstleistung/325821/). Further, a so-called relief amount for single parents is automatically deducted in tax category II.",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "comments",
						"description": "Additional comments",
						"type": "string",
						"required": false
					}
				],
				"responses": { "201": { "description": "Save employments_survey for the Employment" } },
				"tags": ["employments_surveys"],
				"operationId": "postApiV1EmploymentsSurveysId"
			},
			"get": {
				"description": "Return employments_surveys for the Employment",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return employments_surveys for the Employment" } },
				"tags": ["employments_surveys"],
				"operationId": "getApiV1EmploymentsSurveysId"
			}
		},
		"/api/v1/evaluation_breaks": {
			"get": {
				"description": "List all break times for staff shifts",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Evaluation break ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for an array of Evaluation break ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "staff_shift_id",
						"description": "Filter for break times of a staff_shift",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "staff_shift_ids[]",
						"description": "Filter an array of staff_shifts",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter for break times of an employee",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter an array of employees",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_id",
						"description": "Filter for break times of a shift",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter an array of shifts",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "evaluation_ids[]",
						"description": "Filter an array of evaluations",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Filter for evaluation breaks from",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "Filter for evaluation breaks to",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": { "200": { "description": "List all break times for staff shifts" } },
				"tags": ["evaluation_breaks"],
				"operationId": "getApiV1EvaluationBreaks"
			}
		},
		"/api/v1/evaluations": {
			"get": {
				"description": "List all Evaluations",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"type": "integer",
						"format": "int32",
						"default": 500,
						"minimum": 1,
						"maximum": 500,
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Evaluation ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "state",
						"type": "string",
						"enum": [
							"done_evaluation",
							"needs_evaluation",
							"no_evaluation",
							"no_show",
							"punchtimed",
							"auto_punchtimed"
						],
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter for single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_id",
						"description": "Filter for single Shift ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter an array of Shift ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "emp_status",
						"description": "Filter for a single employment status",
						"type": "string",
						"enum": ["inactive", "active", "destroyed", "noemail"],
						"required": false
					},
					{
						"in": "query",
						"name": "emp_statuses[]",
						"description": "Filter for an array of employment statuses",
						"type": "array",
						"items": { "type": "string", "enum": ["inactive", "active", "destroyed", "noemail"] },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Filter for single Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Filter an array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "position_id",
						"description": "Filter for single Position ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "position_ids[]",
						"description": "Filter an array of Position ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "position_status",
						"description": "Filter for deleted/undeleted positions",
						"type": "string",
						"enum": ["deleted", "undeleted"],
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "Filter for single LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_ids[]",
						"description": "Filter an array of LocationsPosition ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "include_payments",
						"description": "Include Payments in response",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "List all Evaluations",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationIndexResponse"
						}
					}
				},
				"tags": ["evaluations"],
				"operationId": "getApiV1Evaluations"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}/evaluation_breaks": {
			"post": {
				"description": "Create an evaluation break",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Evaluation break starts from",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Evaluation break ends at",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Create an evaluation break",
						"schema": { "$ref": "#/definitions/V1_EvaluationBreakResponseEntity" }
					},
					"404": {
						"description": "Company not found\\nStaffShift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "postApiV1EvaluationsStaffShiftIdEvaluationBreaks"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}/evaluation_breaks/{evaluation_break_id}": {
			"delete": {
				"description": "Delete evaluation break",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_break_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": { "$ref": "#/definitions/V1_EvaluationBreakResponseEntity" }
					},
					"404": {
						"description": "Company not found\\nEvaluationBreak not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "deleteApiV1EvaluationsStaffShiftIdEvaluationBreaksEvaluationBreakId"
			},
			"put": {
				"description": "Update Evaluation break",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Evaluation break starts from",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Evaluation break ends at",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "path",
						"name": "evaluation_break_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Update Evaluation break",
						"schema": { "$ref": "#/definitions/V1_EvaluationBreakResponseEntity" }
					},
					"404": {
						"description": "Company not found\\nEvaluationBreak not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "putApiV1EvaluationsStaffShiftIdEvaluationBreaksEvaluationBreakId"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}": {
			"post": {
				"description": "Sets an evaluation for a StaffShift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eminimum_break\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "evaluation_breaks[][starts_at]",
						"description": "Evaluation break starts from",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "formData",
						"name": "evaluation_breaks[][ends_at]",
						"description": "Evaluation break ends at",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "formData",
						"name": "payments[][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "payments[][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{
						"in": "formData",
						"name": "payments[][child_payments[]][][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "payments[][child_payments[]][][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{
						"in": "formData",
						"name": "evaluation_starts_at",
						"description": "Start of the Evaluation",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "evaluation_ends_at",
						"description": "End of the Evaluation",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "note",
						"description": "Comment",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "evaluation_break",
						"description": "Break duration in minutes",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "untimed_breaks",
						"description": "Untimed Breaks",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "evaluation_tag_ids[]",
						"description": "Array of EvaluationTag IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationResponseEntity"
						}
					},
					"404.1": {
						"description": "Company not found; StaffShift not found; Couldn't find Paygrade Type",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.2": {
						"description": "Evaluation Tag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_EvaluationTagNotFoundError" }
					},
					"422.1": {
						"description": "The request is invalid",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentTypeAlreadyPresentInvalidError"
						}
					},
					"422.2": {
						"description": "Staff Shift is in No Show state",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_StaffShiftNoShowError" }
					},
					"422.3": {
						"description": "Admin Evaluation is already being saved",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_PGUniqueViolationInvalidError"
						}
					},
					"422.4": {
						"description": "Sum of duration of all evaluation_breaks cannot be bigger than evaluation_break",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreakDurationInvalidError"
						}
					},
					"422.5": {
						"description": "There must be no overlapping breaks in evaluation",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreaksOverlapInvalidError"
						}
					},
					"422.6": {
						"description": "Either of evaluation breaks is invalid",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreakInvalidError"
						}
					},
					"422.7": {
						"description": "Incorrect evaluation tag context",
						"schema": { "$ref": "#/definitions/V1_Entities_EvaluationTagInvalidContextError" }
					},
					"422.8": {
						"description": "Paygrade type id of child payment cannot be same as parent",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentPaygradeTypeIdInvalidError"
						}
					},
					"422.9": {
						"description": "Invalid payment value",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentValueInvalidError"
						}
					},
					"422.11": {
						"description": "Minimum Break Conflict",
						"schema": { "$ref": "#/definitions/V1_Entities_MinimumBreakConflict" }
					},
					"400": {
						"description": "evaluation_break, untimed_breaks are mutually exclusive",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "postApiV1EvaluationsStaffShiftId"
			},
			"get": {
				"description": "Returns evaluations for a StaffShift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "Filter for single Staff Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Returns evaluations for a StaffShift",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationIndexResponse"
						}
					},
					"404": {
						"description": ["Company not found", "StaffShift not found"],
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "getApiV1EvaluationsStaffShiftId"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}/payments_calculation": {
			"get": {
				"description": "Evaluation payment data calculator",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "evaluation_breaks[][starts_at]",
						"description": "Evaluation break starts from",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "query",
						"name": "evaluation_breaks[][ends_at]",
						"description": "Evaluation break ends at",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "query",
						"name": "payments[][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "query",
						"name": "payments[][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{
						"in": "query",
						"name": "payments[][child_payments[]][][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "query",
						"name": "payments[][child_payments[]][][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start of the Evaluation",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End of the Evaluation",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "query",
						"name": "breaks",
						"description": "Unpaid break minutes",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Evaluation payment data calculator",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationPaymentCalculationResponse"
						}
					},
					"404": {
						"description": "Company not found\\nStaffShift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "getApiV1EvaluationsStaffShiftIdPaymentsCalculation"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}/did_show": {
			"post": {
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "created DidShow" } },
				"tags": ["evaluations"],
				"operationId": "postApiV1EvaluationsStaffShiftIdDidShow"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}/did_not_show": {
			"post": {
				"description": "Returns evaluations for a StaffShift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Returns evaluations for a StaffShift" } },
				"tags": ["evaluations"],
				"operationId": "postApiV1EvaluationsStaffShiftIdDidNotShow"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}/payments": {
			"post": {
				"description": "Creates Payments for Evaluation",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Payment value",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "parent_payment_id",
						"description": "Parent Payment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "paygrade_type_id",
						"description": "PaygradeType ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentsResponse" }
					},
					"400.1": {
						"description": "PaygradeType is not bonus",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_PaygradeTypeNotBonusError"
						}
					},
					"400.2": {
						"description": "Parent Payment is not regular",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_ParentPaymentNotRegularError"
						}
					},
					"404.1": {
						"description": "Payment is not found",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentNotFoundError" }
					},
					"404.2": {
						"description": "ChildPayment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_ChildPaymentNotFoundError"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"422": {
						"description": "Payment is not valid or PaygradeType has already been used",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "postApiV1EvaluationsStaffShiftIdPayments"
			},
			"get": {
				"description": "Gets Payments for Evaluation",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentsIndexResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "getApiV1EvaluationsStaffShiftIdPayments"
			}
		},
		"/api/v1/evaluations/{staff_shift_id}/payments/{payment_id}": {
			"delete": {
				"description": "Delete Payment",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "parent_payment_id",
						"description": "Parent Payment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "payment_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_SuccessfullyDeletedResponse"
						}
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Payment is not found",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentNotFoundError" }
					},
					"404.2": {
						"description": "ChildPayment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_ChildPaymentNotFoundError"
						}
					},
					"422": {
						"description": "Cannot update payment",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "deleteApiV1EvaluationsStaffShiftIdPaymentsPaymentId"
			},
			"put": {
				"description": "Updates Payment for Evaluation",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Payment value",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "parent_payment_id",
						"description": "Parent Payment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "payment_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentsResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Payment is not found",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentNotFoundError" }
					},
					"404.2": {
						"description": "ChildPayment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_ChildPaymentNotFoundError"
						}
					},
					"422": {
						"description": "Cannot update payment",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["evaluations"],
				"operationId": "putApiV1EvaluationsStaffShiftIdPaymentsPaymentId"
			},
			"get": {
				"description": "Gets Payment for Evaluation by id",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "parent_payment_id",
						"description": "Parent Payment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "payment_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentsResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Payment is not found",
						"schema": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentNotFoundError" }
					},
					"404.2": {
						"description": "ChildPayment is not found",
						"schema": {
							"$ref": "#/definitions/V1_EvaluationResponseEntity_ChildPaymentNotFoundError"
						}
					}
				},
				"tags": ["evaluations"],
				"operationId": "getApiV1EvaluationsStaffShiftIdPaymentsPaymentId"
			}
		},
		"/api/v1/individual_rotations": {
			"post": {
				"description": "Create individual rotation",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "anchor_date",
						"description": "Individual rotation anchor date",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "rotation_interval",
						"description": "Number of days in the rotation",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_preset_ids[]",
						"description": "Shift preset ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Rotation starts at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Rotation ends at",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_IndividualRotations_Entities_IndividualRotationResponse"
						}
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["individual_rotations"],
				"operationId": "postApiV1IndividualRotations"
			},
			"get": {
				"description": "Get collection of individual rotations",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for individual rotation IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter for several employment IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "List of individual rotations",
						"schema": {
							"$ref": "#/definitions/V1_IndividualRotations_Entities_IndividualRotationIndexResponse"
						}
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["individual_rotations"],
				"operationId": "getApiV1IndividualRotations"
			}
		},
		"/api/v1/individual_rotations/{id}": {
			"delete": {
				"description": "Delete individual rotation",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": {
							"$ref": "#/definitions/V1_IndividualRotations_Entities_IndividualRotationResponse"
						}
					},
					"404": {
						"description": "Individual rotation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["individual_rotations"],
				"operationId": "deleteApiV1IndividualRotationsId"
			},
			"put": {
				"description": "Update an individual roration rotation.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_preset_ids[]",
						"description": "Shift preset ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "anchor_date",
						"description": "Individual rotation anchor date",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "rotation_interval",
						"description": "Number of days in the rotation",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Rotation starts at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Rotation ends at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": {
							"$ref": "#/definitions/V1_IndividualRotations_Entities_IndividualRotationResponse"
						}
					},
					"404": {
						"description": "Individual rotation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["individual_rotations"],
				"operationId": "putApiV1IndividualRotationsId"
			},
			"get": {
				"description": "Shows an Individual rotation.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/V1_IndividualRotations_Entities_IndividualRotationResponse"
						}
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["individual_rotations"],
				"operationId": "getApiV1IndividualRotationsId"
			}
		},
		"/api/v1/languages": {
			"get": {
				"description": "List all languages.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "List all languages." } },
				"tags": ["languages"],
				"operationId": "getApiV1Languages"
			}
		},
		"/api/v1/live_staff_shifts": {
			"get": {
				"description": "List all LiveStaffShifts.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "query", "name": "company_id", "type": "string", "required": false },
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all LiveStaffShifts." } },
				"tags": ["live_staff_shifts"],
				"operationId": "getApiV1LiveStaffShifts"
			}
		},
		"/api/v1/locations/{id}/shiftplan_publish_settings": {
			"put": {
				"description": "Update publish settings from Location",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of the Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "ID of the Location.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "send_assigned_shifts",
						"description": "Send information about shifts assigned to the employee in email notification.",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "send_open_shifts",
						"description": "Send information about open shifts in email notification.",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "send_message",
						"description": "Send additional text message to employees. Provided in message field.",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "message",
						"description": "Additional text message included in email notification to employees. Requires sendMessage to be true for message to be included",
						"type": "string",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanDefaultPublishOptionsResponseEntity"
						}
					},
					"404": {
						"description": "Couldn't find Location\\n Couldn't find Company",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["locations"],
				"operationId": "putApiV1LocationsIdShiftplanPublishSettings"
			},
			"get": {
				"description": "Get publish settings from Location",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "ID of the Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "ID of the Location.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully requested",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanDefaultPublishOptionsResponseEntity"
						}
					},
					"404": {
						"description": "Couldn't find Location\\n Couldn't find Company",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["locations"],
				"operationId": "getApiV1LocationsIdShiftplanPublishSettings"
			}
		},
		"/api/v1/locations/{id}/destroy_location": {
			"post": {
				"description": "Permanently destroy a location",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Location id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Permanently destroy a location" } },
				"tags": ["locations"],
				"operationId": "postApiV1LocationsIdDestroyLocation"
			}
		},
		"/api/v1/locations/{id}": {
			"delete": {
				"description": "Soft delete a location (keep billing data)",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Location id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Soft delete a location (keep billing data)" } },
				"tags": ["locations"],
				"operationId": "deleteApiV1LocationsId"
			},
			"put": {
				"description": "Update a Location",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Location ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "sort",
						"description": "Used to order Locations in the UI",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Location metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": { "200": { "description": "Update a Location" } },
				"tags": ["locations"],
				"operationId": "putApiV1LocationsId"
			},
			"get": {
				"description": "Return a Location.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Location id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Location." } },
				"tags": ["locations"],
				"operationId": "getApiV1LocationsId"
			}
		},
		"/api/v1/locations": {
			"get": {
				"description": "List all Locations.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_LocationResponseEntity" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["locations"],
				"operationId": "getApiV1Locations"
			},
			"post": {
				"description": "Create a new Location",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "sort",
						"description": "Used to order Locations in the UI",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Location metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": { "201": { "description": "Create a new Location" } },
				"tags": ["locations"],
				"operationId": "postApiV1Locations"
			}
		},
		"/api/v1/locations_positions/{id}": {
			"delete": {
				"description": "Delete a LocationsPosition",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "LocationsPosition id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Delete a LocationsPosition" } },
				"tags": ["locations_positions"],
				"operationId": "deleteApiV1LocationsPositionsId"
			},
			"get": {
				"description": "Return a LocationsPosition.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "LocationsPosition id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a LocationsPosition." } },
				"tags": ["locations_positions"],
				"operationId": "getApiV1LocationsPositionsId"
			}
		},
		"/api/v1/locations_positions": {
			"get": {
				"description": "List all LocationsPositions.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter for an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of LocationsPosition ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Filter for single Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Filter an array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "position_id",
						"description": "Filter for single Position ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "position_ids[]",
						"description": "Filter an array of Position ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_LocationsPositionResponseEntity" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["locations_positions"],
				"operationId": "getApiV1LocationsPositions"
			},
			"post": {
				"description": "Create a new LocationsPosition",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "position_id",
						"description": "Position ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "LocationsPosition metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": { "201": { "description": "Create a new LocationsPosition" } },
				"tags": ["locations_positions"],
				"operationId": "postApiV1LocationsPositions"
			}
		},
		"/api/v1/newsfeeds": {
			"post": {
				"description": "Create a Newsfeed.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "newsfeed[message]",
						"description": "Newsfeed message.",
						"type": "string",
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a Newsfeed." } },
				"tags": ["newsfeeds"],
				"operationId": "postApiV1Newsfeeds"
			},
			"get": {
				"description": "List all Newsfeeds",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter by Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Absence ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for an array of Absence ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Newsfeeds" } },
				"tags": ["newsfeeds"],
				"operationId": "getApiV1Newsfeeds"
			}
		},
		"/api/v1/notification_configurations/notification_filter": {
			"put": {
				"description": "Update a notification filter",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "enabled_shift_rotation_group_ids[]",
						"description": "List of shift rotation group ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": {
							"$ref": "#/definitions/V1_NotificationConfigurations_Entities_NotificationFilterResponse"
						}
					},
					"404": {
						"description": "Company not found\\nNotification filter not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["notification_configurations"],
				"operationId": "putApiV1NotificationConfigurationsNotificationFilter"
			},
			"get": {
				"description": "Return a notification filter",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/V1_NotificationConfigurations_Entities_NotificationFilterResponse"
						}
					},
					"404": {
						"description": "Company not found\\nNotification filter not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["notification_configurations"],
				"operationId": "getApiV1NotificationConfigurationsNotificationFilter"
			}
		},
		"/api/v1/notification_configurations": {
			"get": {
				"description": "List all NotificationConfiguration",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "tdb",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "tdb",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": {
							"$ref": "#/definitions/V1_NotificationConfigurations_Entities_NotificationConfigurationIndexResponse"
						}
					}
				},
				"tags": ["notification_configurations"],
				"operationId": "getApiV1NotificationConfigurations"
			}
		},
		"/api/v1/notification_configurations/{id}": {
			"put": {
				"description": "Update NotificationConfiguration",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Employment id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "notification_configuration",
						"description": "NotificationConfiguration",
						"type": "json",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": {
							"$ref": "#/definitions/V1_NotificationConfigurations_Entities_NotificationConfigurationResponse"
						}
					}
				},
				"tags": ["notification_configurations"],
				"operationId": "putApiV1NotificationConfigurationsId"
			},
			"get": {
				"description": "Return a NotificationConfiguration",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "NotificationConfiguration id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": {
							"$ref": "#/definitions/V1_NotificationConfigurations_Entities_NotificationConfigurationResponse"
						}
					}
				},
				"tags": ["notification_configurations"],
				"operationId": "getApiV1NotificationConfigurationsId"
			}
		},
		"/api/v1/paygrade_types": {
			"get": {
				"description": "List all PaygradeTypes.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all PaygradeTypes." } },
				"tags": ["paygrade_types"],
				"operationId": "getApiV1PaygradeTypes"
			}
		},
		"/api/v1/paygrade_types/{id}": {
			"get": {
				"description": "Return a PaygradeType.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "PaygradeType id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a PaygradeType." } },
				"tags": ["paygrade_types"],
				"operationId": "getApiV1PaygradeTypesId"
			}
		},
		"/api/v1/shifts/{shift_id}/paygrades": {
			"post": {
				"description": "Create shift paygrade",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "paygrade_type_id",
						"description": "Paygrade type id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Value of paygrade",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "parent_paygrade_id",
						"description": "Parent paygrade id.",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_Paygrades_Entities_ShiftPaygradeApiV1Response" }
					},
					"404": {
						"description": "Company not found; Shift not found; Paygrade type not founnd; Parent paygrade not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"422": { "description": "", "schema": { "$ref": "#/definitions/V1_Entities_Invalid" } }
				},
				"tags": ["shifts"],
				"operationId": "postApiV1ShiftsShiftIdPaygrades"
			},
			"get": {
				"description": "Get paygrades for a shift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "path",
						"name": "shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_Paygrades_Entities_ShiftPaygradeApiV1Response" }
					},
					"404": {
						"description": "Company not found; Shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shifts"],
				"operationId": "getApiV1ShiftsShiftIdPaygrades"
			}
		},
		"/api/v1/shifts/{shift_id}/paygrades/{id}": {
			"delete": {
				"description": "Delete a paygrade.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"204": { "description": "Delete a paygrade." },
					"404": {
						"description": "Company not found; Paygrade not found; Shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shifts"],
				"operationId": "deleteApiV1ShiftsShiftIdPaygradesId"
			},
			"put": {
				"description": "Updates a shift paygrade",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "paygrade_type_id",
						"description": "Paygrade type id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "value",
						"description": "Value of paygrade",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "parent_paygrade_id",
						"description": "Parent paygrade id.",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_Paygrades_Entities_ShiftPaygradeApiV1Response" }
					},
					"404": {
						"description": "Company not found; Shift not found; Paygrade type not found; Paygrade not found; Parent paygrade not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"422": { "description": "", "schema": { "$ref": "#/definitions/V1_Entities_Invalid" } }
				},
				"tags": ["shifts"],
				"operationId": "putApiV1ShiftsShiftIdPaygradesId",
				"deprecated": true
			}
		},
		"/api/v1/shifts/{id}": {
			"patch": {
				"description": "Updates existing shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "ID of the Shift",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of the Company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "workers",
						"description": "Number of workers",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "untimed",
						"description": "Standby shift",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "auto_accept",
						"description": "Auto accept shift requests as long as there are open slots on the shift",
						"type": "string",
						"enum": ["disabled", "warning", "enforced"],
						"required": false
					},
					{
						"in": "formData",
						"name": "can_evaluate",
						"description": "Employees can create evaluations",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "note",
						"description": "Note for the shift",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "manager_note",
						"description": "Manager note for the Shift",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "tag_ids[]",
						"description": "Array of Shift Tag IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "evaluation_tag_ids[]",
						"description": "Array of EvaluationTag IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftResponse" }
					},
					"404": {
						"description": ["Couldn't find Shift", " Couldn't find Company"],
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.1": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "patchApiV1ShiftsId"
			},
			"put": {
				"description": "Updates existing shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the shift",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the shift",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "workers",
						"description": "Number of workers",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "note",
						"description": "Note for the shift",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "can_evaluate",
						"description": "Employees can create evaluations",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "untimed",
						"description": "Standby shift",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "auto_accept",
						"description": "Auto accept shift requests as long as there are open slots on the shift",
						"type": "string",
						"enum": ["disabled", "warning", "enforced"],
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_preset_id",
						"description": "ID of an exisiting shift preset",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Shift metadata as json",
						"type": "json",
						"required": false
					},
					{
						"in": "formData",
						"name": "break_time",
						"description": "Break duration in minutes (Required unless untimed_break_time is present)",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "untimed_break_time",
						"description": "Untimed breaks in minutes (Required unless break_time is present)",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "tag_ids[]",
						"description": "Array of Shift Tag IDs (including from shift presets)",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "evaluation_tag_ids[]",
						"description": "Array of EvaluationTag IDs (including from shift presets)",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_breaks[][starts_at]",
						"description": "Start time of the breaks",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "formData",
						"name": "shift_breaks[][ends_at]",
						"description": "End time of the breaks",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "query",
						"name": "assignment_group_ids[]",
						"description": "Array of AssignmentGroup ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_rotation_group_ids[]",
						"description": "Array of ShiftRotationGroup ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "formData",
						"name": "manager_note",
						"description": "Manager note for the Shift",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eshifts_collision\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003elocations_position_changed\u003c/li\u003e\u003cli\u003eminimum_break\u003c/li\u003e\u003cli\u003emaximum_working_hours\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003emaximum_earning\u003c/li\u003e\u003cli\u003eoutside_employment_period\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eunavailable\u003c/li\u003e\u003cli\u003enot_available\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "update_connected",
						"description": "Update connected shifts if value is true",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "Updating locations_position_id of a shift will unassign all employees from the shift and their evaluations will be deleted",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "qualifications[][id]",
						"description": "Qualification ID",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "qualifications[][count]",
						"description": "Required workers per qualification",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftResponse" }
					},
					"404.1": {
						"description": "Couldn't find Shift\\n Couldn't find Company\\n Couldn't find LocationsPosition\\n Shift Presets not found\\n Shift Rotations not found\\n Qualifications not found\\n Couldn't find ShiftPreset",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.2": {
						"description": "Evaluation Tag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_EvaluationTagNotFoundError" }
					},
					"400": {
						"description": "evaluation_break, untimed_breaks are mutually exclusive",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.1": {
						"description": "Shift conflicts",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetNotSameTimesInvalidError"
						}
					},
					"422.2": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.3": {
						"description": "Shift Rotation groups not available for shift preset",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetNotAvailableForShiftRotationGroupsInvalidError"
						}
					},
					"422.4": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"422.5": {
						"description": "Sum of duration of all shift_breaks cannot be bigger than break_time",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreakDurationInvalidError"
						}
					},
					"422.6": {
						"description": "There must be no overlapping breaks in Shift",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreaksOverlapInvalidError"
						}
					},
					"422.7": {
						"description": "Either of evaluation breaks is invalid",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreakInvalidError" }
					},
					"422.8": {
						"description": "Incorrect evaluation tag context",
						"schema": { "$ref": "#/definitions/V1_Entities_EvaluationTagInvalidContextError" }
					},
					"422.9": {
						"description": "New position must be in the same location as the previous position",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftLocationsPositionChangedInvalidError"
						}
					},
					"422.11": {
						"description": "Shift with shift preset cannot exceed more than 24 hours",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetExceedTimeLimitError"
						}
					},
					"422.12": {
						"description": "Unable to add Employment",
						"schema": { "$ref": "#/definitions/V1_Entities_UnableToAddEmploymentError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "putApiV1ShiftsId"
			},
			"get": {
				"description": "Return a Shift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftResponse" }
					}
				},
				"tags": ["shifts"],
				"operationId": "getApiV1ShiftsId"
			},
			"delete": {
				"description": "Deletes existing shift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "delete_connected",
						"description": "Delete connected shifts if value is true",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftResponse" }
					},
					"404": {
						"description": "Couldn't find  Company\\nCouldn't find  Shift",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					},
					"422": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "deleteApiV1ShiftsId"
			}
		},
		"/api/v1/shifts/{id}/clone": {
			"post": {
				"description": "Clone a shift with associations: employee assignments, timed breaks, qualifications, tags, evaluation tags, settings",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "date",
						"description": "Date to which shift is cloned to, in ISO 8601 format with time and UTC offset (time is nullified)",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "connect",
						"description": "Connect new shift with original shift?",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eshifts_collision\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003elocations_position_changed\u003c/li\u003e\u003cli\u003eminimum_break\u003c/li\u003e\u003cli\u003emaximum_working_hours\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003emaximum_earning\u003c/li\u003e\u003cli\u003eoutside_employment_period\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eunavailable\u003c/li\u003e\u003cli\u003enot_available\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"201": {
						"description": "Successfully cloned",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftResponse" }
					},
					"400": {
						"description": "The date is outside of shiftplan time frame\\nThe date is on the same day as the original shift",
						"schema": {
							"$ref": "#/definitions/V1_Shifts_Clone_Entities_DateOutsideShiftplanTimeFrame"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Couldn't find  Company\\nCouldn't find  Shift\\nShift Rotation Group Not Found\\nAssignment Group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422.1": {
						"description": "Employee assignment has conflicts",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					},
					"422.2": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"422.3": {
						"description": "Shift Rotation Group for given date does not include shift preset",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.4": {
						"description": "Shift Rotation groups not available for shift preset",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shifts"],
				"operationId": "postApiV1ShiftsIdClone"
			}
		},
		"/api/v1/shifts/{id}/available_employments": {
			"get": {
				"description": "List available employments",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Page (Page size is always 10)",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Amount of data to return on each request",
						"type": "integer",
						"format": "int32",
						"default": 10,
						"required": false
					},
					{
						"in": "query",
						"name": "search_string",
						"description": "Search employees by name",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[without_shift_conflicts]",
						"description": "Show only employees without other shifts at this time",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[without_absence_conflicts]",
						"description": "Show only employees without absences at this time",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[with_join_requests]",
						"description": "Show only employees with join requests for this shift",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[with_master_position]",
						"description": "Show only employees with master position same as shift position",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[with_these_qualification_ids][]",
						"description": "Show only employees with passed qualification ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[availability_filters][available]",
						"description": "Show only employees who is fully available",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[availability_filters][partial_available]",
						"description": "Show only employees who is partially available",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[availability_filters][partial_both]",
						"description": "Show only employees who is partially available and partially unavailable",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[availability_filters][partial_unavailable]",
						"description": "Show only employees who is partially unavailable",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[availability_filters][unavailable]",
						"description": "Show only employees who is fully unavailable",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[availability_filters][neutral]",
						"description": "Show only employees who has no information about availabilities",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "filters[tag_ids][]",
						"description": "Filter by an array of Employee Attribute IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "sort_name",
						"description": "Sorting param",
						"type": "string",
						"default": "name",
						"enum": [
							"name",
							"worked-minutes",
							"remaining-minutes",
							"hour-account-hours",
							"bring-shifts",
							"earned-amount",
							"maximum-money",
							"remaining-money"
						],
						"required": false
					},
					{
						"in": "query",
						"name": "sort_direction",
						"description": "Sorting direction",
						"type": "string",
						"default": "ASC",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfull response",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftAvailableEmploymentsResponse"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found\\nShift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "getApiV1ShiftsIdAvailableEmployments"
			}
		},
		"/api/v1/shifts/{id}/disconnect": {
			"post": {
				"description": "Disconnect shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully disconnected",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftDisconnectResponse" }
					},
					"404": {
						"description": "Company not found\\nShift not found\\nShift is not connected",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shifts"],
				"operationId": "postApiV1ShiftsIdDisconnect"
			}
		},
		"/api/v1/shifts/{id}/evaluations": {
			"get": {
				"description": "Return evaluation for shift.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return evaluation for shift." } },
				"tags": ["shifts"],
				"operationId": "getApiV1ShiftsIdEvaluations"
			}
		},
		"/api/v1/shifts": {
			"get": {
				"description": "List all Shifts",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter by Shift ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter by an array of Shift IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_id",
						"description": "Filter by Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_ids[]",
						"description": "Filter by an array of Shiftplan IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "tag_ids[]",
						"description": "Filter by an array of Shift Tag IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "without_tags",
						"description": "Filter shifts without Shift Tags",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "assignment_group_ids[]",
						"description": "Filter by an array of Assignment Groups IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "Filter by LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "locations_position_ids[]",
						"description": "Filter by an array of LocationsPosition IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter by Employment ID. Cannot be used with employment_ids",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter by an array of Employment IDs. Cannot be used with employment_iPd",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "only_open",
						"description": "Include only open shifts",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "query",
						"name": "without_conflicts",
						"description": "Include only shifts without conflicts, only_open must be true and current user must be an employee only",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "query",
						"name": "extended_info",
						"description": "Include fields \"can_manage\", \"staff_shifts_count\", \"staff_shifts_needs_evaluation_count\" in the response",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "query",
						"name": "order_key",
						"description": "Sort by key",
						"type": "string",
						"default": "id",
						"enum": ["id", "starts_at"],
						"required": false
					},
					{
						"in": "query",
						"name": "order_dir",
						"description": "Sort direction",
						"type": "string",
						"default": "asc",
						"enum": ["asc", "desc"],
						"required": false
					},
					{
						"in": "query",
						"name": "shift_preset_ids[]",
						"description": "Filter by an array of shift presets. Use 0 or -1 for shifts with custom presets",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "without_shift_presets",
						"description": "Include shifts with custom presets, can be used with shift_preset_ids",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_rotation_group_ids[]",
						"description": "Filter by shift rotation group IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "not_in_shift_rotation_group_ids[]",
						"description": "Filter shifts that do not belong to shift rotation groups",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "connected_group_id",
						"description": "Filter by connected group ID",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftIndexResponse" }
					},
					"400": {
						"description": "employment must be an employee if without_conflicts is true\\n company_id is missing\\n only_open must be true if without_conflicts is true",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftsInvalidGetRequest" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shifts"],
				"operationId": "getApiV1Shifts"
			},
			"post": {
				"description": "Create a new shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the shift",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the shift",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "workers",
						"description": "Number of workers",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "note",
						"description": "Note for the shift",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "can_evaluate",
						"description": "Employees can create evaluations",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "untimed",
						"description": "Standby shift",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "auto_accept",
						"description": "Auto accept shift requests as long as there are open slots on the shift",
						"type": "string",
						"enum": ["disabled", "warning", "enforced"],
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_preset_id",
						"description": "ID of an exisiting shift preset",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Shift metadata as json",
						"type": "json",
						"required": false
					},
					{
						"in": "formData",
						"name": "break_time",
						"description": "Break duration in minutes (Required unless untimed_break_time is present)",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "untimed_break_time",
						"description": "Untimed breaks in minutes (Required unless break_time is present)",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "tag_ids[]",
						"description": "Array of Shift Tag IDs (including from shift presets)",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "evaluation_tag_ids[]",
						"description": "Array of EvaluationTag IDs (including from shift presets)",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_breaks[][starts_at]",
						"description": "Start time of the breaks",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "formData",
						"name": "shift_breaks[][ends_at]",
						"description": "End time of the breaks",
						"type": "array",
						"required": false,
						"items": { "type": "string", "format": "date-time" }
					},
					{
						"in": "formData",
						"name": "assignment_group_ids[]",
						"description": "Array of assignment group IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_rotation_group_ids[]",
						"description": "Array of shift_rotation_group group IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "manager_note",
						"description": "Manager note for the Shift",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eshifts_collision\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003elocations_position_changed\u003c/li\u003e\u003cli\u003eminimum_break\u003c/li\u003e\u003cli\u003emaximum_working_hours\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003emaximum_earning\u003c/li\u003e\u003cli\u003eoutside_employment_period\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eunavailable\u003c/li\u003e\u003cli\u003enot_available\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "shiftplan_id",
						"description": "ID of an Shiftplan",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "ID of LocationsPosition - Location needs to match the location of the shiftplan",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "qualifications[][id]",
						"description": "Qualification ID",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "qualifications[][count]",
						"description": "Required workers per qualification",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					}
				],
				"responses": {
					"201": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftResponse" }
					},
					"400": {
						"description": "Company not found\\n Shiftplan not found\\n LocationsPosition not found\\n Shift Tag not found\\n Evaluation Tag not found\\n Qualifications feature is not enabled\\n Qualifications not found\\n Shift Rotation Group Not Found\\n Assignment Group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422.1": {
						"description": "Shift conflicts",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					},
					"422.2": {
						"description": "The request is invalid\\nIncorrect Shift Tag context\\nIncorrect evaluation tag context\\nInvalid shift break\\nbreak_time, untimed_break_time are mutually exclusive\\nSum of duration of all shift_breaks cannot be bigger than break_time",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.3": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"422.4": {
						"description": "Shift Rotation Group for given date does not include shift preset",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.5": {
						"description": "Shift must match ShiftPresets start_at, ends_at and unpaid break",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetNotSameTimesInvalidError"
						}
					},
					"422.6": {
						"description": "Shift with shift preset cannot exceed more than 24 hours",
						"schema": {
							"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetExceedTimeLimitError"
						}
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shifts"],
				"operationId": "postApiV1Shifts"
			}
		},
		"/api/v1/shifts/connect": {
			"post": {
				"description": "Connect shifts",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Array of Shift IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftIndexResponse" }
					},
					"404": {
						"description": "Company not found\\nShiftplan not found\\nShift(s) not found\\nAll shifts do not belong to same shiftplan\\nShift do not belong to provided Shiftplan",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid\\nAt least two shifts are required to make a connection",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"409": {
						"description": "Some shifts are already connected to other connecting group",
						"schema": { "$ref": "#/definitions/V1_Entities_Conflict" }
					}
				},
				"tags": ["shifts"],
				"operationId": "postApiV1ShiftsConnect"
			}
		},
		"/api/v1/shifts/{shift_id}/shift_breaks": {
			"post": {
				"description": "Creates shifts break related to this shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shift_id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Shift break start time",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Shift break start time",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Created shift_break",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreak" }
					},
					"400": {
						"description": "Invalid data",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"404": {
						"description": "Shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "postApiV1ShiftsShiftIdShiftBreaks"
			}
		},
		"/api/v1/shifts/{shift_id}/shift_breaks/{id}": {
			"delete": {
				"description": "Deletes the given shifts break",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company Id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shift_id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift break ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Deleted shift_break",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreak" }
					},
					"404": {
						"description": "Shift break not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "deleteApiV1ShiftsShiftIdShiftBreaksId"
			},
			"patch": {
				"description": "Updates shifts break as per given params",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company Id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shift_id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift break ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Shift break start time",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Shift break start time",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Updated shift_break",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreak" }
					},
					"400": {
						"description": "Invalid data",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"404": {
						"description": "Shift break not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "patchApiV1ShiftsShiftIdShiftBreaksId"
			}
		},
		"/api/v1/shifts/{shift_id}/evaluation_tags": {
			"delete": {
				"description": "Remove an evaluation tag from the shift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shift_id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "tag_id",
						"description": "Evaluation Tag ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftEvaluationTag" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403.1": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"403.2": {
						"description": "Feature unavailable",
						"schema": { "$ref": "#/definitions/V1_Entities_FeatureUnavailable" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftNotFoundError" }
					},
					"404.3": {
						"description": "Shift Tag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_TagNotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shifts"],
				"operationId": "deleteApiV1ShiftsShiftIdEvaluationTags"
			},
			"post": {
				"description": "Add an evaluation tag to the shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shift_id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "tag_id",
						"description": "Evaluation Tag ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftEvaluationTag" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403.1": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"403.2": {
						"description": "Feature unavailable",
						"schema": { "$ref": "#/definitions/V1_Entities_FeatureUnavailable" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftNotFoundError" }
					},
					"404.3": {
						"description": "Shift Tag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_TagNotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shifts"],
				"operationId": "postApiV1ShiftsShiftIdEvaluationTags"
			},
			"get": {
				"description": "List all evaluation tags for the shift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shift_id",
						"description": "Shift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftEvaluationTagList" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403.1": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"403.2": {
						"description": "Feature unavailable",
						"schema": { "$ref": "#/definitions/V1_Entities_FeatureUnavailable" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftNotFoundError" }
					}
				},
				"tags": ["shifts"],
				"operationId": "getApiV1ShiftsShiftIdEvaluationTags"
			}
		},
		"/api/v2/shifts/{id}/paygrades": {
			"put": {
				"description": "Updates a shift paygrade",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "update_connected",
						"description": "Update connected shifts if value is true",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "paygrades[][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "paygrades[][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{
						"in": "formData",
						"name": "paygrades[][child_paygrades[]][][paygrade_type_id]",
						"type": "array",
						"required": false,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "paygrades[][child_paygrades[]][][value]",
						"type": "array",
						"required": false,
						"items": { "type": "number", "format": "float" }
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "",
						"schema": {
							"$ref": "#/definitions/V2_PaygradeResponseEntity_ShiftPaygradeApiV2Response"
						}
					},
					"404": {
						"description": "Company not found; Shift not found; Paygrade type not found;",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"422": {
						"description": "Invalid Paygrades",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shifts"],
				"operationId": "putApiV2ShiftsIdPaygrades"
			}
		},
		"/api/v1/payments/{staff_shift_id}": {
			"get": {
				"description": "Return Payments for a staff_shift id",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "staff_shift_id",
						"description": "Staff_Shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return Payments for a staff_shift id" } },
				"tags": ["payments"],
				"operationId": "getApiV1PaymentsStaffShiftId"
			}
		},
		"/api/v1/payslips": {
			"post": {
				"description": "Create a payslip",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "date",
						"description": "Date of Payslip.",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "name of Payslip",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "file",
						"description": "Attachment file (\u003c= 5MB)",
						"type": "file",
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a payslip" } },
				"tags": ["payslips"],
				"operationId": "postApiV1Payslips"
			},
			"get": {
				"description": "List all Payslips.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Payslips of company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Payslip ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for an array of Payslip ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter for single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter for an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "date",
						"description": "Filter payslips by a single date",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Payslips." } },
				"tags": ["payslips"],
				"operationId": "getApiV1Payslips"
			}
		},
		"/api/v1/positions": {
			"post": {
				"description": "Create a new Position",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "description",
						"description": "Description",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "color",
						"description": "Color (HEX format, e.g. #FF00FF)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "note",
						"description": "Position Comment (Shown on Shift)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "sort",
						"description": "Used to order Positions in the UI",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Position metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": { "201": { "description": "Create a new Position" } },
				"tags": ["positions"],
				"operationId": "postApiV1Positions"
			},
			"get": {
				"description": "List all Positions.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Position ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Position ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Positions." } },
				"tags": ["positions"],
				"operationId": "getApiV1Positions"
			}
		},
		"/api/v1/positions/{id}/destroy_position": {
			"post": {
				"description": "Permanently destroy a position",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Position id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Permanently destroy a position" } },
				"tags": ["positions"],
				"operationId": "postApiV1PositionsIdDestroyPosition"
			}
		},
		"/api/v1/positions/{id}": {
			"delete": {
				"description": "Soft delete a position (keep billing data)",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Position id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Soft delete a position (keep billing data)" } },
				"tags": ["positions"],
				"operationId": "deleteApiV1PositionsId"
			},
			"put": {
				"description": "Update a Position",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Position ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "description",
						"description": "Description",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "color",
						"description": "Color (HEX format, e.g. #FF00FF)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "note",
						"description": "Position Comment (Shown on Shift)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "sort",
						"description": "Used to order Positions in the UI",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Position metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": { "200": { "description": "Update a Position" } },
				"tags": ["positions"],
				"operationId": "putApiV1PositionsId"
			},
			"get": {
				"description": "Return a Position.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Position id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Position." } },
				"tags": ["positions"],
				"operationId": "getApiV1PositionsId"
			}
		},
		"/api/v1/positions/{id}/remove_employment": {
			"put": {
				"description": "Remove a employment from a position",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Position ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "keep_future_staff_shifts",
						"description": "Keep future staff shifts",
						"type": "boolean",
						"default": true,
						"required": false
					}
				],
				"responses": { "200": { "description": "Remove a employment from a position" } },
				"tags": ["positions"],
				"operationId": "putApiV1PositionsIdRemoveEmployment"
			}
		},
		"/api/v1/positions/{id}/add_employment": {
			"put": {
				"description": "Add a employment to a position",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Position ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Add a employment to a position" } },
				"tags": ["positions"],
				"operationId": "putApiV1PositionsIdAddEmployment"
			}
		},
		"/api/v1/punch_timings/{punch_timing_id}/punch_breaks": {
			"post": {
				"description": "Create a punch break",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "punch_break[start_time]",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "punch_timing_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a punch break" } },
				"tags": ["punch_timings"],
				"operationId": "postApiV1PunchTimingsPunchTimingIdPunchBreaks"
			}
		},
		"/api/v1/punch_timings/{punch_timing_id}/punch_breaks/{id}": {
			"put": {
				"description": "Update a punch break",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true },
					{
						"in": "formData",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "punch_break[end_time]",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "path",
						"name": "punch_timing_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Update a punch break" } },
				"tags": ["punch_timings"],
				"operationId": "putApiV1PunchTimingsPunchTimingIdPunchBreaksId"
			}
		},
		"/api/v1/punch_timings/shift_create": {
			"post": {
				"description": "Create a shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift[shiftplan_id]",
						"description": "ID of a shiftplan",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift[locations_position_id]",
						"description": "ID of location positions",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift[break_time]",
						"description": "Break time in minutes",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift[starts_at]",
						"description": "Date and time of start",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift[ends_at_time]",
						"description": "Time of end",
						"type": "string",
						"required": false
					}
				],
				"responses": { "201": { "description": "Create a shift" } },
				"tags": ["punch_timings"],
				"operationId": "postApiV1PunchTimingsShiftCreate"
			}
		},
		"/api/v1/punch_timings/start": {
			"post": {
				"description": "Start punchtime session",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": { "201": { "description": "Start punchtime session" } },
				"tags": ["punch_timings"],
				"operationId": "postApiV1PunchTimingsStart"
			}
		},
		"/api/v1/punch_timings/fetch_locations_positions": {
			"get": {
				"description": "Fetch location positions",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "user_token",
						"description": "4 Digit number of the user. It can be found in the profile of each user",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_id",
						"description": "ID of the shiftplan",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": { "200": { "description": "Fetch location positions" } },
				"tags": ["punch_timings"],
				"operationId": "getApiV1PunchTimingsFetchLocationsPositions"
			}
		},
		"/api/v1/punch_timings/punch_time": {
			"get": {
				"description": "Punch in",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "user_token",
						"description": "4 Digit number of the user. It can be found in the profile of each user",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "staff_shift_id",
						"description": "ID of staff_shift - fetched by Status request",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "start_time",
						"description": "Start of the newly created punchtime - fetched by Status request",
						"type": "string",
						"required": false
					}
				],
				"responses": { "200": { "description": "Punch in" } },
				"tags": ["punch_timings"],
				"operationId": "getApiV1PunchTimingsPunchTime"
			}
		},
		"/api/v1/punch_timings/record": {
			"get": {
				"description": "Fetch status",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "user_token",
						"description": "4 Digit number of the user. It can be found in the profile of each user",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": false
					}
				],
				"responses": { "200": { "description": "Fetch status" } },
				"tags": ["punch_timings"],
				"operationId": "getApiV1PunchTimingsRecord"
			}
		},
		"/api/v1/punch_timings": {
			"get": {
				"description": "Get current punch time company",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": false
					}
				],
				"responses": { "200": { "description": "Get current punch time company" } },
				"tags": ["punch_timings"],
				"operationId": "getApiV1PunchTimings"
			}
		},
		"/api/v1/punch_timings/{id}": {
			"put": {
				"description": "Updates the punch time",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"description": "PunchTiming id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "encrypted_company_id",
						"description": "You get encrypted company_id when you start a punch time",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "punch_timing[additional_break_time]",
						"description": "Break time in minutes",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "punch_timing[end_time]",
						"description": "End of the updated punchtime",
						"type": "string",
						"required": false
					}
				],
				"responses": { "200": { "description": "Updates the punch time" } },
				"tags": ["punch_timings"],
				"operationId": "putApiV1PunchTimingsId"
			}
		},
		"/api/v1/qualifications": {
			"get": {
				"description": "Return list of qualifications.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Qualification IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_QualificationResponseEntity" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Couldn't find company",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "Qualifications are not enabled",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["qualifications"],
				"operationId": "getApiV1Qualifications"
			}
		},
		"/api/v1/replaced_evaluations": {
			"get": {
				"description": "List Replaced Evaluations.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company to search in",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Employments to search for",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "reason[]",
						"description": "Reasons why evaluation was replaces",
						"type": "array",
						"items": {
							"type": "string",
							"enum": ["absence", "moved_to_another_shift", "replace_request"]
						},
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Timestamp to start searching from",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "Timestamp to end searching",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "List of replaces evalutions",
						"schema": {
							"$ref": "#/definitions/V1_ReplacedEvaluations_Entities_ReplacedEvaluationIndexResponse"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["replaced_evaluations"],
				"operationId": "getApiV1ReplacedEvaluations"
			}
		},
		"/api/v1/replace_requests/{id}": {
			"delete": {
				"description": "Destroys a Replace request.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift Offer(SwapRequest) ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "accepted_by",
						"description": "Employment ID who accepted the offer.If this is empty, current logged in user is assumed to authorize the action",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": { "204": { "description": "Destroys a Replace request." } },
				"tags": ["replace_requests"],
				"operationId": "deleteApiV1ReplaceRequestsId"
			}
		},
		"/api/v1/requests/confirm_swap_shift": {
			"post": {
				"description": "Confirm Shift Swap",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "swap_request_id",
						"description": "SwapRequest ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID that accepted shift offer",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_collisions",
						"description": "Accept swap requests even when shift/absence collisions are present",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Accept swap requests when warnings are present.",
						"type": "boolean",
						"default": false,
						"required": false
					}
				],
				"responses": { "201": { "description": "Confirm Shift Swap" } },
				"tags": ["requests"],
				"operationId": "postApiV1RequestsConfirmSwapShift",
				"deprecated": true
			}
		},
		"/api/v1/requests/accept_swap_shift": {
			"post": {
				"description": "Accept a Shift Swap Request.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "id",
						"description": "Swap Request id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_collisions",
						"description": "Accept swap requests even when shift/absence collisions are present",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Accept swap requests when other types of conflict warnings are present.",
						"type": "boolean",
						"default": false,
						"required": false
					}
				],
				"responses": { "201": { "description": "Accept a Shift Swap Request." } },
				"tags": ["requests"],
				"operationId": "postApiV1RequestsAcceptSwapShift",
				"deprecated": true
			}
		},
		"/api/v1/requests/swap_shift": {
			"post": {
				"description": "Create a Shift Swap Request.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "Shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a Shift Swap Request." } },
				"tags": ["requests"],
				"operationId": "postApiV1RequestsSwapShift",
				"deprecated": true
			}
		},
		"/api/v1/requests/change_shift": {
			"post": {
				"description": "Create a Change Request.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "Shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "201": { "description": "Create a Change Request." } },
				"tags": ["requests"],
				"operationId": "postApiV1RequestsChangeShift"
			}
		},
		"/api/v1/requests/confirm_apply_shift": {
			"post": {
				"description": "Confirm apply to a Shift.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "Shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "override_work",
						"description": "Ignore overworked hours",
						"type": "boolean",
						"default": false,
						"required": false
					}
				],
				"responses": { "201": { "description": "Confirm apply to a Shift." } },
				"tags": ["requests"],
				"operationId": "postApiV1RequestsConfirmApplyShift",
				"deprecated": true
			}
		},
		"/api/v1/requests/apply_shift": {
			"post": {
				"description": "Apply to a Shift.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "Shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "override_work",
						"description": "Ignore overworked hours",
						"type": "boolean",
						"default": false,
						"required": false
					}
				],
				"responses": { "201": { "description": "Apply to a Shift." } },
				"tags": ["requests"],
				"operationId": "postApiV1RequestsApplyShift",
				"deprecated": true
			}
		},
		"/api/v1/requests": {
			"get": {
				"description": "List all Request",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Request ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Request ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_id",
						"description": "Filter for single Shift ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter an array of Shift ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter for single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_id",
						"description": "Filter for single Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_ids[]",
						"description": "Filter an array of Shiftplan ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "type",
						"description": "Filter for single Request type",
						"type": "string",
						"enum": ["StaffRequest", "ChangeRequest", "SwapRequest"],
						"required": false
					},
					{
						"in": "query",
						"name": "types[]",
						"description": "Filter an array of Request type",
						"type": "array",
						"items": { "type": "string", "enum": ["StaffRequest", "ChangeRequest", "SwapRequest"] },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "only_open",
						"description": "Filter for open shifts",
						"type": "boolean",
						"default": "false",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Request" } },
				"tags": ["requests"],
				"operationId": "getApiV1Requests"
			}
		},
		"/api/v1/requests/join": {
			"post": {
				"description": "Create a Join Request",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "Shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Ignore conflicts",
						"type": "boolean",
						"default": "false",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": { "$ref": "#/definitions/V1_Requests_Join_Entities_JoinRequestResponse" }
					},
					"400.1": {
						"description": "There are conflicts preventing the request to be created",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					},
					"400.2": {
						"description": "Shift is in the past",
						"schema": { "$ref": "#/definitions/V1_Requests_Join_Entities_InThePastError" }
					},
					"404": {
						"description": "Shift is not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is not unique",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["requests"],
				"operationId": "postApiV1RequestsJoin"
			}
		},
		"/api/v1/requests/replace/confirm": {
			"post": {
				"description": "Confirm the Replace Request (Stakeholder accepts and one employee replaces another)",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "id",
						"description": "Request Id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID that accepted shift offer",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Confirm when conflicts are present.",
						"type": "boolean",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully confirmed",
						"schema": { "$ref": "#/definitions/V1_Requests_Replace_Entities_ConfirmReplaceRequest" }
					},
					"400": {
						"description": "There are conflicts preventing the request to be created",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Shift is not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Validation error",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["requests"],
				"operationId": "postApiV1RequestsReplaceConfirm"
			}
		},
		"/api/v1/requests/replace/accept": {
			"post": {
				"description": "Accept a Replace Request (One employee accepts an offer from another)",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "id",
						"description": "Replace Request id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Accept when conflicts are present.",
						"type": "boolean",
						"default": "false",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully accepted",
						"schema": { "$ref": "#/definitions/V1_Requests_Replace_Entities_AcceptReplaceRequest" }
					},
					"400": {
						"description": "There are conflicts preventing the request to be created",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Shift is not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Validation error",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["requests"],
				"operationId": "postApiV1RequestsReplaceAccept"
			}
		},
		"/api/v1/requests/replace": {
			"post": {
				"description": "Create a Replace Request (Offer your shift to others)",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": { "description": "Successfully created" },
					"404": {
						"description": "Shift is not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is not unique",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["requests"],
				"operationId": "postApiV1RequestsReplace"
			}
		},
		"/api/v1/requests/{id}": {
			"delete": {
				"description": "Destroys a Request.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Request id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "shift_id",
						"description": "Shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Destroys a Request." } },
				"tags": ["requests"],
				"operationId": "deleteApiV1RequestsId"
			},
			"get": {
				"description": "Return a Request",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Request id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Request" } },
				"tags": ["requests"],
				"operationId": "getApiV1RequestsId"
			}
		},
		"/api/v1/rights/locations_position_payment_manage_right": {
			"delete": {
				"description": "Remove PaymentManageRight for LocationsPosition from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": {
						"description": "Remove PaymentManageRight for LocationsPosition from employment by ID"
					}
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationsPositionPaymentManageRight"
			},
			"put": {
				"description": "Assign PaymentManageRight for LocationsPosition to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "LocationsPosition id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign PaymentManageRight for LocationsPosition to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationsPositionPaymentManageRight"
			}
		},
		"/api/v1/rights/location_payment_manage_right": {
			"delete": {
				"description": "Remove PaymentManageRight for Location from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": { "description": "Remove PaymentManageRight for Location from employment by ID" }
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationPaymentManageRight"
			},
			"put": {
				"description": "Assign PaymentManageRight for Location to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign PaymentManageRight for Location to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationPaymentManageRight"
			}
		},
		"/api/v1/rights/locations_position_payment_show_right": {
			"delete": {
				"description": "Remove PaymentShowRight for LocationsPosition from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": {
						"description": "Remove PaymentShowRight for LocationsPosition from employment by ID"
					}
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationsPositionPaymentShowRight"
			},
			"put": {
				"description": "Assign PaymentShowRight for LocationsPosition to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "LocationsPosition id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign PaymentShowRight for LocationsPosition to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationsPositionPaymentShowRight"
			}
		},
		"/api/v1/rights/location_payment_show_right": {
			"delete": {
				"description": "Remove PaymentShowRight for Location from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": { "description": "Remove PaymentShowRight for Location from employment by ID" }
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationPaymentShowRight"
			},
			"put": {
				"description": "Assign PaymentShowRight for Location to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign PaymentShowRight for Location to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationPaymentShowRight"
			}
		},
		"/api/v1/rights/locations_position_shift_manage_right": {
			"delete": {
				"description": "Remove ShiftManageRight for LocationsPosition from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": {
						"description": "Remove ShiftManageRight for LocationsPosition from employment by ID"
					}
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationsPositionShiftManageRight"
			},
			"put": {
				"description": "Assign ShiftManageRight for LocationsPosition to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "LocationsPosition id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign ShiftManageRight for LocationsPosition to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationsPositionShiftManageRight"
			}
		},
		"/api/v1/rights/location_shift_manage_right": {
			"delete": {
				"description": "Remove ShiftManageRight for Location from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": { "description": "Remove ShiftManageRight for Location from employment by ID" }
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationShiftManageRight"
			},
			"put": {
				"description": "Assign ShiftManageRight for Location to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign ShiftManageRight for Location to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationShiftManageRight"
			}
		},
		"/api/v1/rights/locations_position_shift_show_right": {
			"delete": {
				"description": "Remove ShiftShowRight for LocationsPosition from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "locations_position_id",
						"description": "LocationsPosition ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": {
						"description": "Remove ShiftShowRight for LocationsPosition from employment by ID"
					}
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationsPositionShiftShowRight"
			},
			"put": {
				"description": "Assign ShiftShowRight for LocationsPosition to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "LocationsPosition id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign ShiftShowRight for LocationsPosition to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationsPositionShiftShowRight"
			}
		},
		"/api/v1/rights/location_shift_show_right": {
			"delete": {
				"description": "Remove ShiftShowRight for Location from employment by ID",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": { "description": "Remove ShiftShowRight for Location from employment by ID" }
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsLocationShiftShowRight"
			},
			"put": {
				"description": "Assign ShiftShowRight for Location to employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": { "description": "Assign ShiftShowRight for Location to employment" }
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsLocationShiftShowRight"
			}
		},
		"/api/v1/rights/my": {
			"get": {
				"description": "List active for employment rights",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_RightResponseEntity_RightIndexResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["rights"],
				"operationId": "getApiV1RightsMy"
			}
		},
		"/api/v1/rights": {
			"get": {
				"description": "List all rights",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": { "$ref": "#/definitions/V1_RightResponseEntity_RightIndexResponse" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["rights"],
				"operationId": "getApiV1Rights"
			}
		},
		"/api/v1/rights/{id}": {
			"delete": {
				"description": "Remove right from employment by ID. If all stakeholder loses all stakeholder rights,that stakeholder becomes an employee.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Right ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"204": {
						"description": "Remove right from employment by ID. If all stakeholder loses all stakeholder rights,that stakeholder becomes an employee."
					}
				},
				"tags": ["rights"],
				"operationId": "deleteApiV1RightsId"
			},
			"put": {
				"description": "Assign right to employment by ID. If employee is assigned stakeholder right,that employee becomes a stakeholder.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Right ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Assign right to employment by ID. If employee is assigned stakeholder right,that employee becomes a stakeholder."
					}
				},
				"tags": ["rights"],
				"operationId": "putApiV1RightsId"
			}
		},
		"/api/v1/shift_assignment_groups": {
			"get": {
				"description": "List all Shift Assignment Groups.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of ShiftAssignmentGroup ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter an array of Shift ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "assignment_group_ids[]",
						"description": "Filter an array of AssigmentGroup ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Shift Assignment Groups." } },
				"tags": ["shift_assignment_groups"],
				"operationId": "getApiV1ShiftAssignmentGroups"
			}
		},
		"/api/v1/shiftplans": {
			"get": {
				"description": "List all Shiftplans.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Shiftplan ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Filter for single Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Filter an array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "order_key",
						"description": "Sort Shiftplans",
						"type": "string",
						"default": "id",
						"enum": ["id", "starts_at"],
						"required": false
					},
					{
						"in": "query",
						"name": "order_dir",
						"description": "Sort Shiftplans",
						"type": "string",
						"default": "desc",
						"enum": ["asc", "desc"],
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Shiftplans." } },
				"tags": ["shiftplans"],
				"operationId": "getApiV1Shiftplans"
			},
			"post": {
				"description": "Create a new Shiftplan.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "ID of an Location",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Shiftplan",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Shiftplan metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": { "201": { "description": "Create a new Shiftplan." } },
				"tags": ["shiftplans"],
				"operationId": "postApiV1Shiftplans"
			}
		},
		"/api/v1/shiftplans/assign_employments_to_open_shifts": {
			"post": {
				"description": "Copy a shiftplan and automatically assign employments to open shifts in the copied shiftplan",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shiftplan_id",
						"description": "ID of shiftplan that will be automatically filled",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "copy_shiftplan",
						"description": "Copy shiftplan and assign employments to open shifts in the copied shiftplan",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_rotation_groups",
						"description": "Ignore rotation groups on automation",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts[shifts_collision]",
						"description": "Ignore shifts collision on automation",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts[absences_collision]",
						"description": "Ignore absences on automation",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts[maximum_working_hours]",
						"description": "Ignore maximum working hours limit on automation",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts[only_native_assignments]",
						"description": "Only assign employees to their master locations",
						"type": "boolean",
						"required": false
					},
					{
						"in": "formData",
						"name": "scoring_rules[consistent_position]",
						"description": "Select consistent position priority",
						"type": "string",
						"enum": ["deprioritize", "neutral", "prioritize"],
						"required": false
					},
					{
						"in": "formData",
						"name": "scoring_rules[consistent_time]",
						"description": "Select time consistent priority",
						"type": "string",
						"enum": ["deprioritize", "neutral", "prioritize"],
						"required": false
					},
					{
						"in": "formData",
						"name": "scoring_rules[availabilities]",
						"description": "Select availabilities priority",
						"type": "string",
						"enum": [
							"ignore_unavailablilities",
							"neutral",
							"prioritize_availabilities",
							"enforce_availabilities"
						],
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_tag_ids[only_include][]",
						"description": "Filter in employees with these employee attributes on automation",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_tag_ids[exclude][]",
						"description": "Filter out employees with these employee attributes on automation",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Automation was successfully started",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_AssignEmploymentsToOpenShiftsResponseEntity"
						}
					},
					"401": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": { "description": "", "schema": { "$ref": "#/definitions/V1_Entities_Invalid" } }
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansAssignEmploymentsToOpenShifts"
			}
		},
		"/api/v1/shiftplans/{id}": {
			"get": {
				"description": "Return a Shiftplan.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shiftplan ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Shiftplan." } },
				"tags": ["shiftplans"],
				"operationId": "getApiV1ShiftplansId"
			},
			"delete": {
				"description": "Delete a Shiftplan.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shiftplan ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Delete a Shiftplan." } },
				"tags": ["shiftplans"],
				"operationId": "deleteApiV1ShiftplansId"
			},
			"patch": {
				"description": "Updates a Shiftplan. Shifts outside of the time frame will be deleted (without warning)",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID related to the Shiftplan",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shiftplan ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Shiftplan",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the Shiftplan",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the Shiftplan",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "locked",
						"description": "Should this Shiftplan be locked?",
						"type": "boolean",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": { "$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanResponseEntity" }
					},
					"400": {
						"description": " Company not found\\n Shiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Shiftplan lock are not enabled",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanFutureLockError" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "patchApiV1ShiftplansId"
			}
		},
		"/api/v1/shiftplans/{id}/assign_rotation": {
			"post": {
				"description": "Assign shift rotation to existing shiftplan. Operation happens in background",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_rotation_id",
						"description": "Shift Rotation ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "workers_per_positions_list[][id]",
						"type": "array",
						"required": true,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "workers_per_positions_list[][workers]",
						"type": "array",
						"required": true,
						"items": { "type": "integer", "format": "int32" }
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"201": {
						"description": "{ success: true }",
						"schema": { "$ref": "#/definitions/V1_Entities_BackgroundJobsResponseSuccess" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"422": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansIdAssignRotation"
			}
		},
		"/api/v1/shiftplans/{id}/publish": {
			"post": {
				"description": "Publish Shiftplan.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID related to the Shiftplan",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shiftplan ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "publish_with_email",
						"description": "Publish with email",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "send_assigned_shifts",
						"description": "Send assigned shifts when publish_with_email is true",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "send_open_shifts",
						"description": "Send open shift when publish_with_email is true",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "send_message",
						"description": "Send a message when publish_with_email is true",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "message",
						"description": "Publish message when send_message is true",
						"type": "string",
						"default": null,
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Shiftplan not found\\nCompany not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid transition",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansIdPublish"
			}
		},
		"/api/v1/shiftplans/{shiftplan_id}/notifications": {
			"get": {
				"description": "Fetch Notifications count",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Fetch Notifications count",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanNotificationResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Company not found; Shiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "getApiV1ShiftplansShiftplanIdNotifications"
			}
		},
		"/api/v1/shiftplans/{shiftplan_id}/notifications_messages": {
			"post": {
				"description": "Create a Shift Schedule Notification",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "notification_type",
						"type": "string",
						"enum": ["updates", "open"],
						"required": true
					},
					{
						"in": "formData",
						"name": "message",
						"description": "Notification content",
						"type": "string",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Create a Shift Schedule Notification",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Company not found; Shiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid notification",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansShiftplanIdNotificationsMessages"
			}
		},
		"/api/v1/shiftplans/{shiftplan_id}/messages": {
			"post": {
				"description": "Message employees from shift schedule",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "message",
						"description": "Message Content",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "position_ids[]",
						"description": "Only send to employees that have this position",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "only_assigned",
						"description": "Only send to employees assigned to a shift that is part of the Shiftplan",
						"type": "boolean",
						"default": false,
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Message employees from shift schedule",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Company not found; Shiftplan not found; Position not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid message parameters",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansShiftplanIdMessages"
			}
		},
		"/api/v1/shiftplans/{shiftplan_id}/copy_to_existing": {
			"post": {
				"description": "Copy to existing Shiftplan",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID of Shiftplan",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "existing_shiftplan_id",
						"description": "Existing Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "copy_employees",
						"description": "Copy Shiftplan with Employees",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "formData",
						"name": "without_conflicts",
						"description": "Only copies assignments that wouldn’t trigger a warning",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "formData",
						"name": "copy_full_shiftplan",
						"description": "Copy full Shiftplan",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "formData",
						"name": "position_ids[]",
						"description": "Positions IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "copy_timeframe_starts_at",
						"description": "Copy timeframe start at",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "copy_timeframe_ends_at",
						"description": "Copy timeframe end at",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Shiftplan successfully copied",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanCopyResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found\\nShiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansShiftplanIdCopyToExisting"
			}
		},
		"/api/v1/shiftplans/{shiftplan_id}/copy": {
			"post": {
				"description": "Copy a Shiftplan",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID of Shiftplan",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Shiftplan",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "copy_employees",
						"description": "Copy Shiftplan with Employees",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "formData",
						"name": "without_conflicts",
						"description": "Only copies assignments that wouldn’t trigger a warning",
						"type": "boolean",
						"default": "false",
						"required": true
					},
					{
						"in": "formData",
						"name": "copy_full_shiftplan",
						"description": "Copy full Shiftplan",
						"type": "boolean",
						"default": true,
						"required": true
					},
					{
						"in": "formData",
						"name": "position_ids[]",
						"description": "Positions IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "copy_timeframe_starts_at",
						"description": "Copy timeframe start at",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "copy_timeframe_ends_at",
						"description": "Copy timeframe end at",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Automation was successfully started",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanCopyResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found\\nShiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansShiftplanIdCopy"
			}
		},
		"/api/v1/shiftplans/{shiftplan_id}/day_notes": {
			"post": {
				"description": "Add a new day note",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "title",
						"description": "Day note title",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "description",
						"description": "Day note description",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Day note start date",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Day note end date",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfuly created",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanDayNoteResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Shiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanNotFoundError" }
					},
					"422.1": {
						"description": "Invalid day note parameters",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.2": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "postApiV1ShiftplansShiftplanIdDayNotes"
			},
			"get": {
				"description": "List all day notes for existing shiftplan.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfuly listed",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanDayNotesResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Shiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanNotFoundError" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "getApiV1ShiftplansShiftplanIdDayNotes"
			}
		},
		"/api/v1/shiftplans/{shiftplan_id}/day_notes/{id}": {
			"delete": {
				"description": "Delete a day note",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfuly created",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanDayNoteResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Shiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanNotFoundError" }
					},
					"404.3": {
						"description": "Day note not found",
						"schema": { "$ref": "#/definitions/V1_Shiftplans_Entities_DayNoteNotFound" }
					},
					"422": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "deleteApiV1ShiftplansShiftplanIdDayNotesId"
			},
			"put": {
				"description": "Update a day note",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "title",
						"description": "Day note title",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "description",
						"description": "Day note description",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Day note start date",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "Day note end date",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "path",
						"name": "shiftplan_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfuly updated",
						"schema": {
							"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanDayNoteResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Shiftplan not found",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanNotFoundError" }
					},
					"404.3": {
						"description": "Day note not found",
						"schema": { "$ref": "#/definitions/V1_Shiftplans_Entities_DayNoteNotFound" }
					},
					"422.1": {
						"description": "Invalid day note parameters",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.2": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					}
				},
				"tags": ["shiftplans"],
				"operationId": "putApiV1ShiftplansShiftplanIdDayNotesId"
			}
		},
		"/api/v1/shift_breaks": {
			"get": {
				"description": "List all shift breaks",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Evaluation break ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for an array of Evaluation break ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_id",
						"description": "Filter for break times of a shift",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter an array of shifts",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Filter for shift breaks from",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "Filter for shift breaks to",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": { "200": { "description": "List all shift breaks" } },
				"tags": ["shift_breaks"],
				"operationId": "getApiV1ShiftBreaks"
			}
		},
		"/api/v1/shifts_tags": {
			"get": {
				"description": "List all Shift tags.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single ShiftTag ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of ShiftTag ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_id",
						"description": "Filter for single Shift ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter an array of Shift IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "tag_id",
						"description": "Filter for single Tag ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "tag_ids[]",
						"description": "Filter an array of Tag IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Shift tags." } },
				"tags": ["shifts_tags"],
				"operationId": "getApiV1ShiftsTags"
			}
		},
		"/api/v1/shifts_tags/{id}": {
			"get": {
				"description": "Return a ShiftsTag.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "ShiftsTag id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a ShiftsTag." } },
				"tags": ["shifts_tags"],
				"operationId": "getApiV1ShiftsTagsId"
			}
		},
		"/api/v1/shift_presets": {
			"get": {
				"description": "List all Shift presets.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Single Shift preset ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Array of ShiftPreset ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully connected",
						"schema": { "$ref": "#/definitions/V1_ShiftPresets_Entities_ShiftPresetIndexResponse" }
					},
					"404": {
						"description": "Company not found\\nShiftPreset not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_presets"],
				"operationId": "getApiV1ShiftPresets"
			}
		},
		"/api/v1/shift_rotations": {
			"post": {
				"description": "Creates a ShiftRotation.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of shift rotation",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "anchor_date",
						"description": "Shift rotation anchor date",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "rotation_interval",
						"description": "Number of days in the rotation",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of shift rotation.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of shift rotation.",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": { "$ref": "#/definitions/V1_ShiftRotations_Entities_ShiftRotationResponse" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is not unique",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotations"],
				"operationId": "postApiV1ShiftRotations"
			},
			"get": {
				"description": "Get collection of shift rotations",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for several Shift rotation IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_ids[]",
						"description": "Filter for several Shift rotation IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_ShiftRotations_Entities_ShiftRotationResponse" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotations"],
				"operationId": "getApiV1ShiftRotations"
			}
		},
		"/api/v1/shift_rotations/{id}/shiftplan": {
			"post": {
				"description": "Shiftplan",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID related to the Shiftplan",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "ID of an Location",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Shiftplan",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start Date of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End Date of the Shiftplan",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "workers_per_positions_list[][id]",
						"type": "array",
						"required": true,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "workers_per_positions_list[][workers]",
						"type": "array",
						"required": true,
						"items": { "type": "integer", "format": "int32" }
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Shiftplan metadata as json",
						"type": "json",
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"201": {
						"description": "{ id: 1, job_id: 1 }",
						"schema": { "$ref": "#/definitions/V1_ShiftRotations_Entities_ShiftplanPostResponse" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found\\nLocation not found\\nShiftRotation not found\\nworkers_per_positions_list[][id] not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shift_rotations"],
				"operationId": "postApiV1ShiftRotationsIdShiftplan"
			}
		},
		"/api/v1/shift_rotations/{id}": {
			"delete": {
				"description": "Deletes a Shift rotation.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": { "$ref": "#/definitions/V1_ShiftRotations_Entities_ShiftRotationResponse" }
					},
					"404": {
						"description": "Shift rotation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotations"],
				"operationId": "deleteApiV1ShiftRotationsId"
			},
			"get": {
				"description": "Shows a Shift rotation.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_ShiftRotations_Entities_ShiftRotationResponse" }
					},
					"404": {
						"description": "Shift rotation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotations"],
				"operationId": "getApiV1ShiftRotationsId"
			},
			"put": {
				"description": "Updates a Shift rotation.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Shift rotation id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of shift rotation",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "anchor_date",
						"description": "Shift rotation anchor date",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "rotation_interval",
						"description": "Number of days in the rotation",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "starts_at",
						"description": "Start of shift rotation",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "ends_at",
						"description": "End of shift rotation.",
						"type": "string",
						"format": "date-time",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": { "$ref": "#/definitions/V1_ShiftRotations_Entities_ShiftRotationResponse" }
					},
					"404": {
						"description": "Shift rotation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is not valid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotations"],
				"operationId": "putApiV1ShiftRotationsId"
			}
		},
		"/api/v1/shift_rotation_groups": {
			"post": {
				"description": "Create shift rotation groups",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_rotation_id",
						"description": "Shift rotation id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Rotation group name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_preset_ids[]",
						"description": "Shift preset ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": true
					},
					{
						"in": "formData",
						"name": "sort_position",
						"description": "Position of group in the list",
						"type": "integer",
						"format": "int32",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": {
							"$ref": "#/definitions/V1_ShiftRotationGroupResponseEntity_ShiftRotationGroupResponse"
						}
					},
					"404": {
						"description": "Rotation not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotation_groups"],
				"operationId": "postApiV1ShiftRotationGroups"
			},
			"get": {
				"description": "Get collection of shift rotation groups",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for several Shift rotation group IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter for several Shift IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_rotation_ids[]",
						"description": "Filter for several Shift rotation IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": { "200": { "description": "Get collection of shift rotation groups" } },
				"tags": ["shift_rotation_groups"],
				"operationId": "getApiV1ShiftRotationGroups"
			}
		},
		"/api/v1/shift_rotation_groups/{id}/unassign_employee": {
			"post": {
				"description": "Unassign Employee from shifts of Rotation Group",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "ShiftRotationGroup ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "Locations Position ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "start_date",
						"description": "Start date",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "end_date",
						"description": "End date",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Unassign shift rotation groups has successfully started",
						"schema": {
							"$ref": "#/definitions/V1_ShiftRotationGroupResponseEntity_UnassignEmployeeResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					},
					"404.1": {
						"description": ["Couldn't find ShiftRotationGroup", "Couldn't find LocationsPosition"],
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.2": {
						"description": "Couldn't find Company",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.3": {
						"description": "Couldn't find Shiftplan",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanNotFoundError" }
					},
					"404.4": {
						"description": "Couldn't find Employment",
						"schema": { "$ref": "#/definitions/V1_Entities_EmploymentNotFoundError" }
					},
					"422.1": {
						"description": "Invalid start_date or end_date",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.2": {
						"description": "ends_at cannot be before starts_at",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.3": {
						"description": "Shift rotations feature is not enabled",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.4": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"422.5": {
						"description": "Invalid request parameters",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shift_rotation_groups"],
				"operationId": "postApiV1ShiftRotationGroupsIdUnassignEmployee"
			}
		},
		"/api/v1/shift_rotation_groups/{id}/assign_employee": {
			"post": {
				"description": "Assign Employee to Rotation Group",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "ShiftRotationGroup ID",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "locations_position_id",
						"description": "Locations Position ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shiftplan_id",
						"description": "Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "start_date",
						"description": "Start date",
						"type": "string",
						"format": "date-time",
						"required": true
					},
					{
						"in": "formData",
						"name": "end_date",
						"description": "End date",
						"type": "string",
						"format": "date-time",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Assignment was successfully started",
						"schema": {
							"$ref": "#/definitions/V1_ShiftRotationGroupResponseEntity_AssignEmployeePostResponseEntity"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UserUnauthorizedError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_ForbiddenError" }
					},
					"404": {
						"description": "Couldn't find ShiftRotationGroup\\nCouldn't find LocationsPosition",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.1": {
						"description": "Couldn't find Company",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					},
					"404.2": {
						"description": "Couldn't find Shiftplan",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanNotFoundError" }
					},
					"404.3": {
						"description": "Couldn't find Employment",
						"schema": { "$ref": "#/definitions/V1_Entities_EmploymentNotFoundError" }
					},
					"422.1": {
						"description": "Invalid start_date or end_date",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.2": {
						"description": "ends_at cannot be before starts_at",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.3": {
						"description": "Rotation groups are not enabled in the company profile",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.4": {
						"description": "Shift rotations feature is not enabled",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"422.5": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"422.6": {
						"description": "Invalid request parameters",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["shift_rotation_groups"],
				"operationId": "postApiV1ShiftRotationGroupsIdAssignEmployee"
			}
		},
		"/api/v1/shift_rotation_groups/{id}/unassign_from_shifts": {
			"post": {
				"description": "Unassign shift rotation group from shifts .",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_ids[]",
						"description": "Shift ids to unassign from Shift Rotation Group",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"201": { "description": "Unassign shift rotation group from shifts ." },
					"404": {
						"description": "Rotation group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotation_groups"],
				"operationId": "postApiV1ShiftRotationGroupsIdUnassignFromShifts"
			}
		},
		"/api/v1/shift_rotation_groups/{id}/assign_to_shifts": {
			"post": {
				"description": "Assign shift rotation group to shifts .",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_ids[]",
						"description": "Shift ids to add to Shift Rotation Group",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"201": { "description": "Assign shift rotation group to shifts ." },
					"404": {
						"description": "Rotation group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotation_groups"],
				"operationId": "postApiV1ShiftRotationGroupsIdAssignToShifts"
			}
		},
		"/api/v1/shift_rotation_groups/{id}": {
			"delete": {
				"description": "Delete shift rotation group",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": {
							"$ref": "#/definitions/V1_ShiftRotationGroupResponseEntity_ShiftRotationGroupResponse"
						}
					},
					"404": {
						"description": "Rotation group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotation_groups"],
				"operationId": "deleteApiV1ShiftRotationGroupsId"
			},
			"put": {
				"description": "Update a Shift rotation group.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Rotation group name",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_preset_ids[]",
						"description": "Shift preset ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"required": false
					},
					{
						"in": "formData",
						"name": "sort_position",
						"description": "Position of group in the list",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": {
							"$ref": "#/definitions/V1_ShiftRotationGroupResponseEntity_ShiftRotationGroupResponse"
						}
					},
					"404": {
						"description": "Rotation group not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["shift_rotation_groups"],
				"operationId": "putApiV1ShiftRotationGroupsId"
			}
		},
		"/api/v1/special_dates": {
			"post": {
				"description": "Create a new Special Date.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Special Date.",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "special_date",
						"description": "Special Date.",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "full_day",
						"description": "Full Day?",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "start_time",
						"description": "Start Time of Special Date.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "end_time",
						"description": "End Time of Special Date.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "all_locations",
						"description": "All locations?",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "is_included_in_hour_account",
						"description": "Working hours adjustment?",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Filter for an array Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_SpecialDates_Entities_SpecialDatesResponse" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["special_dates"],
				"operationId": "postApiV1SpecialDates"
			},
			"get": {
				"description": "List all special Dates",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company Id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "starts_at",
						"description": "Start date to filter for special dates",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"description": "End date to filter for special dates",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Location Ids",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "",
						"schema": { "$ref": "#/definitions/V1_SpecialDates_Entities_SpecialDatesIndexResponse" }
					},
					"404": {
						"description": "Company not found, Location not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["special_dates"],
				"operationId": "getApiV1SpecialDates"
			}
		},
		"/api/v1/special_dates/{id}": {
			"delete": {
				"description": "Delete an Special Date.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Special Date ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully deleted Special Date.",
						"schema": { "$ref": "#/definitions/V1_Entities_ResponseSuccess" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "SpecialDate not found\\nCompany not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["special_dates"],
				"operationId": "deleteApiV1SpecialDatesId"
			},
			"put": {
				"description": "Update an Special Date.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Special Date ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name of the Special Date.",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "special_date",
						"description": "Special Date.",
						"type": "string",
						"format": "date",
						"required": true
					},
					{
						"in": "formData",
						"name": "full_day",
						"description": "Full Day?",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "start_time",
						"description": "Start Time of Special Date.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "end_time",
						"description": "End Time of Special Date.",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "formData",
						"name": "all_locations",
						"description": "All locations?",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "formData",
						"name": "is_included_in_hour_account",
						"description": "Working hours adjustment?",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Filter for an array Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_SpecialDates_Entities_SpecialDatesResponse" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "SpecialDate not found\\nCompany not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["special_dates"],
				"operationId": "putApiV1SpecialDatesId"
			},
			"get": {
				"description": "Return a Special Date.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "ID of a Company.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Special Date ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_SpecialDates_Entities_SpecialDatesResponse" }
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404": {
						"description": "SpecialDate not found\\nCompany not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					}
				},
				"tags": ["special_dates"],
				"operationId": "getApiV1SpecialDatesId"
			}
		},
		"/api/v1/sso_settings/sso_target_url": {
			"get": {
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "email",
						"description": "Email",
						"type": "string",
						"required": true
					}
				],
				"responses": { "200": { "description": "get SsoTargetUrl(s)" } },
				"tags": ["sso_settings"],
				"operationId": "getApiV1SsoSettingsSsoTargetUrl"
			}
		},
		"/api/v1/staff_shifts/replace": {
			"post": {
				"description": "Replace one employee with another on shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eshifts_collision\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003elocations_position_changed\u003c/li\u003e\u003cli\u003eminimum_break\u003c/li\u003e\u003cli\u003emaximum_working_hours\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003emaximum_earning\u003c/li\u003e\u003cli\u003eoutside_employment_period\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eunavailable\u003c/li\u003e\u003cli\u003enot_available\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "ID of Shift to which staff is being assigned",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "ID of an Employment being assigned to shift",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "source_employment_id",
						"description": "ID of the Employment that is being removed from shift",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "StaffShift metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Successfully replaced staff on shift",
						"schema": {
							"$ref": "#/definitions/V1_StaffShiftResponseEntity_StaffShiftsShowResponse"
						}
					},
					"422.1": {
						"description": "Unable to add Employment",
						"schema": { "$ref": "#/definitions/V1_Entities_UnableToAddEmploymentError" }
					},
					"422.2": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found, Shift not found, Employment cannot be blank, Source Employemnt not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422.3": {
						"description": "StaffShift conflicts",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					}
				},
				"tags": ["staff_shifts"],
				"operationId": "postApiV1StaffShiftsReplace"
			}
		},
		"/api/v1/staff_shifts/move_staff": {
			"post": {
				"description": "Move a staff from one shift to another",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eshifts_collision\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003elocations_position_changed\u003c/li\u003e\u003cli\u003eminimum_break\u003c/li\u003e\u003cli\u003emaximum_working_hours\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003emaximum_earning\u003c/li\u003e\u003cli\u003eoutside_employment_period\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eunavailable\u003c/li\u003e\u003cli\u003enot_available\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "ID of shift to which staff is being assigned",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "ID of an Employment",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "source_shift_id",
						"description": "ID of shift from which staff is being removed",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "StaffShift metadata as json",
						"type": "json",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Succesfully move staff to another shift",
						"schema": {
							"$ref": "#/definitions/V1_StaffShiftResponseEntity_StaffShiftsShowResponse"
						}
					},
					"422.1": {
						"description": "Unable to add Employment",
						"schema": { "$ref": "#/definitions/V1_Entities_UnableToAddEmploymentError" }
					},
					"422.2": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found, Shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422.3": {
						"description": "StaffShift conflicts",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					}
				},
				"tags": ["staff_shifts"],
				"operationId": "postApiV1StaffShiftsMoveStaff"
			}
		},
		"/api/v1/staff_shifts": {
			"get": {
				"description": "List all StaffShifts.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "starts_at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "ends_at",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "state",
						"type": "string",
						"enum": [
							"done_evaluation",
							"needs_evaluation",
							"no_evaluation",
							"no_show",
							"punchtimed",
							"auto_punchtimed"
						],
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_id",
						"description": "Filter for single Shift ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_id",
						"description": "Filter for single Shiftplan ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_id",
						"description": "Filter for single Employment ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Filter for single Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of StaffShift ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shift_ids[]",
						"description": "Filter an array of Shift ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "shiftplan_ids[]",
						"description": "Filter an array of Shiftplan ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "only_open",
						"description": "Filter for open shifts - employment_id needs to be present",
						"type": "boolean",
						"default": "false",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Succesfully returned list of all StaffShifts",
						"schema": {
							"$ref": "#/definitions/V1_StaffShiftResponseEntity_StaffShiftsIndexResponse"
						}
					},
					"400": {
						"description": "employment_id must be present",
						"schema": {
							"$ref": "#/definitions/V1_StaffShiftResponseEntity_EmploymentIdNotPresentError"
						}
					}
				},
				"tags": ["staff_shifts"],
				"operationId": "getApiV1StaffShifts"
			},
			"post": {
				"description": "Create a new StaffShift.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company ID.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "ID of an Shift",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "ID of an Employment",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "assign_to_connected",
						"description": "Assign to other connected shifts",
						"type": "boolean",
						"default": false,
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "StaffShift metadata as json",
						"type": "json",
						"required": false
					},
					{
						"in": "formData",
						"name": "ignore_conflicts",
						"description": "Either true to ignore all conflicts listed below or an Array of specific conflicts to ignore. Only warnings can be ignored, enforced conflicts will persist. Possible values are:\u003cul\u003e \u003cli\u003eshifts_collision\u003c/li\u003e\u003cli\u003eabsences_collision\u003c/li\u003e\u003cli\u003elocations_position_changed\u003c/li\u003e\u003cli\u003eminimum_break\u003c/li\u003e\u003cli\u003emaximum_working_hours\u003c/li\u003e\u003cli\u003eminimum_rest\u003c/li\u003e\u003cli\u003emaximum_earning\u003c/li\u003e\u003cli\u003eoutside_employment_period\u003c/li\u003e\u003cli\u003emaximum_consecutive_working_days\u003c/li\u003e\u003cli\u003erestricted_shift_presets\u003c/li\u003e\u003cli\u003eunavailable\u003c/li\u003e\u003cli\u003enot_available\u003c/li\u003e\u003c/ul\u003e",
						"type": "Object",
						"default": "false",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Succesfully created a StaffShift",
						"schema": {
							"$ref": "#/definitions/V1_StaffShiftResponseEntity_StaffShiftsShowResponse"
						}
					},
					"422.1": {
						"description": "Unable to add Employment",
						"schema": { "$ref": "#/definitions/V1_Entities_UnableToAddEmploymentError" }
					},
					"422.2": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"404": {
						"description": "Company not found, Shift not found, Employment cannot be blank",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422.3": {
						"description": "StaffShift conflicts",
						"schema": { "$ref": "#/definitions/V1_Entities_ConflictsError" }
					}
				},
				"tags": ["staff_shifts"],
				"operationId": "postApiV1StaffShifts"
			}
		},
		"/api/v1/staff_shifts/{id}": {
			"get": {
				"description": "Return a StaffShift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully returned a StaffShift",
						"schema": { "$ref": "#/definitions/V1_StaffShiftResponseEntity_StaffShiftResponse" }
					}
				},
				"tags": ["staff_shifts"],
				"operationId": "getApiV1StaffShiftsId"
			},
			"delete": {
				"description": "Deletes a StaffShift",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "StaffShift ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "unassign_from_connected",
						"description": "Unassign to other connected shifts",
						"type": "boolean",
						"default": "false",
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "Succesfully deleted a StaffShift",
						"schema": {
							"$ref": "#/definitions/V1_StaffShiftResponseEntity_DeleteStaffShiftResponse"
						}
					},
					"404": {
						"description": "StaffShift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"422": {
						"description": "Shiftplan is locked",
						"schema": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedError" }
					}
				},
				"tags": ["staff_shifts"],
				"operationId": "deleteApiV1StaffShiftsId"
			}
		},
		"/api/v1/staff_shifts_tags": {
			"delete": {
				"description": "Deletes the association between a given StaffShift and Tag",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "staff_shift_id",
						"description": "Staff shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "tag_id",
						"description": "Tag id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully deleted",
						"schema": { "$ref": "#/definitions/V1_StaffShiftsTags_Entities_StaffShiftsTag" }
					},
					"404": {
						"description": "StaffShiftsTag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["staff_shifts_tags"],
				"operationId": "deleteApiV1StaffShiftsTags"
			},
			"post": {
				"description": "Create staff Shift Tag",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "staff_shift_id",
						"description": "Staff shift id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "tag_id",
						"description": "Tag id",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "Successfully created",
						"schema": { "$ref": "#/definitions/V1_StaffShiftsTags_Entities_StaffShiftsTag" }
					},
					"404": {
						"description": "Staff shift not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "The request is invalid",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					},
					"403": {
						"description": "forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["staff_shifts_tags"],
				"operationId": "postApiV1StaffShiftsTags"
			},
			"get": {
				"description": "Get collection of Staff Shift tags",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter for several Staffshift tags IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "staff_shift_ids[]",
						"description": "Filter for several Staffshift IDs",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "tag_ids[]",
						"description": "Filter for several Tag ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": {
					"200": {
						"description": "List of staff shifts tags",
						"schema": {
							"$ref": "#/definitions/V1_StaffShiftsTags_Entities_StaffShiftsTagIndexResponse"
						}
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["staff_shifts_tags"],
				"operationId": "getApiV1StaffShiftsTags"
			}
		},
		"/api/v1/staff_shifts_tags/{id}": {
			"get": {
				"description": "Return a StaffShiftsTag.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"description": "Company id.",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "StaffShiftsTag id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Show a staff shifts tag",
						"schema": { "$ref": "#/definitions/V1_StaffShiftsTags_Entities_StaffShiftsTag" }
					},
					"404": {
						"description": "StaffShiftsTag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["staff_shifts_tags"],
				"operationId": "getApiV1StaffShiftsTagsId"
			}
		},
		"/api/v1/tags": {
			"post": {
				"description": "Create a new tag",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of a Company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "ID of a Location",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "color",
						"description": "Color (HEX format, e.g. #FF00FF)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Tag metadata json",
						"type": "json",
						"required": false
					}
				],
				"responses": {
					"201": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_TagResponseEntity" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.2": {
						"description": "Location not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["tags"],
				"operationId": "postApiV1Tags"
			},
			"get": {
				"description": "List all Tags.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "updated_after",
						"description": "Return all records which are updated after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_after",
						"description": "Return all records which are created after",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "updated_before",
						"description": "Return all records which are updated before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "created_before",
						"description": "Return all records which are created before",
						"type": "string",
						"format": "date-time",
						"required": false
					},
					{
						"in": "query",
						"name": "id",
						"description": "Filter for single Tag ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "ids[]",
						"description": "Filter an array of Tag ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Filter for single Location ID",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "location_ids[]",
						"description": "Filter an array of Location ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "context[]",
						"description": "Tag context",
						"type": "array",
						"items": {
							"type": "string",
							"enum": ["shift_tag", "staff_shift_tag", "employment_tag"],
							"default": ["shift_tag"]
						},
						"collectionFormat": "multi",
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Tags." } },
				"tags": ["tags"],
				"operationId": "getApiV1Tags"
			}
		},
		"/api/v1/tags/{id}": {
			"put": {
				"description": "Update existing tags",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"description": "ID of a Company",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "ID of a Location",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "name",
						"description": "Name",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "color",
						"description": "Color (HEX format, e.g. #FF00FF)",
						"type": "string",
						"required": false
					},
					{
						"in": "formData",
						"name": "metadata",
						"description": "Tag metadata json",
						"type": "json",
						"required": false
					},
					{ "in": "path", "name": "id", "type": "integer", "format": "int32", "required": true }
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": { "$ref": "#/definitions/V1_TagResponseEntity" }
					},
					"401": {
						"description": "401 Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_UnauthorizedError" }
					},
					"404.1": {
						"description": "Company not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.2": {
						"description": "Location not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"404.3": {
						"description": "Tag not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"422": {
						"description": "Invalid request",
						"schema": { "$ref": "#/definitions/V1_Entities_Invalid" }
					}
				},
				"tags": ["tags"],
				"operationId": "putApiV1TagsId"
			},
			"delete": {
				"description": "Destroy a tag",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"description": "Tag id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "204": { "description": "Destroy a tag" } },
				"tags": ["tags"],
				"operationId": "deleteApiV1TagsId"
			},
			"get": {
				"description": "Return a Tag.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "Tag id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a Tag." } },
				"tags": ["tags"],
				"operationId": "getApiV1TagsId"
			}
		},
		"/api/v1/tags/{id}/remove_from_shift": {
			"put": {
				"description": "Remove a tag from a shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "ID of tag",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "ID of shift",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Remove a tag from a shift" } },
				"tags": ["tags"],
				"operationId": "putApiV1TagsIdRemoveFromShift"
			}
		},
		"/api/v1/tags/{id}/add_to_shift": {
			"put": {
				"description": "Add a tag to a shift",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "ID of tag",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "shift_id",
						"description": "ID of shift",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "location_id",
						"description": "Location ID",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Add a tag to a shift" } },
				"tags": ["tags"],
				"operationId": "putApiV1TagsIdAddToShift"
			}
		},
		"/api/v1/users/update_password": {
			"post": {
				"description": "Update User password.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "current_password",
						"description": "Current password",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "password",
						"description": "New password",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "password_confirmation",
						"description": "New password confirmation",
						"type": "string",
						"required": true
					}
				],
				"responses": { "201": { "description": "Update User password." } },
				"tags": ["users"],
				"operationId": "postApiV1UsersUpdatePassword"
			}
		},
		"/api/v1/users/change_locale": {
			"post": {
				"description": "Change locale",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "locale",
						"description": "Language code. Example: `de`, `en`",
						"type": "string",
						"default": "de",
						"enum": ["de", "en"],
						"required": true
					}
				],
				"responses": { "201": { "description": "Change locale" } },
				"tags": ["users"],
				"operationId": "postApiV1UsersChangeLocale"
			}
		},
		"/api/v1/users": {
			"post": {
				"description": "DEPRECATED: Please use post api/v2/employments instead. Create a User employment",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "formData", "name": "first_name", "type": "string", "required": true },
					{ "in": "formData", "name": "last_name", "type": "string", "required": true },
					{ "in": "formData", "name": "is_paid_monthly", "type": "boolean", "required": false },
					{
						"in": "formData",
						"name": "sso_only",
						"description": "Create user as Single Sign-On only user. Password will be ignored if this flag is set",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "user_token",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "max_vacation_days",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "maximum_money_enabled",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "maximum_money",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[mon_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[tue_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[wed_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[thu_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[fri_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[sat_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[sun_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[vacation_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "exit_date",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "exit_month_payed_partially",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "billing_type_id",
						"description": " 1 = abrechnen (is billed);  2 = nicht abrechnen (is not billed)",
						"type": "integer",
						"format": "int32",
						"enum": [1, 2],
						"required": false
					},
					{ "in": "formData", "name": "note", "type": "string", "required": false },
					{ "in": "formData", "name": "phone_number", "type": "string", "required": false },
					{ "in": "formData", "name": "staff_number", "type": "string", "required": false },
					{ "in": "formData", "name": "email", "type": "string", "required": false },
					{ "in": "formData", "name": "password", "type": "string", "required": false }
				],
				"responses": {
					"201": {
						"description": "DEPRECATED: Please use post api/v2/employments instead. Create a User employment"
					}
				},
				"tags": ["users"],
				"operationId": "postApiV1Users",
				"deprecated": true
			},
			"get": {
				"description": "List all Users.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					}
				],
				"responses": { "200": { "description": "List all Users." } },
				"tags": ["users"],
				"operationId": "getApiV1Users"
			}
		},
		"/api/v1/users/{id}": {
			"put": {
				"description": "Edit a User employment.",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{ "in": "formData", "name": "first_name", "type": "string", "required": true },
					{ "in": "formData", "name": "last_name", "type": "string", "required": true },
					{ "in": "formData", "name": "is_paid_monthly", "type": "boolean", "required": false },
					{
						"in": "formData",
						"name": "sso_only",
						"description": "Create user as Single Sign-On only user. Password will be ignored if this flag is set",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "user_token",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "max_vacation_days",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "maximum_money_enabled",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "maximum_money",
						"type": "number",
						"format": "float",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[mon_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[tue_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[wed_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[thu_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[fri_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[sat_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[sun_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "employment_work_hour_attributes[vacation_minutes]",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "formData",
						"name": "exit_date",
						"type": "string",
						"format": "date",
						"required": false
					},
					{
						"in": "formData",
						"name": "exit_month_payed_partially",
						"type": "boolean",
						"default": "false",
						"required": false
					},
					{
						"in": "formData",
						"name": "billing_type_id",
						"description": " 1 = abrechnen (is billed);  2 = nicht abrechnen (is not billed)",
						"type": "integer",
						"format": "int32",
						"enum": [1, 2],
						"required": false
					},
					{ "in": "formData", "name": "note", "type": "string", "required": false },
					{ "in": "formData", "name": "phone_number", "type": "string", "required": false },
					{ "in": "formData", "name": "staff_number", "type": "string", "required": false },
					{
						"in": "path",
						"name": "id",
						"description": "Employment id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Edit a User employment." } },
				"tags": ["users"],
				"operationId": "putApiV1UsersId"
			},
			"get": {
				"description": "Return a User.",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"description": "User id.",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": { "200": { "description": "Return a User." } },
				"tags": ["users"],
				"operationId": "getApiV1UsersId"
			}
		},
		"/api/v2/absence_entitlements": {
			"put": {
				"description": "Update Absence Entitlement",
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{
						"in": "formData",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "formData",
						"name": "company_id",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "employment_id",
						"description": "Employment ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "absence_reason_id",
						"description": "Absence Reason ID",
						"type": "integer",
						"format": "int32",
						"required": true
					},
					{
						"in": "formData",
						"name": "days",
						"description": "Number of Days for the Absence Reason",
						"type": "number",
						"format": "float",
						"required": true
					},
					{
						"in": "formData",
						"name": "year",
						"description": "Year to update",
						"type": "integer",
						"format": "int32",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully updated",
						"schema": {
							"$ref": "#/definitions/V2_AbsenceEntitlementResponseEntity_AbsenceEntitlementResponse"
						}
					},
					"404": {
						"description": "Employment not found",
						"schema": { "$ref": "#/definitions/V1_Entities_NotFoundError" }
					},
					"403": {
						"description": "Forbidden",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					},
					"422": {
						"description": "Non carry-over absence reasons can not have different entitlements for years",
						"schema": { "$ref": "#/definitions/V1_Entities_Forbidden" }
					}
				},
				"tags": ["absence_entitlements"],
				"operationId": "putApiV2AbsenceEntitlements"
			},
			"get": {
				"description": "List all Absence Entitlements",
				"produces": ["application/json"],
				"parameters": [
					{
						"in": "query",
						"name": "user_email",
						"description": "E-Mail of user",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "authentication_token",
						"description": "Authentication Token - can be fetched by login action",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "page",
						"description": "Pages starts with 1",
						"type": "integer",
						"format": "int32",
						"default": 1,
						"required": false
					},
					{
						"in": "query",
						"name": "per_page",
						"description": "Between 1 and 1000",
						"type": "integer",
						"format": "int32",
						"default": 1000,
						"required": false
					},
					{
						"in": "query",
						"name": "with_deleted",
						"description": "Include soft-deleted employments",
						"type": "boolean",
						"default": true,
						"required": false
					},
					{
						"in": "query",
						"name": "company_ids[]",
						"description": "Filter an array of Company ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "employment_ids[]",
						"description": "Filter an array of Employment ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "absence_reason_ids[]",
						"description": "Filter an array of Absence Reason ID",
						"type": "array",
						"items": { "type": "integer", "format": "int32" },
						"collectionFormat": "multi",
						"required": false
					},
					{
						"in": "query",
						"name": "year",
						"description": "Filter for a specific year between 2000 and 2100",
						"type": "integer",
						"format": "int32",
						"minimum": 2000,
						"maximum": 2100,
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully listed",
						"schema": {
							"$ref": "#/definitions/V2_AbsenceEntitlementResponseEntity_AbsenceEntitlementIndexResponse"
						}
					},
					"401": {
						"description": "Unauthorized",
						"schema": { "$ref": "#/definitions/V1_Entities_CompanyNotFoundError" }
					}
				},
				"tags": ["absence_entitlements"],
				"operationId": "getApiV2AbsenceEntitlements"
			}
		},
		"/api/v1/login": {
			"post": {
				"produces": ["application/json"],
				"consumes": ["application/json"],
				"parameters": [
					{ "in": "formData", "name": "user[email]", "type": "string", "required": true },
					{ "in": "formData", "name": "user[password]", "type": "string", "required": true }
				],
				"responses": { "201": { "description": "created Login" } },
				"tags": ["login"],
				"operationId": "postApiV1Login"
			}
		}
	},
	"definitions": {
		"V1_Entities_ResponseSuccess": {
			"type": "object",
			"properties": { "success": { "type": "boolean", "example": true } },
			"required": ["success"],
			"description": "V1_Entities_ResponseSuccess model"
		},
		"V1_Entities_NotFoundError": {
			"type": "object",
			"properties": {
				"error": { "type": "string", "example": "not found", "description": "Always 'not found'" }
			},
			"required": ["error"],
			"description": "V1_Entities_NotFoundError model"
		},
		"V1_Entities_UserUnauthorizedError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Unauthorized",
					"description": "Unauthorized error"
				}
			},
			"required": ["message"],
			"description": "V1_Entities_UserUnauthorizedError model"
		},
		"V1_Entities_ForbiddenError": {
			"type": "object",
			"properties": {
				"message": { "type": "string", "example": "Forbidden", "description": "Forbidden error" }
			},
			"required": ["message"],
			"description": "V1_Entities_ForbiddenError model"
		},
		"V1_AbsenceResponseEntity_CarryOverInfoResponse": {
			"type": "object",
			"properties": {
				"used": { "type": "integer", "format": "int32", "example": 42 },
				"limit": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["used", "limit"],
			"description": "V1_AbsenceResponseEntity_CarryOverInfoResponse model"
		},
		"V1_Entities_EmploymentNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Employment not found",
					"description": "Always 'Employment not found'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_EmploymentNotFoundError model"
		},
		"V1_Entities_AbsenceReasonNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Absence Reason not found",
					"description": "Always 'Absence Reason not found'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_AbsenceReasonNotFoundError model"
		},
		"V1_AbsenceResponseEntity_CarryOverDisabledError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Carryover days are disabled for this Absence Reason",
					"description": "Always 'Carryover days are disabled for this Absence Reason'"
				}
			},
			"required": ["error"],
			"description": "V1_AbsenceResponseEntity_CarryOverDisabledError model"
		},
		"V1_AbsenceResponseEntity_NotSupportedRangeError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Period should be within one year and include carry over days",
					"description": "Always 'Period should be within one year and include carry over days'"
				}
			},
			"required": ["error"],
			"description": "V1_AbsenceResponseEntity_NotSupportedRangeError model"
		},
		"V1_AbsenceResponseEntity_AbsenceResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the Absence"
				},
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-01T00:00:00.000+01:00",
					"description": "Date when the Absence will start or started"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-02T00:00:00.000+01:00",
					"description": "Date when the Absence will end or ended"
				},
				"state": { "type": "string", "example": "accepted", "description": "State of the Absence" },
				"state_updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-02T00:00:00.000+01:00",
					"description": "Date when the Absence state was updated"
				},
				"notes": {
					"type": "string",
					"example": "notes",
					"description": "Note added by the employee or employer"
				},
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Employment ID associated with the Absence"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-01T00:00:00.000+01:00",
					"description": "Date when the Absence was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-02T00:00:00.000+01:00",
					"description": "Date when the Absence was last updated"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-03T00:00:00.000+01:00",
					"description": "Date when the Absence was deleted"
				},
				"days": {
					"type": "integer",
					"format": "int32",
					"example": 2,
					"description": "Duration of the Absence in working days"
				},
				"vacation_minutes": {
					"type": "integer",
					"format": "int32",
					"example": 1800,
					"description": "Amount of vacations minutes for the Absence"
				},
				"paid": {
					"type": "boolean",
					"example": "true",
					"description": "Is or was this a paid or unpaid Absence?"
				},
				"absence_reason_id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Reason ID for the Absence"
				},
				"is_full_day": {
					"type": "boolean",
					"example": "true",
					"description": "An Absence may vary between full day(s) or set by time of day"
				},
				"refuse_message": {
					"type": "string",
					"example": "refuse message",
					"description": "Optional message for a refused absence"
				},
				"metadata": { "type": "json", "example": "null", "description": "" },
				"file_uid": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identification key for attachment"
				},
				"file_name": {
					"type": "string",
					"example": "name",
					"description": "Name of the attachment"
				},
				"file_uploaded_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-01T00:00:00.000+01:00",
					"description": "Date when the attachment was uploaded"
				},
				"can_manage": {
					"type": "boolean",
					"example": "true",
					"description": "Can the Absence be managed by the stakeholder?"
				},
				"file": {
					"type": "string",
					"example": "file.jpg",
					"description": "Location of attachment"
				},
				"deleted_staff_shifts_info": { "type": "json", "example": "null" }
			},
			"required": ["id", "employment_id", "absence_reason_id"],
			"description": "V1_AbsenceResponseEntity_AbsenceResponse model"
		},
		"V1_Entities_UnauthorizedError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Unauthorized",
					"description": "Always 'Unauthorized'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_UnauthorizedError model"
		},
		"V1_AbsenceResponseEntity_AbsenceIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_AbsenceResponseEntity_AbsenceResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_AbsenceResponseEntity_AbsenceIndexResponse model"
		},
		"V1_Entities_Invalid": {
			"type": "object",
			"properties": {
				"error": { "type": "string", "example": "invalid", "description": "Always 'invalid'" },
				"invalid": {
					"type": "json",
					"example": { "type": ["has already been taken"] },
					"description": "JSON with details"
				}
			},
			"required": ["error", "invalid"],
			"description": "V1_Entities_Invalid model"
		},
		"V1_Entities_Forbidden": {
			"type": "object",
			"properties": {
				"error": { "type": "string", "example": "forbidden", "description": "Always 'forbidden'" }
			},
			"required": ["error"],
			"description": "V1_Entities_Forbidden model"
		},
		"V1_AbsenceReasons_Entities_AbsenceReasonsStats": {
			"type": "object",
			"properties": {
				"absence_reasons": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_AbsenceReasons_Entities_AbsenceReasonsStatItem" }
				},
				"total_days": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["absence_reasons", "total_days"],
			"description": "V1_AbsenceReasons_Entities_AbsenceReasonsStats model"
		},
		"V1_AbsenceReasons_Entities_AbsenceReasonsStatItem": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"name": { "type": "string", "example": "Vacation" },
				"days": { "type": "integer", "format": "int32", "example": 1 },
				"total_days": { "type": "integer", "format": "int32", "example": 42 },
				"carry_over_info": { "type": "object", "example": { "used": 2.0, "limit": 28.0 } }
			},
			"required": ["id", "name", "days", "total_days", "carry_over_info"]
		},
		"V1_AbsenceReasons_Entities_AbsenceReasonResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 1 },
				"company_id": { "type": "integer", "format": "int32", "example": 1 },
				"name": { "type": "string", "example": "Sick" },
				"short_name": { "type": "string", "example": "SIC" },
				"days": { "type": "number", "format": "float", "example": 1.5 },
				"carry_over_days_enabled": { "type": "boolean", "example": false },
				"carry_over_days_deadline": { "type": "string", "example": "18.03" },
				"calculation_type": { "type": "string", "example": "standard" },
				"hours_calculation_type": { "type": "string", "example": "employee_profile" },
				"is_absence_attachments_allowed": { "type": "boolean", "example": false },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "company_id", "name", "days", "carry_over_days_enabled"],
			"description": "V1_AbsenceReasons_Entities_AbsenceReasonResponse model"
		},
		"V1_AssignmentGroupResponseEntity_AssignmentGroupResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the AssignmentGroup"
				},
				"name": {
					"type": "string",
					"example": "AG 1",
					"description": "Name of the AssignmentGroup"
				},
				"shiftplan_id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the Shiftplan"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-01T00:00:00.000+01:00",
					"description": "Date when the AssignmentGroup was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-02T00:00:00.000+01:00",
					"description": "Date when the AssignmentGroup was last updated"
				},
				"metadata": {
					"type": "string",
					"example": "{ foo: bar }",
					"description": "Metadata of the AssignmentGroup"
				}
			},
			"required": ["id", "name", "shiftplan_id"],
			"description": "V1_AssignmentGroupResponseEntity_AssignmentGroupResponse model"
		},
		"V1_AvailabilityAggregationIndexResponseEntity": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_AvailabilityAggregationResponseEntity" }
				}
			},
			"required": ["items"],
			"description": "V1_AvailabilityAggregationIndexResponseEntity model"
		},
		"V1_AvailabilityAggregationResponseEntity": {
			"type": "object",
			"properties": {
				"employment_id": { "type": "integer", "format": "int32", "example": 42 },
				"employee_last_name": { "type": "string", "example": "Parker" },
				"available_hours": { "type": "integer", "format": "int32", "example": 42 },
				"contract_hours": { "type": "integer", "format": "int32", "example": 42 },
				"can_manage": { "type": "boolean", "example": true }
			},
			"required": [
				"employment_id",
				"employee_last_name",
				"available_hours",
				"contract_hours",
				"can_manage"
			]
		},
		"V1_BackgroundJobIndexResponseEntity": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_BackgroundJobResponseEntity" }
				}
			},
			"required": ["items"],
			"description": "V1_BackgroundJobIndexResponseEntity model"
		},
		"V1_BackgroundJobResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"example": "b718c160-b3a0-4dc3-b16d-a9f3ec746010",
					"description": "Unique identifier of the background job"
				},
				"job_identifier": {
					"type": "string",
					"example": "17ccd223b3444e5adf1de103",
					"description": "JID that was created"
				},
				"type": {
					"type": "string",
					"example": "copy_shiftplan",
					"description": "Type of the background job"
				},
				"state": {
					"type": "string",
					"example": "finished",
					"description": "Possible states: pending, running, failed, finished"
				},
				"result": {
					"type": "object",
					"example": { "new_shiftplan_id": 42 },
					"description": "Result of the job"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_BackgroundJobErrorsEntity" },
					"description": "Errors"
				},
				"finished_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:20.970+01:00",
					"description": "Date when the background job was finished"
				},
				"started_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:52:21.156+01:00",
					"description": "Date when the background job was started"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-11T11:05:32.633+01:00",
					"description": "Date when the background job was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:21.030+01:00",
					"description": "Date when the background job was updated"
				}
			},
			"required": [
				"id",
				"job_identifier",
				"type",
				"state",
				"result",
				"errors",
				"finished_at",
				"started_at",
				"created_at",
				"updated_at"
			],
			"description": "V1_BackgroundJobResponseEntity model"
		},
		"V1_BackgroundJobErrorsEntity": {
			"type": "object",
			"properties": { "message": { "type": "string", "example": "company_id is missing" } },
			"required": ["message"]
		},
		"V1_BulkRequestResponseEntity_BulkRequestResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"example": "a84f2e09-f1f0-4d0c-b859-53742bc93549",
					"description": "Unique identifier of the BulkRequest"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-01T00:00:00.000+01:00",
					"description": "Date when the BulkRequest was created"
				},
				"total_entries": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Total entries of the payload"
				},
				"valid_entries": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Valid entries of the payload"
				},
				"failed_entries": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Failed entries of the payload"
				},
				"completed_entries": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Completed entries of the payload"
				},
				"in_progress_entries": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Entries of the payload that are in progress"
				},
				"state": {
					"type": "string",
					"enum": ["pending", "finished", "running"],
					"example": "finished",
					"description": "State of the bulk request."
				},
				"results": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_RequestResultResponseEntity" }
				}
			},
			"required": [
				"id",
				"created_at",
				"total_entries",
				"valid_entries",
				"failed_entries",
				"completed_entries",
				"in_progress_entries",
				"state",
				"results"
			],
			"description": "V1_BulkRequestResponseEntity_BulkRequestResponseEntity model"
		},
		"V1_RequestResultResponseEntity": {
			"type": "object",
			"properties": {
				"path": {
					"type": "string",
					"example": "/api/v1/shifts/:id",
					"description": "Path to the individual API call"
				},
				"method": {
					"type": "string",
					"enum": ["DELETE", "PATCH", "POST"],
					"example": "DELETE",
					"description": "HTTP methods. Currently only DELETE."
				},
				"data": { "type": "json", "example": { "id": 1 }, "description": "Data to change." },
				"background_job_id": {
					"type": "string",
					"example": "a84f2e09-f1f0-4d0c-b859-53742bc93549",
					"description": "ID of the background job of that entry. Used internally for debugging."
				},
				"state": {
					"type": "string",
					"enum": ["pending", "running", "failed", "finished"],
					"example": "finished",
					"description": "State of the background job. Used internally for debugging."
				},
				"result": {
					"type": "json",
					"example": { "state": "finished" },
					"description": "Result of the API call"
				},
				"errors": {
					"type": "json",
					"example": { "message": "Company not found" },
					"description": "Errors of the API call"
				}
			},
			"required": ["path", "method", "data", "result", "errors"]
		},
		"V1_BulkRequestResponseEntity_PayloadMustBeArrayErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "payload_must_be_an_array",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Payload must be an array of hashes",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "payload": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"],
			"description": "V1_BulkRequestResponseEntity_PayloadMustBeArrayErrorDetails model"
		},
		"V1_BulkRequestResponseEntity_MaximumAmountOfPayloadRequestsError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_BulkRequestResponseEntity_MaximumAmountOfPayloadRequestsErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_BulkRequestResponseEntity_MaximumAmountOfPayloadRequestsError model"
		},
		"V1_BulkRequestResponseEntity_MaximumAmountOfPayloadRequestsErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "over_rate_limit_for_bulk_requests",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "The maximum amount of payload for bulk requests is 100 requests",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "payload_count": 101 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_BulkRequestResponseEntity_InvalidPayloadError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_BulkRequestResponseEntity_InvalidPayloadErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_BulkRequestResponseEntity_InvalidPayloadError model"
		},
		"V1_BulkRequestResponseEntity_InvalidPayloadErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": { "type": "string", "example": "invalid_payload", "description": "Error key" },
				"message": {
					"type": "string",
					"example": "One or more of the requests is invalid",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "path": "api/v1/shifts/1", "action": "DELETE", "ids": [1, 2] },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_BulkRequestResponseEntity_IncorrectPayloadFormatError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_BulkRequestResponseEntity_IncorrectPayloadFormatErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_BulkRequestResponseEntity_IncorrectPayloadFormatError model"
		},
		"V1_BulkRequestResponseEntity_IncorrectPayloadFormatErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "incorrect_payload_format",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "This payload is not in the correct format",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "path": "api/v1/shifts/:id", "ids": [1, 2] },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_BulkRequestResponseEntity_NotAllowedChangeError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_BulkRequestResponseEntity_NotAllowedChangeErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_BulkRequestResponseEntity_NotAllowedChangeError model"
		},
		"V1_BulkRequestResponseEntity_NotAllowedChangeErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "not_allowed_change",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "This change is not allowed",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "path": "api/v1/shifties/1", "ids": [1, 2] },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_BulkRequestResponseEntity_MustBeTheSameEmploymentError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_BulkRequestResponseEntity_MustBeTheSameEmploymentErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_BulkRequestResponseEntity_MustBeTheSameEmploymentError model"
		},
		"V1_BulkRequestResponseEntity_MustBeTheSameEmploymentErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "must_be_the_same_employment_as_request",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Must have made the bulk request to access",
					"description": "Detailed error message"
				},
				"data": { "type": "json", "example": { "id": 1 }, "description": "Additional metadata" }
			},
			"required": ["error_key", "message"]
		},
		"V1_Calendars_Entities_AggregationIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Calendars_Entities_AggregationResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_Calendars_Entities_AggregationIndexResponse model"
		},
		"V1_Calendars_Entities_AggregationResponse": {
			"type": "object",
			"properties": {
				"working": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Number of employees working on this day"
				},
				"demand": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Number of shift slots on this day"
				},
				"absent": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Number of absent employees on this day (only accepted absences)"
				},
				"date": {
					"type": "string",
					"example": "2019-12-31",
					"description": "Date of aggregation in company time zone"
				}
			},
			"required": ["working", "demand", "absent", "date"]
		},
		"V1_CompanyResponseEntity_CompanyEntity": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 1, "description": "Company ID" },
				"name": { "type": "string", "example": "Shyftplan", "description": "Company name" },
				"description": {
					"type": "string",
					"example": "Shifts made smarter",
					"description": "Company name"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2022-01-01T01:00:00.000+01:00",
					"description": "Date when the company was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2022-01-01T01:00:00.000+01:00",
					"description": "Date when the company was last updated"
				},
				"image_uid": {
					"type": "string",
					"example": "2021/01/01/image.png",
					"description": "Company avatar URL"
				},
				"image_name": {
					"type": "string",
					"example": "image.png",
					"description": "Company avatar name"
				},
				"view_personal": {
					"type": "boolean",
					"example": true,
					"description": "Allow employees to see other employees in their positions"
				},
				"round_to": {
					"type": "integer",
					"format": "int32",
					"example": 5,
					"description": "Punch time settig to round working time"
				},
				"round_fair": {
					"type": "boolean",
					"example": false,
					"description": "Punch time settig to round working time for the employee's benefit"
				},
				"employee_shift": {
					"type": "boolean",
					"example": true,
					"description": "Can an employee create a shift by starting the punch time?"
				},
				"auto_punchout": {
					"type": "boolean",
					"example": true,
					"description": "Punch time settig to auto punch out after shift's end"
				},
				"punchout_hour": {
					"type": "integer",
					"format": "int32",
					"example": 4,
					"description": "After how many hours should the punch time be ended automatically?"
				},
				"edit_shift_payments": {
					"type": "boolean",
					"example": true,
					"description": "Users can submit a different shift payment"
				},
				"billing_method": {
					"type": "string",
					"example": "direct",
					"description": "Billing method"
				},
				"special_date_counted_off": {
					"type": "boolean",
					"example": true,
					"description": "Is the employee counted as off if only one of his locations has a special day?"
				},
				"probable_employees": {
					"type": "integer",
					"format": "int32",
					"example": 5,
					"description": "Number of probable employees"
				},
				"picture_data": { "$ref": "#/definitions/V1_CompanyResponseEntity_CompanyAvatar" },
				"survey_done_at": {
					"type": "string",
					"format": "date-time",
					"example": "2018-11-23T13:55:16.339+01:00",
					"description": "Last survey date"
				},
				"currency": { "type": "string", "example": "€", "description": "Company currency" },
				"time_zone": {
					"type": "string",
					"example": "Europe/Berlin",
					"description": "Company time zone"
				},
				"show_user_token": {
					"type": "boolean",
					"example": true,
					"description": "Show punchtime token on user modal"
				},
				"round_to_shift": {
					"type": "boolean",
					"example": true,
					"description": "Round start of punchtime to shift start "
				},
				"invoice_email": {
					"type": "string",
					"example": "invoices@shyftplan.com",
					"description": "Invoice email"
				},
				"assignment_group_enabled": { "type": "boolean", "example": true },
				"is_overassignment_allowed": { "type": "boolean", "example": true },
				"is_deactivated": { "type": "boolean", "example": false },
				"is_dashboard_messages_allowed": { "type": "boolean", "example": true },
				"is_billing_reminders_enabled": { "type": "boolean", "example": true },
				"is_money_shown_on_evaluation": { "type": "boolean", "example": true },
				"is_paypal_enabled": { "type": "boolean", "example": true },
				"default_language_id": { "type": "integer", "format": "int32", "example": 1 },
				"is_absence_edit_enabled": { "type": "boolean", "example": true },
				"is_employee_allowed_to_see_own_hour_account": { "type": "boolean", "example": false },
				"is_withdraw_absences_allowed": { "type": "boolean", "example": true },
				"withdraw_absences_duration": { "type": "integer", "format": "int32", "example": 14 },
				"is_tags_allowed": { "type": "boolean", "example": true },
				"can_employees_create_absences": { "type": "boolean", "example": true },
				"vat_id": { "type": "string", "example": "123" },
				"is_vat_id_validated": { "type": "boolean", "example": false },
				"can_all_stakeholders_see_max_money_warnings": { "type": "boolean", "example": true },
				"is_agency": { "type": "boolean", "example": false },
				"google_drive_url": { "type": "string", "example": "url.com/123" },
				"is_automatic_shift_change_notifications_enabled": { "type": "boolean", "example": false },
				"is_payslips_enabled": { "type": "boolean", "example": true },
				"is_absence_attachments_allowed": { "type": "boolean", "example": false },
				"default_evaluation_status": { "type": "string", "example": "no_evaluation" },
				"shift_swap_enabled": { "type": "boolean", "example": false },
				"swap_request_min_hour": { "type": "integer", "format": "int32", "example": 24 },
				"auto_accept_swap_requests": { "type": "string", "example": false },
				"is_pagination_enabled": { "type": "boolean", "example": false },
				"calendar_page_size": { "type": "integer", "format": "int32", "example": 1000 },
				"allow_ignore_conflicts_on_swap_enabled": { "type": "boolean", "example": false },
				"parent_id": { "type": "integer", "format": "int32", "example": 12 },
				"api_limit_per_minute": { "type": "integer", "format": "int32", "example": 10 },
				"api_requests_last_minute": { "type": "integer", "format": "int32", "example": 0 },
				"last_api_request_at": {
					"type": "string",
					"format": "date-time",
					"example": "2018-11-23T13:55:16.339+01:00"
				},
				"last_minutes_first_request_at": {
					"type": "string",
					"format": "date-time",
					"example": "2018-11-23T13:55:16.339+01:00"
				},
				"api_limit_per_hour": { "type": "integer", "format": "int32", "example": 600 },
				"invoice_company_name": { "type": "string", "example": "Shyftplan GmbH" },
				"cht_manager_id": { "type": "integer", "format": "int32", "example": 123 },
				"max_api_rpm": { "type": "integer", "format": "int32", "example": 10000 },
				"invoice_text": { "type": "string", "example": "Invoice text" },
				"debitor_number": { "type": "integer", "format": "int32", "example": 111 },
				"sso_enabled": { "type": "boolean", "example": false },
				"default_bring_shift_yearly_hours": { "type": "integer", "format": "int32", "example": 10 },
				"integrations_data": { "type": "string", "example": {} },
				"is_no_show_default": { "type": "boolean", "example": true },
				"account_level": { "type": "string", "example": "customer_account" },
				"onboarding_step": { "type": "integer", "format": "int32", "example": 5 },
				"is_new_hour_account_view": { "type": "boolean", "example": false },
				"is_bulk_changes_enabled": { "type": "boolean", "example": false },
				"shift_rotation_enabled": { "type": "boolean", "example": true },
				"auto_accept_shift_request_enabled": { "type": "boolean", "example": false },
				"auto_accept_shift_request_type": {
					"type": "string",
					"example": "disabled",
					"description": "Type of company auto accept shift request. (disabled, warning or enforced)"
				},
				"restricted_shift_presets_type": {
					"type": "string",
					"example": "disabled",
					"description": "Type of company restricted shift preset. (disabled, warning or enforced)"
				},
				"can_use_qualifications": { "type": "boolean", "example": true },
				"can_lock_shiftplans": { "type": "boolean", "example": true },
				"can_managers_evaluate_own_shifts": { "type": "boolean", "example": true },
				"can_use_employment_tags": { "type": "boolean", "example": true },
				"can_use_shift_presets": { "type": "boolean", "example": true },
				"can_use_bring_shifts": { "type": "boolean", "example": true },
				"can_fill_shiftplans": { "type": "boolean", "example": true },
				"can_manage_availabilities": { "type": "boolean", "example": false },
				"minimum_break_settings": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_CompanyResponseEntity_CompanyMinimumBreakSettings" }
				},
				"automation_settings": {
					"$ref": "#/definitions/V1_CompanyResponseEntity_CompanyAutomationSettings"
				},
				"chat_settings": { "$ref": "#/definitions/V1_CompanyResponseEntity_CompanyChatSettings" }
			},
			"required": ["id", "name", "description", "minimum_break_settings"],
			"description": "V1_CompanyResponseEntity_CompanyEntity model"
		},
		"V1_CompanyResponseEntity_CompanyAvatar": {
			"type": "object",
			"properties": {
				"picture_large": { "type": "string", "example": "image.jpg" },
				"picture_small": { "type": "string", "example": "image.jpg" },
				"picture_medium": { "type": "string", "example": "image.jpg" }
			},
			"required": ["picture_large", "picture_small", "picture_medium"]
		},
		"V1_CompanyResponseEntity_CompanyMinimumBreakSettings": {
			"type": "object",
			"properties": {
				"force_type": {
					"type": "string",
					"example": "enforced",
					"description": "Force type of company minimum break setting (disabled, warning or enforced)"
				},
				"rules": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_CompanyResponseEntity_CompanyMinimumBreakSetting" }
				}
			},
			"required": ["rules"]
		},
		"V1_CompanyResponseEntity_CompanyMinimumBreakSetting": {
			"type": "object",
			"properties": {
				"total_minutes": {
					"type": "integer",
					"format": "int32",
					"example": 480,
					"description": "Minimum duration of shift for rule to be applied"
				},
				"total_break_minutes": {
					"type": "integer",
					"format": "int32",
					"example": 60,
					"description": "Minimum break duration"
				}
			}
		},
		"V1_CompanyResponseEntity_CompanyAutomationSettings": {
			"type": "object",
			"properties": {
				"conflicts": {
					"type": "object",
					"example": {
						"shifts_collision": true,
						"absences_collision": true,
						"maximum_working_hours": true,
						"maximum_consecutive_working_days": true,
						"minimum_rest": true,
						"maximum_earning": true,
						"outside_employment_period": true,
						"restricted_shift_presets": true,
						"unavailable": true,
						"not_available": true,
						"not_in_shift_rotation": true,
						"only_native_assignments": true
					}
				},
				"rules": {
					"type": "object",
					"example": {
						"less_mistakes_left": 100,
						"less_qualified_left": 200,
						"first_in_row": 10,
						"consistent_position": 100,
						"rotate_shifts": 0,
						"rotate_positions": 0,
						"consistent_time": 90,
						"availabilities": 200,
						"qualifications": 400,
						"contract_type": 300,
						"random": 5
					}
				},
				"employment_tags": {
					"type": "object",
					"example": { "included_only": [1], "excluded": [99] }
				}
			},
			"required": ["conflicts", "rules", "employment_tags"]
		},
		"V1_CompanyResponseEntity_CompanyChatSettings": {
			"type": "object",
			"properties": {
				"is_chat_allowed": { "type": "boolean", "example": true },
				"employment_chats": {
					"type": "object",
					"example": {
						"enabled": true,
						"employee_can_chat_to": {
							"anyone": false,
							"same_location": true,
							"same_locations_position": false
						},
						"stakeholder_can_chat_to": {
							"anyone": true,
							"employees_in_location": false,
							"employees_in_locations_position": false,
							"stakeholders_in_location": false,
							"stakeholders_in_locations_position": false
						}
					}
				}
			},
			"required": ["employment_chats"]
		},
		"V1_CompanyUiSettingEntity": {
			"type": "object",
			"properties": {
				"company_id": { "type": "integer", "format": "int32", "example": 12 },
				"setting": {
					"type": "json",
					"example": {
						"filters": {
							"join_shift_request": true,
							"leave_shift_request": false,
							"replace_request": false
						}
					}
				},
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["company_id", "setting", "created_at", "updated_at"],
			"description": "V1_CompanyUiSettingEntity model"
		},
		"V1_EvaluationResponseEntity_EmployeeEvaluationResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 21,
					"description": "Unique identifier of the EmployeeEvaluation"
				},
				"evaluation_starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-01-01T14:00:00.000+01:00",
					"description": "Evaluated date when the Shift was started"
				},
				"evaluation_ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-01-01T22:00:00.000+01:00",
					"description": "Evaluated date when the Shift has ended"
				},
				"evaluation_break": {
					"type": "integer",
					"format": "int32",
					"example": 20,
					"description": "Evaluated break duration in minutes"
				},
				"evaluation_untimed_breaks": {
					"type": "integer",
					"format": "int32",
					"example": 20,
					"description": "Evaluated untimed breaks duration in minutes"
				},
				"note": {
					"type": "integer",
					"format": "int32",
					"example": "Work hard, party hard",
					"description": "Evaluation note by employee"
				},
				"payments": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_PaymentsResponseEntity" }
				},
				"evaluation_tag_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2],
					"description": "IDs of tags assigned to the evaluation"
				},
				"evaluation_breaks": { "type": "string" }
			},
			"required": [
				"id",
				"evaluation_starts_at",
				"evaluation_ends_at",
				"evaluation_break",
				"evaluation_untimed_breaks",
				"note",
				"payments"
			],
			"description": "V1_EvaluationResponseEntity_EmployeeEvaluationResponseEntity model"
		},
		"V1_PaymentsResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 40,
					"description": "Unique identifier of the Payment"
				},
				"type": { "type": "string", "example": "AdminPayment", "description": "Type of Payment" },
				"value": {
					"type": "number",
					"format": "float",
					"example": 12.05,
					"description": "Value of PaygradeType"
				},
				"paygrade_type_id": {
					"type": "integer",
					"format": "int32",
					"example": 13,
					"description": "ID of the associated PaygradeType"
				},
				"is_edited": {
					"type": "boolean",
					"example": false,
					"description": "Is the Payment editable"
				},
				"inherited_from": {
					"type": "integer",
					"format": "int32",
					"description": "On which level has the Payment been created (Company, Position, employee)?"
				},
				"display_name": {
					"type": "string",
					"example": "regular, hourly",
					"description": "Combined text for paygrade type and paygrade name"
				},
				"sum_with_shift": {
					"type": "number",
					"format": "float",
					"example": 8.2,
					"description": "Total calculated sum"
				},
				"paygrade_type": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int32",
							"example": 12,
							"description": "Unique identifier of the PaygradeType"
						},
						"name": {
							"type": "string",
							"example": "regular",
							"description": "Name of the PaygradeType"
						},
						"pay_type": {
							"type": "string",
							"example": "hourly",
							"description": "Type of payment (fixed/bonus fixed/bonus percentage/hourly)"
						}
					},
					"required": ["id", "name", "pay_type"]
				},
				"child_payments": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ChildPaymentsResponseEntity" }
				}
			},
			"required": [
				"id",
				"type",
				"value",
				"paygrade_type_id",
				"is_edited",
				"inherited_from",
				"display_name",
				"sum_with_shift",
				"child_payments"
			]
		},
		"V1_ChildPaymentsResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Unique identifier of the Evaluation"
				},
				"value": { "type": "string", "example": 1, "description": "Value of PaygradeType" },
				"paygrade_type_id": {
					"type": "integer",
					"format": "int32",
					"example": 12,
					"description": "ID of the associated PaygradeType"
				},
				"payment_id": {
					"type": "integer",
					"format": "int32",
					"example": 12,
					"description": "ID of the associated Payment"
				},
				"is_edited": {
					"type": "boolean",
					"example": false,
					"description": "Is the Payment editable"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was last updated"
				},
				"sum_with_shift": {
					"type": "number",
					"format": "float",
					"example": 8.2,
					"description": "Total calculated sum"
				},
				"paygrade_type": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int32",
							"example": 12,
							"description": "Unique identifier of the PaygradeType"
						},
						"name": {
							"type": "string",
							"example": "regular",
							"description": "Name of the PaygradeType"
						},
						"pay_type": {
							"type": "string",
							"example": "hourly",
							"description": "Type of payment (fixed/bonus fixed/bonus percentage/hourly)"
						}
					},
					"required": ["id", "name", "pay_type"]
				}
			},
			"required": [
				"id",
				"value",
				"paygrade_type_id",
				"payment_id",
				"is_edited",
				"created_at",
				"updated_at",
				"sum_with_shift"
			]
		},
		"V1_Entities_InvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_InvalidErrorDetails" }
				}
			},
			"required": ["message", "errors"],
			"description": "V1_Entities_InvalidError model"
		},
		"V1_Entities_InvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "invalid_error_key",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Invalid error",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "invalid_enitity_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_Entities_EvaluationTagNotFoundError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Not found",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_EvaluationTagNotFoundErrorDetails" }
				}
			},
			"required": ["message", "errors"],
			"description": "V1_Entities_EvaluationTagNotFoundError model"
		},
		"V1_Entities_EvaluationTagNotFoundErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "evaluation_tag_not_found",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Evaluation Tag not found",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "evaluation_tag_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_EvaluationBreakDurationInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreakDurationInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_EvaluationBreakDurationInvalidError model"
		},
		"V1_EvaluationResponseEntity_EvaluationBreakDurationInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "sum_of_duration_of_evaluation_breaks_higher_than_evaluation_break",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Sum of duration of all evaluation_breaks cannot be bigger than evaluation_break",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "evaluation_breaks": [], "evaluation_break": 100 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_EvaluationBreaksOverlapInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreaksOverlapInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_EvaluationBreaksOverlapInvalidError model"
		},
		"V1_EvaluationResponseEntity_EvaluationBreaksOverlapInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "overlapping_evaluation_breaks",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "There must be no overlapping breaks in Evaluation",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "breaks": [] },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_EvaluationBreakInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationBreakInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_EvaluationBreakInvalidError model"
		},
		"V1_EvaluationResponseEntity_EvaluationBreakInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "invalid_starts_at_ends_at",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Invalid evaluation break",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "starts_at": "", "ends_at": "" },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_Entities_EvaluationTagInvalidContextError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_EvaluationTagInvalidContextErrorDetails" }
				}
			},
			"required": ["message", "errors"],
			"description": "V1_Entities_EvaluationTagInvalidContextError model"
		},
		"V1_Entities_EvaluationTagInvalidContextErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "incorrect_evaluation_tag_context",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Incorrect evaluation tag context",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "evaluation_tag_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_PaymentPaygradeTypeIdInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentPaygradeTypeIdInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_PaymentPaygradeTypeIdInvalidError model"
		},
		"V1_EvaluationResponseEntity_PaymentPaygradeTypeIdInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "invalid_child_payment_paygrade_type_id",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Paygrade type id of child payment cannot be same as parent",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "paygrade_type_id": 1, "value": 100, "parent_paygrade_type_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_PaymentValueInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentValueInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_PaymentValueInvalidError model"
		},
		"V1_EvaluationResponseEntity_PaymentValueInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "invalid_payment_value",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Invalid payment value",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "paygrade_type_id": 1, "value": "nil" },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_EmployeePaymentTypeAlreadyPresentInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_EmployeePaymentTypeAlreadyPresentInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_EmployeePaymentTypeAlreadyPresentInvalidError model"
		},
		"V1_EvaluationResponseEntity_EmployeePaymentTypeAlreadyPresentInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "employee_payments.child_payments.paygrade_type_id_already present",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "employee_payments.child_payments.paygrade_type_id already present",
					"description": "Detailed error message"
				},
				"data": { "type": "json", "example": {}, "description": "Additional metadata" }
			},
			"required": ["error_key", "message"]
		},
		"V1_Entities_MinimumBreakConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "break time for shifts longer than ${shift_duration} minutes should be at least ${min_break_time} minutes",
					"description": "Always break time for shifts longer than ${shift_duration} minutes should be at least ${min_break_time} minutes"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_MinimumBreakConflict_MinimumBreakConflictDetails"
				}
			},
			"required": ["message", "details"],
			"description": "V1_Entities_MinimumBreakConflict model"
		},
		"V1_Entities_MinimumBreakConflict_MinimumBreakConflictDetails": {
			"type": "object",
			"properties": {
				"shift_duration": {
					"type": "number",
					"example": 15,
					"description": "Requested duration in minutes"
				},
				"min_break_time": {
					"type": "number",
					"example": 30,
					"description": "Minimum allowed break in minutes"
				}
			},
			"required": ["shift_duration", "min_break_time"]
		},
		"V1_EvaluationResponseEntity_EvaluationResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 21,
					"description": "Unique identifier of the Evaluation"
				},
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 23,
					"description": "ID of the associated PaygradeType"
				},
				"shift_id": {
					"type": "integer",
					"format": "int32",
					"example": 32,
					"description": "ID of the associated Shift"
				},
				"locations_position_id": {
					"type": "integer",
					"format": "int32",
					"example": 31,
					"description": "ID of the associated LocationsPosition"
				},
				"shiftplan_id": {
					"type": "integer",
					"format": "int32",
					"example": 12,
					"description": "ID of the associated Shiftplan"
				},
				"location_id": {
					"type": "integer",
					"format": "int32",
					"example": 18,
					"description": "ID of the associated Location"
				},
				"position_id": {
					"type": "integer",
					"format": "int32",
					"example": 15,
					"description": "ID of the associated Position"
				},
				"user_id": {
					"type": "integer",
					"format": "int32",
					"example": 32,
					"description": "ID of the associated User"
				},
				"first_name": {
					"type": "string",
					"example": "Max",
					"description": "First name of the employee"
				},
				"last_name": {
					"type": "string",
					"example": "Mustermann",
					"description": "Last name of the employee"
				},
				"evaluation_starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-01-01T14:00:00.000+01:00",
					"description": "Evaluated date when the Shift was started"
				},
				"evaluation_ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-01-01T22:00:00.000+01:00",
					"description": "Evaluated date when the Shift has ended"
				},
				"evaluation_break": {
					"type": "integer",
					"format": "int32",
					"example": 20,
					"description": "Evaluated break duration in minutes"
				},
				"evaluation_untimed_breaks": {
					"type": "integer",
					"format": "int32",
					"example": 20,
					"description": "Evaluated untimed breaks duration in minutes"
				},
				"evaluation_duration": {
					"type": "number",
					"format": "float",
					"example": 480.0,
					"description": "Evaluated duration of the Shift"
				},
				"admin_evaluation_id": {
					"type": "integer",
					"format": "int32",
					"example": 32,
					"description": "ID of the associated AdminEvaluation"
				},
				"state": {
					"type": "string",
					"example": "done evaluation",
					"description": "State of the Evaluation"
				},
				"shift_note": {
					"type": "integer",
					"format": "int32",
					"example": "This is an early shift",
					"description": "Note regarding the Shift"
				},
				"admin_evaluation_note": {
					"type": "string",
					"example": "Everyone lets do our best",
					"description": "Evaluation note by stakeholder"
				},
				"employee_evaluation_note": {
					"type": "integer",
					"format": "int32",
					"example": "Work hard, party hard",
					"description": "Evaluation note by employee"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was last updated"
				},
				"pending_employee_evaluation": {
					"type": "boolean",
					"example": false,
					"description": "Evaluation has pending employment response"
				},
				"position": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"example": "Maschine 1",
							"description": "Name of the Position"
						}
					},
					"required": ["name"]
				},
				"location": {
					"type": "object",
					"properties": {
						"name": { "type": "string", "example": "Berlin", "description": "Name of the Location" }
					},
					"required": ["name"]
				},
				"shift": {
					"type": "object",
					"properties": {
						"starts_at": {
							"type": "string",
							"format": "date-time",
							"example": "2021-01-01T14:00:00.000+01:00",
							"description": "Date when the Shift starts"
						},
						"ends_at": {
							"type": "string",
							"format": "date-time",
							"example": "2021-01-01T22:00:00.000+01:00",
							"description": "Date when the Shift ends"
						},
						"break_time": {
							"type": "integer",
							"format": "int32",
							"example": 0,
							"description": "Duration of breaks in minutes"
						}
					},
					"required": ["starts_at", "ends_at", "break_time"]
				},
				"total_payment": { "type": "integer", "format": "int32", "example": 2, "description": "" },
				"payments": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_PaymentsResponseEntity" }
				},
				"evaluation_tag_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2],
					"description": "IDs of tags assigned to the evaluation"
				},
				"evaluation_breaks": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_EvaluationBreakResponseEntity" }
				}
			},
			"required": [
				"id",
				"employment_id",
				"shift_id",
				"locations_position_id",
				"shiftplan_id",
				"location_id",
				"position_id",
				"user_id",
				"first_name",
				"last_name",
				"evaluation_starts_at",
				"evaluation_ends_at",
				"evaluation_break",
				"evaluation_untimed_breaks",
				"evaluation_duration",
				"admin_evaluation_id",
				"state",
				"shift_note",
				"admin_evaluation_note",
				"employee_evaluation_note",
				"created_at",
				"updated_at",
				"pending_employee_evaluation",
				"total_payment",
				"payments",
				"evaluation_breaks"
			],
			"description": "V1_EvaluationResponseEntity_EvaluationResponseEntity model"
		},
		"V1_EvaluationBreakResponseEntity": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id"],
			"description": "V1_EvaluationBreakResponseEntity model"
		},
		"V1_EmployeeEvaluations_Entities_SuccessfullyDeletedResponse": {
			"type": "object",
			"properties": {
				"success": { "type": "string", "example": true, "description": "Always true" }
			},
			"required": ["success"],
			"description": "V1_EmployeeEvaluations_Entities_SuccessfullyDeletedResponse model"
		},
		"V1_EmployeeEvaluations_Entities_EmployeeEvaluationTagsResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 40,
					"description": "Unique identifier of the Evaluation Tag"
				},
				"evaluation_id": {
					"type": "integer",
					"format": "int32",
					"example": 40,
					"description": "Unique identifier of the Evaluation"
				},
				"tag_id": {
					"type": "integer",
					"format": "int32",
					"example": 40,
					"description": "Unique identifier of the Tag"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2023-10-09T14:41:36.633+00:00",
					"description": "Creation timestamp"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2023-10-09T14:41:36.633+00:00",
					"description": "Last update timestamp"
				}
			},
			"required": ["id", "evaluation_id", "tag_id", "created_at", "updated_at"],
			"description": "V1_EmployeeEvaluations_Entities_EmployeeEvaluationTagsResponse model"
		},
		"V1_EmployeeEvaluations_Entities_IncorrectTagContextError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Tag does not have the correct context",
					"description": "Always 'Tag does not have type 'EvaluationTag''"
				}
			},
			"required": ["error"],
			"description": "V1_EmployeeEvaluations_Entities_IncorrectTagContextError model"
		},
		"V1_EmployeeEvaluations_Entities_TagAlreadyOnEvaluationError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Tag is already on evaluation",
					"description": "Always 'Tag is already on evaluation'"
				}
			},
			"required": ["error"],
			"description": "V1_EmployeeEvaluations_Entities_TagAlreadyOnEvaluationError model"
		},
		"V1_EmployeeEvaluations_Entities_EmployeeEvaluationTagsIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EmployeeEvaluations_Entities_EmployeeEvaluationTagsResponse"
					}
				},
				"total": { "type": "integer", "format": "int32", "example": 1 }
			},
			"required": ["items", "total"],
			"description": "V1_EmployeeEvaluations_Entities_EmployeeEvaluationTagsIndexResponse model"
		},
		"V1_EmployeeEvaluations_Entities_PaymentsResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 40,
					"description": "Unique identifier of the Payment"
				},
				"type": { "type": "string", "example": "AdminPayment", "description": "Type of Payment" },
				"value": {
					"type": "number",
					"format": "float",
					"example": 12.05,
					"description": "Value of PaygradeType"
				},
				"paygrade_type_id": {
					"type": "integer",
					"format": "int32",
					"example": 13,
					"description": "ID of the associated PaygradeType"
				},
				"is_edited": {
					"type": "boolean",
					"example": false,
					"description": "Is the Payment editable"
				},
				"inherited_from": {
					"type": "string",
					"enum": ["employmentsposition", "employment", "shift", "position", "company"],
					"example": "company",
					"description": "On which level has the Payment been created (Company, Position, employee)?"
				},
				"display_name": {
					"type": "string",
					"example": "regular, hourly",
					"description": "Combined text for paygrade type and paygrade name"
				},
				"sum_with_shift": {
					"type": "integer",
					"format": "int32",
					"example": 8,
					"description": "Length of Shift in minutes"
				},
				"paygrade_type": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int32",
							"example": 12,
							"description": "Unique identifier of the PaygradeType"
						},
						"name": {
							"type": "string",
							"example": "regular",
							"description": "Name of the PaygradeType"
						},
						"pay_type": {
							"type": "string",
							"enum": ["fixed", "hourly", "bonus_fixed", "bonus_percentage"],
							"example": "hourly",
							"description": "Type of payment (fixed/bonus fixed/bonus percentage/hourly)"
						}
					},
					"required": ["id", "name", "pay_type"]
				},
				"child_payments": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_EmployeeEvaluations_Entities_ChildPaymentsResponse" }
				}
			},
			"required": [
				"id",
				"type",
				"value",
				"paygrade_type_id",
				"is_edited",
				"inherited_from",
				"display_name",
				"sum_with_shift",
				"child_payments"
			],
			"description": "V1_EmployeeEvaluations_Entities_PaymentsResponse model"
		},
		"V1_EmployeeEvaluations_Entities_ChildPaymentsResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Unique identifier of the Evaluation"
				},
				"value": {
					"type": "number",
					"format": "float",
					"example": 1.0,
					"description": "Value of PaygradeType"
				},
				"paygrade_type_id": {
					"type": "integer",
					"format": "int32",
					"example": 12,
					"description": "ID of the associated PaygradeType"
				},
				"payment_id": {
					"type": "integer",
					"format": "int32",
					"example": 12,
					"description": "ID of the associated Payment"
				},
				"is_edited": {
					"type": "boolean",
					"example": false,
					"description": "Is the Payment editable"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was last updated"
				},
				"sum_with_shift": {
					"type": "integer",
					"format": "int32",
					"example": 8,
					"description": "Length of Shift in minutes"
				},
				"paygrade_type": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int32",
							"example": 12,
							"description": "Unique identifier of the PaygradeType"
						},
						"name": {
							"type": "string",
							"example": "regular",
							"description": "Name of the PaygradeType"
						},
						"pay_type": {
							"type": "string",
							"enum": ["fixed", "hourly", "bonus_fixed", "bonus_percentage"],
							"example": "hourly",
							"description": "Type of payment (fixed/bonus fixed/bonus percentage/hourly)"
						}
					},
					"required": ["id", "name", "pay_type"]
				}
			},
			"required": [
				"id",
				"value",
				"paygrade_type_id",
				"payment_id",
				"is_edited",
				"created_at",
				"updated_at",
				"sum_with_shift"
			]
		},
		"V1_EmployeeEvaluations_Entities_PaymentNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Payment not found",
					"description": "Always 'Payment not found'"
				}
			},
			"required": ["error"],
			"description": "V1_EmployeeEvaluations_Entities_PaymentNotFoundError model"
		},
		"V1_EmployeeEvaluations_Entities_ChildPaymentNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Child Payment not found",
					"description": "Always 'Child Payment not found'"
				}
			},
			"required": ["error"],
			"description": "V1_EmployeeEvaluations_Entities_ChildPaymentNotFoundError model"
		},
		"V1_EmployeeEvaluations_Entities_PaygradeTypeNotBonusError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Paygrade Type is not Bonus",
					"description": "Always 'Paygrade Type is not Bonus'"
				}
			},
			"required": ["error"],
			"description": "V1_EmployeeEvaluations_Entities_PaygradeTypeNotBonusError model"
		},
		"V1_EmployeeEvaluations_Entities_PaygradeTypeNotRegularError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Paygrade Type is not Regular",
					"description": "Always 'Paygrade Type is not Regular'"
				}
			},
			"required": ["error"],
			"description": "V1_EmployeeEvaluations_Entities_PaygradeTypeNotRegularError model"
		},
		"V1_EmployeeEvaluations_Entities_ParentPaymentNotRegularError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Parent Payment is not regular",
					"description": "Always 'Parent Payment is not regular'"
				}
			},
			"required": ["error"],
			"description": "V1_EmployeeEvaluations_Entities_ParentPaymentNotRegularError model"
		},
		"V1_EmployeeEvaluations_Entities_PaymentsIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_EmployeeEvaluations_Entities_PaymentsResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 1 }
			},
			"required": ["items", "total"],
			"description": "V1_EmployeeEvaluations_Entities_PaymentsIndexResponse model"
		},
		"V2_EmploymentResponseEntity_EmploymentResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 1 },
				"company_id": { "type": "integer", "format": "int32", "example": 1 },
				"user_id": { "type": "integer", "format": "int32", "example": 1 },
				"is_employee": { "type": "boolean", "example": "true" },
				"is_stakeholder": { "type": "boolean", "example": "true" },
				"first_name": { "type": "string" },
				"last_name": { "type": "string" },
				"picture_data": { "type": "json", "example": "null" },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"is_paid_monthly": { "type": "boolean", "example": false },
				"billing_type_id": { "type": "integer", "format": "int32", "example": 42 },
				"hour_enabled": { "type": "boolean", "example": false },
				"invitation_state": { "type": "string" },
				"user_token": { "type": "integer", "format": "int32", "example": 42 },
				"exit_date": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"exit_month_payed_partially": { "type": "boolean", "example": false },
				"language_id": { "type": "integer", "format": "int32", "example": 42 },
				"max_vacation_days": { "type": "string" },
				"maximum_money": { "type": "integer", "format": "int32", "example": 42 },
				"maximum_money_enabled": { "type": "boolean", "example": false },
				"staff_number": { "type": "integer", "format": "int32", "example": 42 },
				"monthly_pay": { "type": "integer", "format": "int32", "example": 42 },
				"note": { "type": "string" },
				"phone_number": { "type": "string" },
				"qualification_ids": { "type": "integer", "format": "int32", "example": [1, 2] },
				"name": { "type": "string" },
				"email": { "type": "string" },
				"punch_timing_live_info": { "type": "json", "example": "null" },
				"staff_shift": { "type": "string" },
				"vacation_hours": { "type": "integer", "format": "int32", "example": 42 },
				"employment_work_hour": { "type": "json", "example": "null" },
				"certified_at": { "type": "string", "format": "date", "example": "2019-12-31" },
				"master_locations_position_id": {
					"type": "integer",
					"format": "int32",
					"example": 123,
					"description": "Master locations position ID"
				}
			},
			"required": ["id", "company_id", "user_id", "is_employee", "is_stakeholder"],
			"description": "V2_EmploymentResponseEntity_EmploymentResponse model"
		},
		"V2_EmploymentResponseEntity_DuplicateEmploymentWithSameCompanyIdResponse": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Always 'invalid'"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V2_EmploymentResponseEntity_EmploymentWithCompanyIdAlreadyExistErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V2_EmploymentResponseEntity_DuplicateEmploymentWithSameCompanyIdResponse model"
		},
		"V2_EmploymentResponseEntity_EmploymentWithCompanyIdAlreadyExistErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "company_id_taken",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "company_id has already been taken",
					"description": "Detailed error message"
				},
				"data": { "type": "json", "example": { "value": 1 }, "description": "Additional metadata" }
			},
			"required": ["error_key", "message"]
		},
		"V2_EmploymentResponseEntity_DuplicateEmploymentWithSameUserIdResponse": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Always 'invalid'"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V2_EmploymentResponseEntity_EmploymentWithUserIdAlreadyExistErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V2_EmploymentResponseEntity_DuplicateEmploymentWithSameUserIdResponse model"
		},
		"V2_EmploymentResponseEntity_EmploymentWithUserIdAlreadyExistErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": { "type": "string", "example": "user_id_taken", "description": "Error key" },
				"message": {
					"type": "string",
					"example": "user_id has already been taken",
					"description": "Detailed error message"
				},
				"data": { "type": "json", "example": { "value": 53 }, "description": "Additional metadata" }
			},
			"required": ["error_key", "message"]
		},
		"V1_EmploymentResponseEntity_DefaultEmploymentsResponseEntity": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EmploymentResponseEntity_DefaultEmploymentResponseEntity"
					}
				},
				"current_page": { "type": "integer", "format": "int32", "example": 42 },
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "current_page", "total"],
			"description": "V1_EmploymentResponseEntity_DefaultEmploymentsResponseEntity model"
		},
		"V1_EmploymentResponseEntity_DefaultEmploymentResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 10,
					"description": "Employment id"
				},
				"company_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Company id of the employment"
				},
				"user_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "User id of the employment"
				},
				"is_employee": {
					"type": "boolean",
					"example": true,
					"description": "To know whether the employment is an employee or not"
				},
				"is_stakeholder": {
					"type": "boolean",
					"example": false,
					"description": "To know whether the employment is a stakeholder or not"
				},
				"first_name": {
					"type": "string",
					"example": "John",
					"description": "Employment's first name"
				},
				"last_name": {
					"type": "string",
					"example": "Doe",
					"description": "Employment's last name"
				},
				"picture_data": { "$ref": "#/definitions/V1_EmploymentResponseEntity_EmploymentAvatar" },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"hour_enabled": { "type": "boolean", "example": false },
				"invitation_state": { "type": "string" },
				"user_token": { "type": "integer", "format": "int32", "example": 42 },
				"exit_date": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"language_id": { "type": "integer", "format": "int32", "example": 42 },
				"max_vacation_days": { "type": "string" },
				"staff_number": { "type": "integer", "format": "int32", "example": 42 },
				"note": { "type": "string" },
				"phone_number": { "type": "string" },
				"qualification_ids": { "type": "integer", "format": "int32", "example": [1, 2] },
				"email": { "type": "string" },
				"punch_timing_live_info": { "type": "json", "example": "null" },
				"employment_work_hour": { "type": "json", "example": "null" },
				"restricted_shift_preset_ids": { "type": "integer", "format": "int32", "example": [1, 2] },
				"tag_ids": { "type": "integer", "format": "int32", "example": [] },
				"certified_at": { "type": "string", "format": "date", "example": "2019-12-31" },
				"master_locations_position_id": {
					"type": "integer",
					"format": "int32",
					"example": 123,
					"description": "Master locations position ID"
				}
			},
			"required": [
				"id",
				"company_id",
				"user_id",
				"is_employee",
				"is_stakeholder",
				"first_name",
				"last_name"
			],
			"description": "V1_EmploymentResponseEntity_DefaultEmploymentResponseEntity model"
		},
		"V1_EmploymentResponseEntity_EmploymentAvatar": {
			"type": "object",
			"properties": {
				"picture_large": { "type": "string", "example": "image.jpg" },
				"picture_small": { "type": "string", "example": "image.jpg" },
				"picture_medium": { "type": "string", "example": "image.jpg" },
				"background_color": { "type": "string", "example": "#ffffff" }
			},
			"required": ["picture_large", "picture_small", "picture_medium", "background_color"]
		},
		"V1_EmploymentResponseEntity_PaymentViewableEmploymentsResponseEntity": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EmploymentResponseEntity_PaymentViewableEmploymentResponseEntity"
					}
				},
				"current_page": { "type": "integer", "format": "int32", "example": 42 },
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "current_page", "total"],
			"description": "V1_EmploymentResponseEntity_PaymentViewableEmploymentsResponseEntity model"
		},
		"V1_EmploymentResponseEntity_PaymentViewableEmploymentResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 10,
					"description": "Employment id"
				},
				"company_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Company id of the employment"
				},
				"user_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "User id of the employment"
				},
				"is_employee": {
					"type": "boolean",
					"example": true,
					"description": "To know whether the employment is an employee or not"
				},
				"is_stakeholder": {
					"type": "boolean",
					"example": false,
					"description": "To know whether the employment is a stakeholder or not"
				},
				"first_name": {
					"type": "string",
					"example": "John",
					"description": "Employment's first name"
				},
				"last_name": {
					"type": "string",
					"example": "Doe",
					"description": "Employment's last name"
				},
				"picture_data": { "$ref": "#/definitions/V1_EmploymentResponseEntity_EmploymentAvatar" },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"hour_enabled": { "type": "boolean", "example": false },
				"invitation_state": { "type": "string" },
				"user_token": { "type": "integer", "format": "int32", "example": 42 },
				"exit_date": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"language_id": { "type": "integer", "format": "int32", "example": 42 },
				"max_vacation_days": { "type": "string" },
				"staff_number": { "type": "integer", "format": "int32", "example": 42 },
				"note": { "type": "string" },
				"phone_number": { "type": "string" },
				"qualification_ids": { "type": "integer", "format": "int32", "example": [1, 2] },
				"email": { "type": "string" },
				"punch_timing_live_info": { "type": "json", "example": "null" },
				"employment_work_hour": { "type": "json", "example": "null" },
				"restricted_shift_preset_ids": { "type": "integer", "format": "int32", "example": [1, 2] },
				"tag_ids": { "type": "integer", "format": "int32", "example": [] },
				"certified_at": { "type": "string", "format": "date", "example": "2019-12-31" },
				"master_locations_position_id": {
					"type": "integer",
					"format": "int32",
					"example": 123,
					"description": "Master locations position ID"
				},
				"billing_type_id": { "type": "integer", "format": "int32", "example": 1 },
				"exit_month_payed_partially": { "type": "boolean", "example": false },
				"is_paid_monthly": { "type": "boolean", "example": false },
				"maximum_money": { "type": "integer", "format": "int32", "example": 42 },
				"maximum_money_enabled": { "type": "boolean", "example": false },
				"monthly_pay": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": [
				"id",
				"company_id",
				"user_id",
				"is_employee",
				"is_stakeholder",
				"first_name",
				"last_name"
			],
			"description": "V1_EmploymentResponseEntity_PaymentViewableEmploymentResponseEntity model"
		},
		"V1_EmploymentResponseEntity_EmploymentInfoResponseEntity": {
			"type": "object",
			"properties": {
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Employement ID"
				},
				"is_monthly": {
					"type": "boolean",
					"example": false,
					"description": "Indicates if employee has monthly or weekly contracted minutes"
				},
				"contract_minutes": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates how many minutes employee contacted to work"
				},
				"scheduled_minutes": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates for how many minutes employee is already scheduled"
				},
				"worked_minutes": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates how many minutes are in evaluations and absences"
				},
				"hour_account_hours": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates current value of hour account"
				},
				"maximum_money": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates for how much money employee can be scheduled"
				},
				"scheduled_money": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates for how much money employee is already scheduled"
				},
				"bring_shift_hours": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates how many bring shift hours employee can have"
				},
				"bring_shift_hours_used": {
					"type": "number",
					"format": "float",
					"example": 10.5,
					"description": "Indicates how many bring shift hours are used"
				}
			},
			"required": [
				"employment_id",
				"is_monthly",
				"contract_minutes",
				"scheduled_minutes",
				"worked_minutes",
				"hour_account_hours",
				"maximum_money",
				"scheduled_money",
				"bring_shift_hours",
				"bring_shift_hours_used"
			],
			"description": "V1_EmploymentResponseEntity_EmploymentInfoResponseEntity model"
		},
		"V1_EmploymentResponseEntity_PotentialConflictsResponseEntity": {
			"type": "object",
			"properties": {
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Employement ID"
				},
				"shift_preset_id": {
					"type": "integer",
					"format": "int32",
					"example": 4212,
					"description": "ShiftPreset ID"
				},
				"conflicts": {
					"type": "Object",
					"example": [
						{
							"conflict_type": "maximum_consecutive_working_days",
							"message": "the employment will have more consecutive working days than planned",
							"details": {},
							"ignorable": true
						},
						{
							"conflict_type": "minimum_rest",
							"message": "employee must have minimum rest of ${rest_rule.rest_minutes} minutes before/after this shift",
							"details": {},
							"ignorable": false
						},
						{
							"conflict_type": "shifts_collision",
							"message": "the employee has other shifts at the same time",
							"details": {},
							"ignorable": false
						}
					],
					"description": "Possible Conflicts"
				},
				"date": {
					"type": "string",
					"format": "date-time",
					"example": "2023-01-18T16:18:40.127+02:00",
					"description": "Date"
				}
			},
			"required": ["employment_id", "shift_preset_id", "conflicts", "date"],
			"description": "V1_EmploymentResponseEntity_PotentialConflictsResponseEntity model"
		},
		"V1_Employments_Notifications_Entities_NewAbsencesCount": {
			"type": "object",
			"properties": {
				"new_absences_count": {
					"type": "integer",
					"format": "int32",
					"example": 3,
					"description": "Count of new absences the employment has manage rights over in a given company"
				}
			},
			"required": ["new_absences_count"],
			"description": "V1_Employments_Notifications_Entities_NewAbsencesCount model"
		},
		"V1_Employments_YearlyBringShifts_Entities_YearlyBringShiftResponse": {
			"type": "object",
			"properties": {
				"year": {
					"type": "integer",
					"format": "int32",
					"example": 2010,
					"description": "Year of the YearlyBringShift"
				},
				"hours": {
					"type": "number",
					"format": "float",
					"example": 30.0,
					"description": "Hours of the YearlyBringShift"
				}
			},
			"required": ["year"],
			"description": "V1_Employments_YearlyBringShifts_Entities_YearlyBringShiftResponse model"
		},
		"V1_Employments_YearlyBringShifts_Entities_NegativeHoursError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Hours outside of range",
					"description": "Always 'Hours outside of range'"
				}
			},
			"required": ["error"],
			"description": "V1_Employments_YearlyBringShifts_Entities_NegativeHoursError model"
		},
		"V1_Employments_YearlyBringShifts_Entities_YearsOutsideRangeError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Year outside of range",
					"description": "Always 'Year outside of range'"
				}
			},
			"required": ["error"],
			"description": "V1_Employments_YearlyBringShifts_Entities_YearsOutsideRangeError model"
		},
		"V1_Employments_YearlyBringShifts_Entities_FeatureNotEnabledError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "BringShifts feature not enabled",
					"description": "Always 'BringShifts feature not enabled'"
				}
			},
			"required": ["error"],
			"description": "V1_Employments_YearlyBringShifts_Entities_FeatureNotEnabledError model"
		},
		"V1_Employments_YearlyBringShifts_Entities_YearlyBringShiftIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_Employments_YearlyBringShifts_Entities_YearlyBringShiftResponse"
					}
				}
			},
			"required": ["items"],
			"description": "V1_Employments_YearlyBringShifts_Entities_YearlyBringShiftIndexResponse model"
		},
		"V1_Employments_YearlyBringShifts_Entities_InconsistentYearsError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "StartYear has to be lower or equal than EndYear",
					"description": "Always 'StartYear has to be lower or equal than EndYear'"
				}
			},
			"required": ["error"],
			"description": "V1_Employments_YearlyBringShifts_Entities_InconsistentYearsError model"
		},
		"V1_EmploymentUiSettingEntity": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"employment_id": { "type": "integer", "format": "int32", "example": 12 },
				"setting": {
					"type": "json",
					"example": {
						"filters": {
							"join_shift_request": true,
							"leave_shift_request": false,
							"replace_request": false
						}
					}
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "employment_id", "setting", "created_at", "updated_at"],
			"description": "V1_EmploymentUiSettingEntity model"
		},
		"V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupResponse"
					}
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupIndexResponse model"
		},
		"V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"employment_id": { "type": "integer", "format": "int32", "example": 7 },
				"shift_rotation_group_id": { "type": "integer", "format": "int32", "example": 3 },
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "employment_id", "shift_rotation_group_id"],
			"description": "V1_EmploymentsRotationGroupResponseEntity_EmploymentsRotationGroupResponse model"
		},
		"V1_EvaluationResponseEntity_EvaluationIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationResponseEntity" }
				},
				"total": { "type": "integer", "format": "int32", "example": 1 }
			},
			"required": ["items", "total"],
			"description": "V1_EvaluationResponseEntity_EvaluationIndexResponse model"
		},
		"V1_EvaluationResponseEntity_StaffShiftNoShowError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_StaffShiftNoShowErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_StaffShiftNoShowError model"
		},
		"V1_EvaluationResponseEntity_StaffShiftNoShowErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "staff_shift_in_no_show_state",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Staff Shift is in No Show state",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "staff_shift_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_PGUniqueViolationInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_PGUniqueViolationInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_PGUniqueViolationInvalidError model"
		},
		"V1_EvaluationResponseEntity_PGUniqueViolationInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "admin_evaluation_already_being_saved",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Admin Evaluation is already being saved",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "staff_shift_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_PaymentTypeAlreadyPresentInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentTypeAlreadyPresentInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_EvaluationResponseEntity_PaymentTypeAlreadyPresentInvalidError model"
		},
		"V1_EvaluationResponseEntity_PaymentTypeAlreadyPresentInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "admin_payments.child_payments.paygrade_type_id_already present",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "admin_payments.child_payments.paygrade_type_id already present",
					"description": "Detailed error message"
				},
				"data": { "type": "json", "example": {}, "description": "Additional metadata" }
			},
			"required": ["error_key", "message"]
		},
		"V1_EvaluationResponseEntity_EvaluationPaymentCalculationResponse": {
			"type": "object",
			"properties": {
				"sum": { "type": "number", "format": "float", "example": 100 },
				"payments": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationPaymentCalculationRegularPayment"
					}
				}
			},
			"required": ["sum", "payments"],
			"description": "V1_EvaluationResponseEntity_EvaluationPaymentCalculationResponse model"
		},
		"V1_EvaluationResponseEntity_EvaluationPaymentCalculationRegularPayment": {
			"type": "object",
			"properties": {
				"paygrade_type_id": { "type": "integer", "format": "int32", "example": 1 },
				"total_value": { "type": "number", "format": "float", "example": 50 },
				"child_payments": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_EvaluationResponseEntity_EvaluationPaymentCalculationBonusPayment"
					}
				}
			},
			"required": ["paygrade_type_id", "total_value", "child_payments"]
		},
		"V1_EvaluationResponseEntity_EvaluationPaymentCalculationBonusPayment": {
			"type": "object",
			"properties": {
				"paygrade_type_id": { "type": "integer", "format": "int32", "example": 1 },
				"total_value": { "type": "number", "format": "float", "example": 50 }
			},
			"required": ["paygrade_type_id", "total_value"]
		},
		"V1_EvaluationResponseEntity_PaymentsResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 40,
					"description": "Unique identifier of the Payment"
				},
				"type": { "type": "string", "example": "AdminPayment", "description": "Type of Payment" },
				"value": {
					"type": "number",
					"format": "float",
					"example": 12.05,
					"description": "Value of PaygradeType"
				},
				"paygrade_type_id": {
					"type": "integer",
					"format": "int32",
					"example": 13,
					"description": "ID of the associated PaygradeType"
				},
				"is_edited": {
					"type": "boolean",
					"example": false,
					"description": "Is the Payment editable"
				},
				"inherited_from": {
					"type": "string",
					"enum": ["employmentsposition", "employment", "shift", "position", "company"],
					"example": "company",
					"description": "On which level has the Payment been created (Company, Position, employee)?"
				},
				"display_name": {
					"type": "string",
					"example": "regular, hourly",
					"description": "Combined text for paygrade type and paygrade name"
				},
				"sum_with_shift": {
					"type": "integer",
					"format": "int32",
					"example": 8,
					"description": "Length of Shift in minutes"
				},
				"paygrade_type": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int32",
							"example": 12,
							"description": "Unique identifier of the PaygradeType"
						},
						"name": {
							"type": "string",
							"example": "regular",
							"description": "Name of the PaygradeType"
						},
						"pay_type": {
							"type": "string",
							"enum": ["fixed", "hourly", "bonus_fixed", "bonus_percentage"],
							"example": "hourly",
							"description": "Type of payment (fixed/bonus fixed/bonus percentage/hourly)"
						}
					},
					"required": ["id", "name", "pay_type"]
				},
				"child_payments": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_EvaluationResponseEntity_ChildPaymentsResponse" }
				}
			},
			"required": [
				"id",
				"type",
				"value",
				"paygrade_type_id",
				"is_edited",
				"inherited_from",
				"display_name",
				"sum_with_shift",
				"child_payments"
			],
			"description": "V1_EvaluationResponseEntity_PaymentsResponse model"
		},
		"V1_EvaluationResponseEntity_ChildPaymentsResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Unique identifier of the Evaluation"
				},
				"value": {
					"type": "number",
					"format": "float",
					"example": 1.0,
					"description": "Value of PaygradeType"
				},
				"paygrade_type_id": {
					"type": "integer",
					"format": "int32",
					"example": 12,
					"description": "ID of the associated PaygradeType"
				},
				"payment_id": {
					"type": "integer",
					"format": "int32",
					"example": 12,
					"description": "ID of the associated Payment"
				},
				"is_edited": {
					"type": "boolean",
					"example": false,
					"description": "Is the Payment editable"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Evaluation was last updated"
				},
				"sum_with_shift": {
					"type": "integer",
					"format": "int32",
					"example": 8,
					"description": "Length of Shift in minutes"
				},
				"paygrade_type": {
					"type": "object",
					"properties": {
						"id": {
							"type": "integer",
							"format": "int32",
							"example": 12,
							"description": "Unique identifier of the PaygradeType"
						},
						"name": {
							"type": "string",
							"example": "regular",
							"description": "Name of the PaygradeType"
						},
						"pay_type": {
							"type": "string",
							"enum": ["fixed", "hourly", "bonus_fixed", "bonus_percentage"],
							"example": "hourly",
							"description": "Type of payment (fixed/bonus fixed/bonus percentage/hourly)"
						}
					},
					"required": ["id", "name", "pay_type"]
				}
			},
			"required": [
				"id",
				"value",
				"paygrade_type_id",
				"payment_id",
				"is_edited",
				"created_at",
				"updated_at",
				"sum_with_shift"
			]
		},
		"V1_EvaluationResponseEntity_PaygradeTypeNotBonusError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "PaygradeType is not bonus",
					"description": "Always 'PaygradeType is not bonus'"
				}
			},
			"required": ["error"],
			"description": "V1_EvaluationResponseEntity_PaygradeTypeNotBonusError model"
		},
		"V1_EvaluationResponseEntity_ParentPaymentNotRegularError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Parent Payment is not regular",
					"description": "Always 'Parent Payment is not regular'"
				}
			},
			"required": ["error"],
			"description": "V1_EvaluationResponseEntity_ParentPaymentNotRegularError model"
		},
		"V1_EvaluationResponseEntity_PaymentNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Payment not found",
					"description": "Always 'Payment not found'"
				}
			},
			"required": ["error"],
			"description": "V1_EvaluationResponseEntity_PaymentNotFoundError model"
		},
		"V1_EvaluationResponseEntity_ChildPaymentNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Child Payment not found",
					"description": "Always 'Child Payment not found'"
				}
			},
			"required": ["error"],
			"description": "V1_EvaluationResponseEntity_ChildPaymentNotFoundError model"
		},
		"V1_EvaluationResponseEntity_PaymentsIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_EvaluationResponseEntity_PaymentsResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 1 }
			},
			"required": ["items", "total"],
			"description": "V1_EvaluationResponseEntity_PaymentsIndexResponse model"
		},
		"V1_EvaluationResponseEntity_SuccessfullyDeletedResponse": {
			"type": "object",
			"properties": {
				"success": { "type": "string", "example": true, "description": "Always true" }
			},
			"required": ["success"],
			"description": "V1_EvaluationResponseEntity_SuccessfullyDeletedResponse model"
		},
		"V1_IndividualRotations_Entities_IndividualRotationResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"employment_id": { "type": "integer", "format": "int32", "example": 33 },
				"anchor_date": {
					"type": "string",
					"format": "date-time",
					"example": "2020-01-01T01:00:00.000+01:00"
				},
				"shift_preset_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2, 3, 4],
					"description": "Array of shift presets"
				},
				"rotation_interval": {
					"type": "integer",
					"format": "int32",
					"example": 35,
					"description": "The interval after which rotation repeats"
				},
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "employment_id", "anchor_date", "shift_preset_ids", "rotation_interval"],
			"description": "V1_IndividualRotations_Entities_IndividualRotationResponse model"
		},
		"V1_IndividualRotations_Entities_IndividualRotationIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_IndividualRotations_Entities_IndividualRotationResponse"
					}
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_IndividualRotations_Entities_IndividualRotationIndexResponse model"
		},
		"V1_ShiftplanResponseEntity_ShiftplanDefaultPublishOptionsResponseEntity": {
			"type": "object",
			"properties": {
				"company_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Company ID"
				},
				"location_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Location ID"
				},
				"send_assigned_shifts": {
					"type": "boolean",
					"example": "true",
					"description": "Send information about shifts assigned to the employee in email notification."
				},
				"send_open_shifts": {
					"type": "boolean",
					"example": "true",
					"description": "Send information about open shifts in email notification."
				},
				"send_message": {
					"type": "boolean",
					"example": "true",
					"description": "Send additional text message to employees. Provided in message field."
				},
				"message": {
					"type": "string",
					"example": "Publish message",
					"description": "Additional text message included in email notification to employees. Requires sendMessage to be true for message to be included"
				}
			},
			"required": [
				"company_id",
				"location_id",
				"send_assigned_shifts",
				"send_open_shifts",
				"send_message",
				"message"
			],
			"description": "V1_ShiftplanResponseEntity_ShiftplanDefaultPublishOptionsResponseEntity model"
		},
		"V1_LocationResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the Location"
				},
				"name": {
					"type": "string",
					"example": "Location name",
					"description": "Name of the Location"
				},
				"company_id": {
					"type": "integer",
					"format": "int32",
					"example": 23,
					"description": "Company ID associated with the Location"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Location was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Location was last updated"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Location was deleted"
				},
				"sort": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Sort order for the Location"
				},
				"metadata": { "type": "json", "example": "{}", "description": "Metadata" },
				"action_type": { "type": "string" }
			},
			"required": ["id", "name", "sort"],
			"description": "V1_LocationResponseEntity model"
		},
		"V1_LocationsPositionResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the LocationsPosition"
				},
				"location_id": {
					"type": "integer",
					"format": "int32",
					"example": 23,
					"description": "Location ID associated with the LocationsPosition"
				},
				"position_id": {
					"type": "integer",
					"format": "int32",
					"example": 15,
					"description": "Position ID associated with the LocationsPosition"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the LocationsPosition was deleted"
				},
				"sort": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Sort order of LocationsPosition"
				},
				"position_name": {
					"type": "string",
					"example": "Position name",
					"description": "Name of the Position associated with the LocationsPosition"
				},
				"location_name": {
					"type": "string",
					"example": "Location name",
					"description": "Name of the Location associated with the LocationsPosition"
				},
				"position_color": {
					"type": "string",
					"example": "#8957f4",
					"description": "Color of the Position associated with the LocationsPosition"
				}
			},
			"required": ["id", "sort", "position_name", "location_name", "position_color"],
			"description": "V1_LocationsPositionResponseEntity model"
		},
		"V1_NotificationConfigurations_Entities_NotificationFilterResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 32,
					"description": "Unique identifier of the NotificationFilter"
				},
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 16,
					"description": "Unique identifier of the Employment"
				},
				"enabled_shift_rotation_group_ids": {
					"type": "integer",
					"format": "int32",
					"example": [12, 21, 32],
					"description": "List of all shift rotation groups which have notification enabled"
				}
			},
			"required": ["employment_id", "enabled_shift_rotation_group_ids"],
			"description": "V1_NotificationConfigurations_Entities_NotificationFilterResponse model"
		},
		"V1_NotificationConfigurations_Entities_NotificationConfigurationIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_NotificationConfigurations_Entities_NotificationConfigurationResponse"
					}
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_NotificationConfigurations_Entities_NotificationConfigurationIndexResponse model"
		},
		"V1_NotificationConfigurations_Entities_NotificationConfigurationResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 32,
					"description": "Unique identifier of the NotificationConfiguration"
				},
				"absences_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should Absence notifications be sent via email?"
				},
				"absences_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should Absence notifications be sent to the User's mobile device?"
				},
				"application_request_refused_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should Request refusal notifications be sent via email?"
				},
				"application_request_refused_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should Request refusal notifications be sent to the User's mobile device?"
				},
				"auto_punchout_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should auto punchout notifications be sent to the User's mobile device?"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when Notification filter was created"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when Notification filter was deleted"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when Notification filter was updated"
				},
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 2,
					"description": "ID of the associated Employment"
				},
				"evaluations_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should Evaluation notifications be sent to the User's mobile device?"
				},
				"evaluations_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should Evaluation notifications be sent via email?"
				},
				"employee_swap_request_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should employees received Swap request notifications via mail?"
				},
				"employee_swap_request_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should employees received Swap request notifications on their mobile devices?"
				},
				"messages_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should messages be sent to the User's mobile device?"
				},
				"personal_chat_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should notification be sent via email for new chat messages?"
				},
				"personal_chat_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should notification be sent to the User's mobile for new chat messages?"
				},
				"requests_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should Request notifications be sent to the User's mobile device?"
				},
				"shiftplans_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should Shiftplan notifications be sent to the User's mobile device?"
				},
				"staff_messages_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should staff messages be sent to the User's mobile device?"
				},
				"stakeholder_absences_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive Absence notifications via email?"
				},
				"stakeholder_absences_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive Absence notifications on their mobile devices?"
				},
				"stakeholder_withdraw_absences_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive withdraw Absence notifications via email?"
				},
				"stakeholder_withdraw_absences_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive withdraw Absence notifications on their mobile devices?"
				},
				"stakeholder_auto_punchout_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive auto punchout notifications on their mobile devices?"
				},
				"stakeholder_auto_request_change_accept_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive auto change request notifications via email?"
				},
				"stakeholder_auto_request_change_accept_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive auto change request notifications on their mobile devices?"
				},
				"stakeholder_evaluations_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive Evaluation suggestions on their mobile devices?"
				},
				"stakeholder_requests_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive Request notifications via email?"
				},
				"stakeholder_requests_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive Request notifications on their mobile devices?"
				},
				"stakeholder_shift_application_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive shift application notifications via email?"
				},
				"stakeholder_shift_application_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive shift application notifications on their mobile devices?"
				},
				"stakeholder_survey_completed_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive survey notifications via email when it is completed?"
				},
				"stakeholder_survey_updates_by_employee_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive survey notifications via email when a employee updates it?"
				},
				"stakeholder_survey_updates_by_stakeholder_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders receive survey notifications via email when a stakeholder updates it?"
				},
				"stakeholder_swap_request_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders received Swap request notifications via mail?"
				},
				"stakeholder_swap_request_mobile": {
					"type": "boolean",
					"example": true,
					"description": "Should stakeholders received Swap request notifications on their mobile devices?"
				},
				"survey_updates_mail": {
					"type": "boolean",
					"example": true,
					"description": "Should Survey notifications be sent via email when survey is updated?"
				}
			},
			"required": [
				"absences_mail",
				"absences_mobile",
				"application_request_refused_mail",
				"application_request_refused_mobile",
				"auto_punchout_mobile",
				"employment_id",
				"evaluations_mail",
				"evaluations_mobile",
				"employee_swap_request_mail",
				"employee_swap_request_mobile",
				"messages_mobile",
				"personal_chat_mail",
				"personal_chat_mobile",
				"requests_mobile",
				"shiftplans_mobile",
				"staff_messages_mobile",
				"stakeholder_absences_mail",
				"stakeholder_absences_mobile",
				"stakeholder_withdraw_absences_mail",
				"stakeholder_withdraw_absences_mobile",
				"stakeholder_auto_punchout_mobile",
				"stakeholder_auto_request_change_accept_mail",
				"stakeholder_auto_request_change_accept_mobile",
				"stakeholder_evaluations_mobile",
				"stakeholder_requests_mail",
				"stakeholder_requests_mobile",
				"stakeholder_shift_application_mail",
				"stakeholder_shift_application_mobile",
				"stakeholder_survey_completed_mail",
				"stakeholder_survey_updates_by_employee_mail",
				"stakeholder_survey_updates_by_stakeholder_mail",
				"stakeholder_swap_request_mail",
				"stakeholder_swap_request_mobile",
				"survey_updates_mail"
			],
			"description": "V1_NotificationConfigurations_Entities_NotificationConfigurationResponse model"
		},
		"V1_Paygrades_Entities_ShiftPaygradeApiV1Response": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"paygrade_type_id": { "type": "integer", "format": "int32", "example": 1 },
				"paygrade_for_type": {
					"type": "string",
					"example": "Shift",
					"description": "Defines the object the paygrade belongs to. It can be Shift, Company, Position,\n            or another paygrade"
				},
				"paygrade_for_id": {
					"type": "integer",
					"format": "int32",
					"example": 35,
					"description": "The id of the object the paygrade belongs to"
				},
				"value": { "type": "number", "format": "float", "example": 1.46 },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "paygrade_type_id", "paygrade_for_type", "paygrade_for_id", "value"],
			"description": "V1_Paygrades_Entities_ShiftPaygradeApiV1Response model"
		},
		"V1_ShiftResponseEntity_ShiftResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the Shift"
				},
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shift starts"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shift ends"
				},
				"workers": {
					"type": "integer",
					"format": "int32",
					"example": 2,
					"description": "Amount of employees assignable to the Shift"
				},
				"shiftplan_id": {
					"type": "integer",
					"format": "int32",
					"example": 23,
					"description": "Shiftplan ID associated with the Shift"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shift was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shift was last updated"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shift was deleted"
				},
				"break_time": {
					"type": "integer",
					"format": "int32",
					"example": 60,
					"description": "Duration of breaks in minutes"
				},
				"untimed_break_time": {
					"type": "integer",
					"format": "int32",
					"example": 60,
					"description": "Duration of untimed breaks in minutes"
				},
				"can_evaluate": {
					"type": "boolean",
					"example": true,
					"description": "Can employees create Evaluations?"
				},
				"note": {
					"type": "string",
					"example": "Please turn lights off afterwards",
					"description": "Note for the Shift"
				},
				"manager_note": {
					"type": "string",
					"example": "Let us all do well",
					"description": "Manager note for the Shift (can only be seen by stakeholders)"
				},
				"locations_position_id": {
					"type": "integer",
					"format": "int32",
					"example": 5,
					"description": "LocationsPosition associated with the Shift"
				},
				"connected_group_id": {
					"type": "integer",
					"format": "int32",
					"example": 5,
					"description": "Connection ID with other shifts in the same shiftplan"
				},
				"untimed": {
					"type": "boolean",
					"example": true,
					"description": "Should the Shift be accounted?"
				},
				"shift_preset_id": {
					"type": "integer",
					"format": "int32",
					"example": 2,
					"description": "ShiftPreset ID associated with the Shift"
				},
				"shift_rotation_group_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2],
					"description": "The IDs of the ShiftRotationGroups the shift is associated with"
				},
				"assignment_group_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2],
					"description": "The IDs of the AssignmentGroups the shift is associated with"
				},
				"auto_accept_request_enabled": {
					"type": "boolean",
					"example": false,
					"description": "Automatically accept shift Requests as long as there are open slots in the Shift?"
				},
				"auto_accept": {
					"type": "string",
					"enum": ["disabled", "enforced", "warning"],
					"example": "disabled",
					"description": "Auto accept shift request type for a shift."
				},
				"can_manage": {
					"type": "boolean",
					"example": true,
					"description": "Can the Shift be managed by the user?"
				},
				"tag_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2],
					"description": "IDs of tags assigned to the shift"
				},
				"evaluation_tag_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2],
					"description": "IDs of evaluation tags assigned to the shift"
				},
				"breaks": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2],
					"description": "IDs of timed breaks of the shift"
				},
				"staff_shifts_count": {
					"type": "integer",
					"format": "int32",
					"example": 3,
					"description": "Number of staff shifts associated with this shift"
				},
				"qualifications": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftQualificationsResponse" }
				}
			},
			"required": [
				"id",
				"starts_at",
				"ends_at",
				"workers",
				"shiftplan_id",
				"can_evaluate",
				"locations_position_id",
				"shift_preset_id",
				"auto_accept_request_enabled",
				"auto_accept"
			],
			"description": "V1_ShiftResponseEntity_ShiftResponse model"
		},
		"V1_ShiftResponseEntity_ShiftQualificationsResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 2,
					"description": "The IDs of the Qualifications the shift is associated with"
				},
				"count": {
					"type": "integer",
					"format": "int32",
					"example": 10,
					"description": "Total required workers per qualifications"
				}
			}
		},
		"V1_Entities_ShiftplanLockedError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_ShiftplanLockedErrorDetails" }
				}
			},
			"required": ["message", "errors"],
			"description": "V1_Entities_ShiftplanLockedError model"
		},
		"V1_Entities_ShiftplanLockedErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "shiftplan_is_locked",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Shiftplan is locked",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "shiftplan_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_Entities_ConflictsError": {
			"type": "object",
			"properties": {
				"error": { "type": "string", "example": "conflicts", "description": "Always 'conflicts'" },
				"conflicts": { "$ref": "#/definitions/V1_Entities_ConflictsErrorDetails" }
			},
			"required": ["error", "conflicts"],
			"description": "V1_Entities_ConflictsError model"
		},
		"V1_Entities_ConflictsErrorDetails": {
			"type": "object",
			"properties": {
				"absences_collision": { "$ref": "#/definitions/V1_Entities_AbsencesCollisionsConflict" },
				"already_assigned": { "$ref": "#/definitions/V1_Entities_AlreadyAssignedConflict" },
				"full": { "$ref": "#/definitions/V1_Entities_FullConflict" },
				"locations_position": { "$ref": "#/definitions/V1_Entities_LocationsPositionConflict" },
				"maximum_consecutive_working_days": {
					"$ref": "#/definitions/V1_Entities_MaximumConsecutiveWorkingDaysConflict"
				},
				"maximum_earning": { "$ref": "#/definitions/V1_Entities_MaximumEarningConflict" },
				"maximum_working_hours": {
					"$ref": "#/definitions/V1_Entities_MaximumWorkingHoursConflict"
				},
				"minimum_break": { "$ref": "#/definitions/V1_Entities_MinimumBreakConflict" },
				"minimum_rest": { "$ref": "#/definitions/V1_Entities_MinimumRestConflict" },
				"not_available": { "$ref": "#/definitions/V1_Entities_NotAvailableConflict" },
				"outside_employment_period": {
					"$ref": "#/definitions/V1_Entities_OutsideEmploymentPeriodConflict"
				},
				"restricted_shift_presets": {
					"$ref": "#/definitions/V1_Entities_RestrictedShiftPresetsConflict"
				},
				"shifts_collision": { "$ref": "#/definitions/V1_Entities_ShiftsCollisionConflict" },
				"unavailable": { "$ref": "#/definitions/V1_Entities_UnavailableConflict" }
			}
		},
		"V1_Entities_AbsencesCollisionsConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employee has absences at the time of the shift",
					"description": "Always the employee has absences at the time of the shift"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_AbsencesCollisionsConflict_AbsencesCollisionsConflictDetails"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_AbsencesCollisionsConflict_AbsencesCollisionsConflictDetails": {
			"type": "object",
			"properties": {
				"absences": {
					"type": "json",
					"example": "[...]",
					"description": "List of colliding absences"
				}
			},
			"required": ["absences"]
		},
		"V1_Entities_AlreadyAssignedConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employee is already assigned to the shift",
					"description": "Always the employee is already assigned to the shift"
				}
			},
			"required": ["message"]
		},
		"V1_Entities_FullConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the shift is full",
					"description": "Always the shift is full"
				}
			},
			"required": ["message"]
		},
		"V1_Entities_LocationsPositionConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employee is not assigned to shift's locations position",
					"description": "Always the employee is not assigned to shift's locations position"
				}
			},
			"required": ["message"]
		},
		"V1_Entities_MaximumConsecutiveWorkingDaysConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employment will have more consecutive working days than planned",
					"description": "Always the employment will have more consecutive working days than planned"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_MaximumConsecutiveWorkingDaysConflict_MaximumConsecutiveWorkingDaysConflictDetails"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_MaximumConsecutiveWorkingDaysConflict_MaximumConsecutiveWorkingDaysConflictDetails": {
			"type": "object",
			"properties": {
				"days": { "type": "number", "example": 5, "description": "Requested days" },
				"max_days": { "type": "number", "example": 3, "description": "Maximum available days" }
			},
			"required": ["days", "max_days"]
		},
		"V1_Entities_MaximumEarningConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employment will have more payment than planned",
					"description": "Always the employment will have more payment than planned"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_MaximumEarningConflict_MaximumEarningConflictDetails"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_MaximumEarningConflict_MaximumEarningConflictDetails": {
			"type": "object",
			"properties": {
				"total_payment": { "type": "number", "example": 5, "description": "Requested payment" },
				"maximum_money": {
					"type": "number",
					"example": 3,
					"description": "Maximum allowed payment"
				},
				"currency": { "type": "string", "example": "$", "description": "Currency" }
			},
			"required": ["total_payment", "maximum_money", "currency"]
		},
		"V1_Entities_MaximumWorkingHoursConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employment will have more working hours than planned",
					"description": "Always the employment will have more working hours than planned"
				},
				"details": {
					"type": "json",
					"example": "{...}",
					"description": "Details about working hours"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_MinimumRestConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "employee must have minimum rest of ${rest_rule.rest_minutes} minutes before/after this shift",
					"description": "Always employee must have minimum rest of ${rest_rule.rest_minutes} minutes before/after this shift"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_MinimumRestConflict_MinimumRestConflictDetails"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_MinimumRestConflict_MinimumRestConflictDetails": {
			"type": "object",
			"properties": {
				"rest_minutes": {
					"type": "number",
					"example": 15,
					"description": "Requested duration in minutes"
				},
				"minimum_rest_minutes": {
					"type": "number",
					"example": 30,
					"description": "Minimum allowed break in minutes"
				}
			},
			"required": ["rest_minutes", "minimum_rest_minutes"]
		},
		"V1_Entities_NotAvailableConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "employee is not explicitly available",
					"description": "Always employee is not explicitly available"
				}
			},
			"required": ["message"]
		},
		"V1_Entities_OutsideEmploymentPeriodConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "shift is outside employee's job time period",
					"description": "Always shift is outside employee's job time period"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_OutsideEmploymentPeriodConflict_OutsideEmploymentPeriodConflictDetails"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_OutsideEmploymentPeriodConflict_OutsideEmploymentPeriodConflictDetails": {
			"type": "object",
			"properties": {
				"shift": { "type": "json", "example": "{...}", "description": "Details about shift" },
				"job_time_period": {
					"type": "json",
					"example": "{...}",
					"description": "Details about job time period"
				}
			},
			"required": ["shift", "job_time_period"]
		},
		"V1_Entities_RestrictedShiftPresetsConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "employee is not allowed to work these shift presets",
					"description": "Always employee is not allowed to work these shift presets"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_RestrictedShiftPresetsConflict_RestrictedShiftPresetsConflictDetails"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_RestrictedShiftPresetsConflict_RestrictedShiftPresetsConflictDetails": {
			"type": "object",
			"properties": {
				"restricted_shift_presets": {
					"type": "string",
					"example": "['night', 'morning']",
					"description": "Names of restricted shift presets"
				}
			},
			"required": ["restricted_shift_presets"]
		},
		"V1_Entities_ShiftsCollisionConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employee has other shifts at the same time",
					"description": "Always the employee has other shifts at the same time"
				},
				"details": {
					"$ref": "#/definitions/V1_Entities_ShiftsCollisionConflict_ShiftsCollisionConflictDetails"
				}
			},
			"required": ["message", "details"]
		},
		"V1_Entities_ShiftsCollisionConflict_ShiftsCollisionConflictDetails": {
			"type": "object",
			"properties": {
				"shifts": { "type": "json", "example": "[...]", "description": "List of colliding shifts" }
			},
			"required": ["shifts"]
		},
		"V1_Entities_UnavailableConflict": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "the employee is unavailable at the time of the shift",
					"description": "Always the employee is unavailable at the time of the shift"
				}
			},
			"required": ["message"]
		},
		"V1_ShiftResponseEntity_ShiftPresetNotAvailableForShiftRotationGroupsInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetNotAvailableForShiftRotationGroupsInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_ShiftResponseEntity_ShiftPresetNotAvailableForShiftRotationGroupsInvalidError model"
		},
		"V1_ShiftResponseEntity_ShiftPresetNotAvailableForShiftRotationGroupsInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "shift_rotation_group_not_available_for_shift_preset",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Shift Rotation groups not available for shift preset",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "shift_rotation_group_ids": [], "shift_preset_id": 100 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_ShiftResponseEntity_ShiftBreakDurationInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreakDurationInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_ShiftResponseEntity_ShiftBreakDurationInvalidError model"
		},
		"V1_ShiftResponseEntity_ShiftBreakDurationInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "sum_of_duration_of_shift_breaks_higher_than_break_time",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Sum of duration of all shift_breaks cannot be bigger than break_time",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "evaluation_breaks": [], "evaluation_break": 100 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_ShiftResponseEntity_ShiftBreaksOverlapInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreaksOverlapInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_ShiftResponseEntity_ShiftBreaksOverlapInvalidError model"
		},
		"V1_ShiftResponseEntity_ShiftBreaksOverlapInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "overlapping_shift_breaks",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "There must be no overlapping breaks in Shift",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "breaks": [] },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_ShiftResponseEntity_ShiftBreakInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftBreakInvalidErrorDetails" }
				}
			},
			"required": ["message", "errors"],
			"description": "V1_ShiftResponseEntity_ShiftBreakInvalidError model"
		},
		"V1_ShiftResponseEntity_ShiftBreakInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "invalid_starts_at_ends_at",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Invalid shift break",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "starts_at": "", "ends_at": "" },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_ShiftResponseEntity_ShiftLocationsPositionChangedInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftLocationsPositionChangedInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_ShiftResponseEntity_ShiftLocationsPositionChangedInvalidError model"
		},
		"V1_ShiftResponseEntity_ShiftLocationsPositionChangedInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "position_changed",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "New position must be in the same location as the previous position",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "shift_location_id": 1, "locations_position_location_id": 100 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_ShiftResponseEntity_ShiftPresetNotSameTimesInvalidError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetNotSameTimesInvalidErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_ShiftResponseEntity_ShiftPresetNotSameTimesInvalidError model"
		},
		"V1_ShiftResponseEntity_ShiftPresetNotSameTimesInvalidErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "data_different_from_shift_preset",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Shift must match ShiftPresets start_at, ends_at and unpaid break",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": {
						"shift_preset_id": 1,
						"shift_preset_starts_at_time": "10:00",
						"shift_preset_ends_at_time": "18:00",
						"shift_preset_break_time": 45
					},
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_ShiftResponseEntity_ShiftPresetExceedTimeLimitError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftPresetExceedTimeLimitErrorDetails"
					}
				}
			},
			"required": ["message", "errors"],
			"description": "V1_ShiftResponseEntity_ShiftPresetExceedTimeLimitError model"
		},
		"V1_ShiftResponseEntity_ShiftPresetExceedTimeLimitErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "shift_with_shift_preset_exceeds_time_limit",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Shift with shift preset cannot exceed more than 24 hours",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": {
						"shift_preset_id": 1,
						"shift_preset_starts_at_time": "10:00",
						"shift_preset_ends_at_time": "18:00",
						"starts_at": "2019-12-31T06:00:00.000+01:00",
						"ends_at": "2019-12-31T06:00:00.000+01:00"
					},
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_Entities_UnableToAddEmploymentError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_UnableToAddEmploymentDetails" }
				}
			},
			"required": ["message", "errors"],
			"description": "V1_Entities_UnableToAddEmploymentError model"
		},
		"V1_Entities_UnableToAddEmploymentDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "unable_to_add_employment",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Unable to add Employment",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "shiftplan_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_Shifts_Clone_Entities_DateOutsideShiftplanTimeFrame": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "The date is outside of shiftplan time frame",
					"description": "Always 'The date is outside of shiftplan time frame'"
				}
			},
			"required": ["error"],
			"description": "V1_Shifts_Clone_Entities_DateOutsideShiftplanTimeFrame model"
		},
		"V1_ShiftResponseEntity_ShiftAvailableEmploymentsResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftAvaiableEmployment" }
				},
				"current_page": { "type": "integer", "format": "int32", "example": 42 },
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "current_page", "total"],
			"description": "V1_ShiftResponseEntity_ShiftAvailableEmploymentsResponse model"
		},
		"V1_ShiftResponseEntity_ShiftAvaiableEmployment": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "ID of employment"
				},
				"has_conflicts": {
					"type": "boolean",
					"example": true,
					"description": "Indicates if an assignment of employee will cause conflicts"
				},
				"conflicts": {
					"$ref": "#/definitions/V1_Entities_ConflictsErrorDetails",
					"description": "Conflicts that will be caused by assignment"
				},
				"join_request": {
					"$ref": "#/definitions/V1_Entities_JoinRequest",
					"description": "Join Request info (if present)"
				},
				"availability_info": {
					"$ref": "#/definitions/V1_ShiftResponseEntity_ShiftEmploymentAvailabilityInfo",
					"description": "Info about availability"
				},
				"is_monthly": {
					"type": "boolean",
					"example": true,
					"description": "Indicates if employee has monthly or weekly contracted minutes"
				},
				"contract_minutes": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates how many minutes employee contacted to work"
				},
				"scheduled_minutes": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates for how many minutes employee is already scheduled"
				},
				"worked_minutes": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates how many minutes are in evaluations and absences"
				},
				"hour_account_hours": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates current value of hour account"
				},
				"maximum_money": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates for how much money employee can be scheduled"
				},
				"scheduled_money": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates for how much money employee is already scheduled"
				},
				"bring_shift_hours": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates how many bring shift hours employee can have"
				},
				"bring_shift_hours_used": {
					"type": "number",
					"format": "float",
					"example": 42.7,
					"description": "Indicates how many bring shift hours are used"
				}
			},
			"required": ["id", "has_conflicts"]
		},
		"V1_Entities_JoinRequest": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"state": { "type": "string", "example": "new" },
				"employment_id": { "type": "integer", "format": "int32", "example": 69 },
				"shift_id": { "type": "integer", "format": "int32", "example": 32 },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2023-10-09T16:41:36.525+02:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2023-10-09T16:41:36.525+02:00"
				},
				"automation_checked_at": {
					"type": "string",
					"format": "date-time",
					"example": "2023-10-09T16:41:36.525+02:00"
				}
			},
			"required": [
				"id",
				"state",
				"employment_id",
				"shift_id",
				"created_at",
				"updated_at",
				"automation_checked_at"
			]
		},
		"V1_ShiftResponseEntity_ShiftEmploymentAvailabilityInfo": {
			"type": "object",
			"properties": {
				"available": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftEmploymentAvailability" }
				},
				"unavailable": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftEmploymentAvailability" }
				},
				"partial_available": {
					"type": "boolean",
					"example": true,
					"description": "Indicates if employee is partially available"
				},
				"partial_unavailable": {
					"type": "boolean",
					"example": true,
					"description": "Indicates if employee is partially unavailable"
				},
				"full_available": {
					"type": "boolean",
					"example": true,
					"description": "Indicates if employee is fully available"
				},
				"full_unavailable": {
					"type": "boolean",
					"example": true,
					"description": "Indicates if employee is fully unavailable"
				}
			},
			"required": ["partial_available", "partial_unavailable", "full_available", "full_unavailable"]
		},
		"V1_ShiftResponseEntity_ShiftEmploymentAvailability": {
			"type": "object",
			"properties": {
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["starts_at", "ends_at"]
		},
		"V1_ShiftResponseEntity_ShiftDisconnectResponse": {
			"type": "object",
			"properties": {
				"shift_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Shift ID of disconnected shift"
				}
			},
			"required": ["shift_id"],
			"description": "V1_ShiftResponseEntity_ShiftDisconnectResponse model"
		},
		"V1_ShiftResponseEntity_ShiftIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_ShiftResponseEntity_ShiftIndexResponse model"
		},
		"V1_ShiftResponseEntity_ShiftsInvalidGetRequest": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "employment must be an employee if without_conflicts is true"
				}
			},
			"required": ["error"],
			"description": "V1_ShiftResponseEntity_ShiftsInvalidGetRequest model"
		},
		"V1_Entities_Conflict": {
			"type": "object",
			"properties": {
				"error": { "type": "string", "example": "conflict", "description": "Always 'forbidden'" }
			},
			"required": ["error"],
			"description": "V1_Entities_Conflict model"
		},
		"V1_ShiftResponseEntity_ShiftBreak": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"shift_id": { "type": "integer", "format": "int32", "example": 42 },
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T06:00:00.000+01:00"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "shift_id", "starts_at", "ends_at", "created_at", "updated_at"],
			"description": "V1_ShiftResponseEntity_ShiftBreak model"
		},
		"V1_ShiftResponseEntity_ShiftEvaluationTag": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 3,
					"description": "Evaluation tag ID"
				},
				"name": { "type": "string", "example": "Overtime", "description": "Evaluation tag name" }
			},
			"required": ["id", "name"],
			"description": "V1_ShiftResponseEntity_ShiftEvaluationTag model"
		},
		"V1_Entities_FeatureUnavailable": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Feature unavailable",
					"description": "Always 'Feature unavailable'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_FeatureUnavailable model"
		},
		"V1_Entities_CompanyNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Company not found",
					"description": "Always 'Company not found'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_CompanyNotFoundError model"
		},
		"V1_Entities_ShiftNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Shift not found",
					"description": "Always 'Shift not found'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_ShiftNotFoundError model"
		},
		"V1_Entities_TagNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Tag not found",
					"description": "Always 'Tag not found'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_TagNotFoundError model"
		},
		"V1_ShiftResponseEntity_ShiftEvaluationTagList": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftResponseEntity_ShiftEvaluationTag" }
				},
				"total": { "type": "integer", "format": "int32", "example": 3 }
			},
			"required": ["items", "total"],
			"description": "V1_ShiftResponseEntity_ShiftEvaluationTagList model"
		},
		"V2_PaygradeResponseEntity_ShiftPaygradeApiV2Response": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"paygrade_type_id": { "type": "integer", "format": "int32", "example": 1 },
				"paygrade_for_type": {
					"type": "string",
					"example": "Shift",
					"description": "Defines the object the paygrade belongs to. It can be Shift, Company, Position,\n          or another paygrade"
				},
				"paygrade_for_id": {
					"type": "integer",
					"format": "int32",
					"example": 35,
					"description": "The id of the object the paygrade belongs to"
				},
				"value": { "type": "number", "format": "float", "example": 1.46 },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"paygrades": {
					"type": "array",
					"items": { "$ref": "#/definitions/V2_ChildPaygradeResponseEntity" }
				}
			},
			"required": [
				"id",
				"paygrade_type_id",
				"paygrade_for_type",
				"paygrade_for_id",
				"value",
				"paygrades"
			],
			"description": "V2_PaygradeResponseEntity_ShiftPaygradeApiV2Response model"
		},
		"V2_ChildPaygradeResponseEntity": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"paygrade_type_id": { "type": "integer", "format": "int32", "example": 1 },
				"paygrade_for_type": {
					"type": "string",
					"example": "Shift",
					"description": "Defines the object the paygrade belongs to. It can be Shift, Company, Position,\n        or another paygrade"
				},
				"paygrade_for_id": {
					"type": "integer",
					"format": "int32",
					"example": 35,
					"description": "The id of the object the paygrade belongs to"
				},
				"value": { "type": "number", "format": "float", "example": 1.46 },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "paygrade_type_id", "paygrade_for_type", "paygrade_for_id", "value"]
		},
		"V1_QualificationResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Qualification ID"
				},
				"name": { "type": "string", "example": "First Aid", "description": "Qualification ID" },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the qualification was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the qualification was last updated"
				},
				"metadata": {
					"type": "json",
					"example": "{}",
					"description": "Metadata created via import"
				}
			},
			"required": ["id", "name"],
			"description": "V1_QualificationResponseEntity model"
		},
		"V1_ReplacedEvaluations_Entities_ReplacedEvaluationIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ReplacedEvaluations_Entities_ReplacedEvaluation" }
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_ReplacedEvaluations_Entities_ReplacedEvaluationIndexResponse model"
		},
		"V1_ReplacedEvaluations_Entities_ReplacedEvaluation": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"employment_id": { "type": "integer", "format": "int32", "example": 42 },
				"reason": {
					"type": "string",
					"enum": ["absence", "moved_to_another_shift", "replace_request"],
					"example": "absence"
				},
				"location_name": { "type": "string", "example": "Berlin" },
				"position_name": { "type": "string", "example": "Driver" },
				"shift_starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"shift_ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"shift_break_minutes": { "type": "integer", "format": "int32", "example": 60 },
				"shift_tag_names": { "type": "array", "items": { "type": "string" }, "example": "Tag 1" },
				"staff_shift_tag_names": {
					"type": "array",
					"items": { "type": "string" },
					"example": "Tag 1"
				},
				"shift_tag_ids": {
					"type": "array",
					"items": { "type": "integer", "format": "int32" },
					"example": 1
				},
				"staff_shift_tag_ids": {
					"type": "array",
					"items": { "type": "integer", "format": "int32" },
					"example": 2
				},
				"payments": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_RegularPayment" }
				}
			},
			"required": [
				"id",
				"employment_id",
				"reason",
				"location_name",
				"position_name",
				"shift_starts_at",
				"shift_ends_at",
				"shift_break_minutes",
				"shift_tag_names",
				"staff_shift_tag_names",
				"shift_tag_ids",
				"staff_shift_tag_ids",
				"payments"
			]
		},
		"V1_Entities_RegularPayment": {
			"type": "object",
			"properties": {
				"paygrade_type_id": { "type": "integer", "format": "int32", "example": 42 },
				"paygrade_type_name": { "type": "string", "example": "Hourly payment" },
				"minutes": { "type": "number", "format": "float", "example": 42.42 },
				"sum": { "type": "number", "format": "float", "example": 42.42 },
				"bonus_payments": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_BonusPayment" }
				}
			},
			"required": ["paygrade_type_id", "paygrade_type_name", "minutes", "sum", "bonus_payments"]
		},
		"V1_Entities_BonusPayment": {
			"type": "object",
			"properties": {
				"paygrade_type_id": { "type": "integer", "format": "int32", "example": 42 },
				"paygrade_type_name": { "type": "string", "example": "Bonus payment" },
				"minutes": { "type": "number", "format": "float", "example": 42.42 },
				"sum": { "type": "number", "format": "float", "example": 42.42 }
			},
			"required": ["paygrade_type_id", "paygrade_type_name", "minutes", "sum"]
		},
		"V1_Requests_Join_Entities_JoinRequestResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"auto_accept_possible": {
					"type": "boolean",
					"default": "false",
					"description": "It shows if the request will be processed by automation later"
				}
			},
			"required": ["id", "auto_accept_possible"],
			"description": "V1_Requests_Join_Entities_JoinRequestResponse model"
		},
		"V1_Requests_Join_Entities_InThePastError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "shift is in the past",
					"description": "Always 'shift is in the past'"
				}
			},
			"required": ["error"],
			"description": "V1_Requests_Join_Entities_InThePastError model"
		},
		"V1_Requests_Replace_Entities_ConfirmReplaceRequest": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"state": { "type": "string", "example": "new" },
				"employment_id": { "type": "integer", "format": "int32", "example": 69 },
				"shift_id": { "type": "integer", "format": "int32", "example": 32 },
				"request_id": { "type": "integer", "format": "int32", "example": 12 },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2023-10-09T16:41:36.760+02:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2023-10-09T16:41:36.760+02:00"
				}
			},
			"required": [
				"id",
				"state",
				"employment_id",
				"shift_id",
				"request_id",
				"created_at",
				"updated_at"
			],
			"description": "V1_Requests_Replace_Entities_ConfirmReplaceRequest model"
		},
		"V1_Requests_Replace_Entities_AcceptReplaceRequest": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"state": { "type": "string", "example": "new" },
				"employment_id": { "type": "integer", "format": "int32", "example": 69 },
				"shift_id": { "type": "integer", "format": "int32", "example": 32 },
				"request_id": { "type": "integer", "format": "int32", "example": 12 }
			},
			"required": ["id", "state", "employment_id", "shift_id", "request_id"],
			"description": "V1_Requests_Replace_Entities_AcceptReplaceRequest model"
		},
		"V1_RightResponseEntity_RightIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_RightResponseEntity_RightResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 26 }
			},
			"required": ["items", "total"],
			"description": "V1_RightResponseEntity_RightIndexResponse model"
		},
		"V1_RightResponseEntity_RightResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the Right"
				},
				"context_id": {
					"type": "integer",
					"format": "int32",
					"example": 577,
					"description": "context_id for the Right"
				},
				"context_type": {
					"type": "string",
					"example": "Location",
					"description": "context_type for the Right"
				},
				"name": {
					"type": "string",
					"example": "location_12467_shift_manage_right",
					"description": "Name of the Right"
				},
				"company_id": {
					"type": "integer",
					"format": "int32",
					"example": 23,
					"description": "company_id to which the Right belongs"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-01T00:00:00.000+01:00",
					"description": "Date when the Right was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-02T00:00:00.000+01:00",
					"description": "Date when the Right was last updated"
				},
				"is_possible_to_set": {
					"type": "boolean",
					"example": true,
					"description": "is_possible_to_set value for Right"
				}
			},
			"required": ["id", "name"]
		},
		"V1_ShiftplanResponseEntity_AssignEmploymentsToOpenShiftsResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"example": "b718c160-b3a0-4dc3-b16d-a9f3ec746010",
					"description": "Unique identifier of the background job"
				},
				"job_identifier": {
					"type": "string",
					"example": "17ccd223b3444e5adf1de103",
					"description": "JID that was created"
				},
				"type": {
					"type": "string",
					"example": "assign_employments_to_open_shifts",
					"description": "Type of the background job"
				},
				"state": {
					"type": "string",
					"example": "finished",
					"description": "Possible states: pending, running, failed, finished"
				},
				"result": {
					"type": "object",
					"example": { "shiftplan_id": 42 },
					"description": "New shiftplan ID. This shiftplan is a copy of provided shiftplan with employees assigned to open shifts automatically"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_BackgroundJobErrorsEntity" },
					"description": "Errors"
				},
				"finished_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:20.970+01:00",
					"description": "Date when the background job was finished"
				},
				"started_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:52:21.156+01:00",
					"description": "Date when the background job was started"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-11T11:05:32.633+01:00",
					"description": "Date when the background job was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:21.030+01:00",
					"description": "Date when the background job was updated"
				}
			},
			"required": [
				"id",
				"job_identifier",
				"type",
				"state",
				"result",
				"errors",
				"finished_at",
				"started_at",
				"created_at",
				"updated_at"
			],
			"description": "V1_ShiftplanResponseEntity_AssignEmploymentsToOpenShiftsResponseEntity model"
		},
		"V1_Entities_BackgroundJobsResponseSuccess": {
			"type": "object",
			"properties": {
				"success": {
					"type": "string",
					"example": true,
					"description": "Success response for long background jobs"
				}
			},
			"description": "V1_Entities_BackgroundJobsResponseSuccess model"
		},
		"V1_ShiftplanResponseEntity_ShiftplanResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the Shiftplan"
				},
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shiftplan starts"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shiftplan ends"
				},
				"state": {
					"type": "string",
					"enum": ["unpublished", "published"],
					"example": "unpublished",
					"description": "State of Shiftplan"
				},
				"location_id": {
					"type": "integer",
					"format": "int32",
					"example": 2,
					"description": "Location ID associated with the Shiftplan"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shiftplan was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shiftplan was last updated"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the Shiftplan was deleted"
				},
				"name": { "type": "string", "example": "KW-23", "description": "Name of Shiftplan" },
				"copying": {
					"type": "boolean",
					"example": false,
					"description": "Is Shiftplan being copied?"
				},
				"deleting": {
					"type": "boolean",
					"example": false,
					"description": "Is Shiftplan being deleted?"
				},
				"metadata": { "type": "json", "example": "{}", "description": "Metadata for Shiftplan" }
			},
			"required": ["id", "state", "location_id", "name"],
			"description": "V1_ShiftplanResponseEntity_ShiftplanResponseEntity model"
		},
		"V1_Entities_ShiftplanFutureLockError": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"example": "Invalid request",
					"description": "Main error message"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_Entities_ShiftplanFutureLockErrorDetails" }
				}
			},
			"required": ["message", "errors"],
			"description": "V1_Entities_ShiftplanFutureLockError model"
		},
		"V1_Entities_ShiftplanFutureLockErrorDetails": {
			"type": "object",
			"properties": {
				"error_key": {
					"type": "string",
					"example": "future_shiftplan_cannot_be_locked",
					"description": "Error key"
				},
				"message": {
					"type": "string",
					"example": "Future shiftplan cannot be locked",
					"description": "Detailed error message"
				},
				"data": {
					"type": "json",
					"example": { "shiftplan_id": 1 },
					"description": "Additional metadata"
				}
			},
			"required": ["error_key", "message"]
		},
		"V1_ShiftplanResponseEntity_ShiftplanNotificationResponseEntity": {
			"type": "object",
			"properties": { "notification_count": { "type": "integer", "format": "int32" } },
			"required": ["notification_count"],
			"description": "V1_ShiftplanResponseEntity_ShiftplanNotificationResponseEntity model"
		},
		"V1_ShiftplanResponseEntity_ShiftplanCopyResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"example": "b718c160-b3a0-4dc3-b16d-a9f3ec746010",
					"description": "Unique identifier of the background job"
				},
				"job_identifier": {
					"type": "string",
					"example": "17ccd223b3444e5adf1de103",
					"description": "JID that was created"
				},
				"type": {
					"type": "string",
					"example": "copy_shiftplan",
					"description": "Type of the background job"
				},
				"state": {
					"type": "string",
					"example": "finished",
					"description": "Possible states: pending, running, failed, finished"
				},
				"result": {
					"type": "object",
					"example": { "shiftplan_id": 42 },
					"description": "New shiftplan ID. This shiftplan is a copy of provided shiftplan"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_BackgroundJobErrorsEntity" },
					"description": "Errors"
				},
				"finished_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:20.970+01:00",
					"description": "Date when the background job was finished"
				},
				"started_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:52:21.156+01:00",
					"description": "Date when the background job was started"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-11T11:05:32.633+01:00",
					"description": "Date when the background job was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:21.030+01:00",
					"description": "Date when the background job was updated"
				}
			},
			"required": [
				"id",
				"job_identifier",
				"type",
				"state",
				"result",
				"errors",
				"finished_at",
				"started_at",
				"created_at",
				"updated_at"
			],
			"description": "V1_ShiftplanResponseEntity_ShiftplanCopyResponseEntity model"
		},
		"V1_ShiftplanResponseEntity_ShiftplanDayNoteResponseEntity": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 9 },
				"shiftplan_id": { "type": "integer", "format": "int32", "example": 17 },
				"title": { "type": "string", "example": "My day note" },
				"starts_at": { "type": "string", "format": "date", "example": "2021-04-01" },
				"ends_at": { "type": "string", "format": "date", "example": "2021-04-03" },
				"description": { "type": "string", "example": "Description text" }
			},
			"required": ["id", "shiftplan_id", "title", "starts_at", "ends_at"],
			"description": "V1_ShiftplanResponseEntity_ShiftplanDayNoteResponseEntity model"
		},
		"V1_Entities_ShiftplanNotFoundError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Shiftplan not found",
					"description": "Always 'Shiftplan not found'"
				}
			},
			"required": ["error"],
			"description": "V1_Entities_ShiftplanNotFoundError model"
		},
		"V1_ShiftplanResponseEntity_ShiftplanDayNotesResponseEntity": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V1_ShiftplanResponseEntity_ShiftplanDayNoteResponseEntity"
					}
				},
				"total": { "type": "integer", "format": "int32", "example": 1 }
			},
			"required": ["items", "total"],
			"description": "V1_ShiftplanResponseEntity_ShiftplanDayNotesResponseEntity model"
		},
		"V1_Shiftplans_Entities_DayNoteNotFound": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "Day note not found",
					"description": "Always 'Day note not found'"
				}
			},
			"required": ["error"],
			"description": "V1_Shiftplans_Entities_DayNoteNotFound model"
		},
		"V1_ShiftPresets_Entities_ShiftPresetIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftPresets_Entities_ShiftPresetResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 1 }
			},
			"required": ["items", "total"],
			"description": "V1_ShiftPresets_Entities_ShiftPresetIndexResponse model"
		},
		"V1_ShiftPresets_Entities_ShiftPresetResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Unique identifier of the ShiftPreset"
				},
				"company_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Company ID associated with the ShiftPreset"
				},
				"name": {
					"type": "string",
					"example": "Night shift",
					"description": "name of ShiftPreset"
				},
				"short_name": {
					"type": "string",
					"example": "NS",
					"description": "short name of ShiftPreset"
				},
				"break_time": {
					"type": "integer",
					"format": "int32",
					"example": 60,
					"description": "Duration of breaks in minutes"
				},
				"color": {
					"type": "string",
					"example": "#7540ee",
					"description": "highlight color for ShiftPreset"
				},
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00",
					"description": "Date when the ShiftPreset starts"
				},
				"starts_at_time": {
					"type": "string",
					"format": "date-time",
					"example": "01:00",
					"description": "Time when the ShiftPreset starts in 24 hour format"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T06:00:00.000+01:00",
					"description": "Date when the ShiftPreset ends"
				},
				"ends_at_time": {
					"type": "string",
					"format": "date-time",
					"example": "06:00",
					"description": "Time when the ShiftPreset starts in 24 hour format"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-04T17:41:49.372+01:00",
					"description": "Date when the ShiftPreset was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-04T17:41:49.372+01:00",
					"description": "Date when the ShiftPreset was last updated"
				},
				"metadata": { "type": "json", "example": {}, "description": "json" },
				"tags": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftPresets_Entities_TagsResponse" }
				},
				"evaluation_tags": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_ShiftPresets_Entities_EvaluationTagResponse" }
				}
			},
			"required": ["id", "company_id", "name", "break_time", "created_at", "updated_at", "metadata"]
		},
		"V1_ShiftPresets_Entities_TagsResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Unique identifier of the Shift Tag"
				},
				"name": { "type": "string", "example": "Heavy", "description": "name of Shifttag" }
			},
			"required": ["id", "name"]
		},
		"V1_ShiftPresets_Entities_EvaluationTagResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Unique identifier of the Evaluation tag"
				},
				"name": {
					"type": "string",
					"example": "bring_shift",
					"description": "name of evaluation tag"
				}
			},
			"required": ["id", "name"]
		},
		"V1_ShiftRotations_Entities_ShiftRotationResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"company_id": { "type": "integer", "format": "int32", "example": 1 },
				"name": { "type": "string", "example": "MyRotation" },
				"anchor_date": {
					"type": "string",
					"format": "date-time",
					"example": "2020-01-01T01:00:00.000+01:00"
				},
				"starts_at": {
					"type": "string",
					"format": "date-time",
					"example": "2020-01-01T01:00:00.000+01:00"
				},
				"ends_at": {
					"type": "string",
					"format": "date-time",
					"example": "2020-12-31T01:00:00.000+01:00"
				},
				"rotation_interval": {
					"type": "integer",
					"format": "int32",
					"example": 35,
					"description": "The interval after which rotation repeats"
				},
				"metadata": { "type": "json", "example": "{ fid: 1 }" },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "company_id", "name", "anchor_date", "rotation_interval"],
			"description": "V1_ShiftRotations_Entities_ShiftRotationResponse model"
		},
		"V1_ShiftRotations_Entities_ShiftplanPostResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42, "description": "id" },
				"job_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "BackgroundJob id"
				}
			},
			"required": ["id", "job_id"],
			"description": "V1_ShiftRotations_Entities_ShiftplanPostResponse model"
		},
		"V1_ShiftRotationGroupResponseEntity_ShiftRotationGroupResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"name": { "type": "string", "example": "myRotationGroup" },
				"shift_preset_ids": {
					"type": "integer",
					"format": "int32",
					"example": [1, 2, 3, 4],
					"description": "Array of shift presets"
				},
				"metadata": { "type": "json", "example": "{ fid: 1 }" },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "name", "shift_preset_ids"],
			"description": "V1_ShiftRotationGroupResponseEntity_ShiftRotationGroupResponse model"
		},
		"V1_ShiftRotationGroupResponseEntity_UnassignEmployeeResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"example": "b718c160-b3a0-4dc3-b16d-a9f3ec746010",
					"description": "Unique identifier of the background job"
				},
				"job_identifier": {
					"type": "string",
					"example": "17ccd223b3444e5adf1de103",
					"description": "JID that was created"
				},
				"type": {
					"type": "string",
					"example": "unassign_employee",
					"description": "Type of the background job"
				},
				"state": {
					"type": "string",
					"example": "finished",
					"description": "Possible states: pending, running, failed, finished"
				},
				"result": {
					"type": "object",
					"example": { "shift_rotation_group_id": 42, "employment_id": 12 },
					"description": "ID of ShiftRotationGroup and Employment for unassign users "
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_BackgroundJobErrorsEntity" },
					"description": "Errors"
				},
				"finished_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:20.970+01:00",
					"description": "Date when the background job was finished"
				},
				"started_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:52:21.156+01:00",
					"description": "Date when the background job was started"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-11T11:05:32.633+01:00",
					"description": "Date when the background job was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:21.030+01:00",
					"description": "Date when the background job was updated"
				}
			},
			"required": [
				"id",
				"job_identifier",
				"type",
				"state",
				"result",
				"errors",
				"finished_at",
				"started_at",
				"created_at",
				"updated_at"
			],
			"description": "V1_ShiftRotationGroupResponseEntity_UnassignEmployeeResponseEntity model"
		},
		"V1_ShiftRotationGroupResponseEntity_AssignEmployeePostResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"example": "b718c160-b3a0-4dc3-b16d-a9f3ec746010",
					"description": "Unique identifier of the background job"
				},
				"job_identifier": {
					"type": "string",
					"example": "17ccd223b3444e5adf1de103",
					"description": "JID that was created"
				},
				"type": {
					"type": "string",
					"example": "assign_employee",
					"description": "Type of the background job"
				},
				"state": {
					"type": "string",
					"example": "finished",
					"description": "Possible states: pending, running, failed, finished"
				},
				"result": {
					"type": "object",
					"example": { "shift_rotation_group_id": 42, "employment_id": 12 },
					"description": "ID of ShiftRotationGroup and Employment for assignment"
				},
				"errors": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_BackgroundJobErrorsEntity" },
					"description": "Errors"
				},
				"finished_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:20.970+01:00",
					"description": "Date when the background job was finished"
				},
				"started_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:52:21.156+01:00",
					"description": "Date when the background job was started"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-11T11:05:32.633+01:00",
					"description": "Date when the background job was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-11-12T14:53:21.030+01:00",
					"description": "Date when the background job was updated"
				}
			},
			"required": [
				"id",
				"job_identifier",
				"type",
				"state",
				"result",
				"errors",
				"finished_at",
				"started_at",
				"created_at",
				"updated_at"
			],
			"description": "V1_ShiftRotationGroupResponseEntity_AssignEmployeePostResponseEntity model"
		},
		"V1_SpecialDates_Entities_SpecialDatesResponse": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"company_id": { "type": "integer", "format": "int32", "example": 87543 },
				"name": { "type": "string", "example": "New Year" },
				"special_date": { "type": "string", "format": "date", "example": "2021-01-01" },
				"full_day": { "type": "boolean", "example": true },
				"all_locations": { "type": "boolean", "example": true },
				"start_time": { "type": "string", "format": "date-time", "example": "T12:00:00.000Z" },
				"end_time": { "type": "string", "format": "date-time", "example": "T00:00:00.000Z" },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-05-18T16:18:40.127+02:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-05-19T16:20:00.000+02:00"
				},
				"is_included_in_hour_account": { "type": "boolean", "example": true }
			},
			"required": [
				"id",
				"company_id",
				"name",
				"special_date",
				"full_day",
				"all_locations",
				"is_included_in_hour_account"
			],
			"description": "V1_SpecialDates_Entities_SpecialDatesResponse model"
		},
		"V1_SpecialDates_Entities_SpecialDatesIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_SpecialDates_Entities_SpecialDatesResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V1_SpecialDates_Entities_SpecialDatesIndexResponse model"
		},
		"V1_StaffShiftResponseEntity_StaffShiftsShowResponse": {
			"type": "object",
			"properties": {
				"staff_shift": { "$ref": "#/definitions/V1_StaffShiftResponseEntity_StaffShiftResponse" }
			},
			"required": ["staff_shift"],
			"description": "V1_StaffShiftResponseEntity_StaffShiftsShowResponse model"
		},
		"V1_StaffShiftResponseEntity_StaffShiftResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Unique identifier of the StaffShift"
				},
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Employment ID associated with the StaffShift"
				},
				"shift_id": {
					"type": "integer",
					"format": "int32",
					"example": 1,
					"description": "Shift ID associated with the StaffShift"
				},
				"state": {
					"type": "string",
					"example": "no_evaluation",
					"description": "State of the StaffShift"
				},
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-04T17:41:49.372+01:00",
					"description": "Date when the StaffShift was created"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-04T17:41:49.372+01:00",
					"description": "Date when the StaffShift was last updated"
				},
				"accepted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-04T17:41:49.372+01:00",
					"description": "Date when the StaffShift was accepted?"
				},
				"deleted_at": {
					"type": "string",
					"format": "date-time",
					"example": "2021-02-05T10:05:00.564+01:00",
					"description": "Date when the StaffShift was deleted"
				},
				"shift_assignment_group_id": {
					"type": "integer",
					"format": "int32",
					"example": "null",
					"description": "Shift Assignment Group ID associated with the StaffShift"
				},
				"total_minutes": {
					"type": "integer",
					"format": "int32",
					"example": 180,
					"description": "Accumulated working time (without breaks)"
				},
				"total_payment": {
					"type": "integer",
					"format": "int32",
					"example": 100,
					"description": "Accumulated Payments"
				},
				"metadata": { "type": "integer", "format": "int32", "example": {}, "description": "json" }
			},
			"required": [
				"id",
				"employment_id",
				"shift_id",
				"state",
				"created_at",
				"updated_at",
				"accepted_at",
				"deleted_at",
				"shift_assignment_group_id",
				"total_minutes",
				"total_payment",
				"metadata"
			],
			"description": "V1_StaffShiftResponseEntity_StaffShiftResponse model"
		},
		"V1_StaffShiftResponseEntity_StaffShiftsIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_StaffShiftResponseEntity_StaffShiftResponse" }
				},
				"total": { "type": "integer", "format": "int32", "example": 1 }
			},
			"required": ["items", "total"],
			"description": "V1_StaffShiftResponseEntity_StaffShiftsIndexResponse model"
		},
		"V1_StaffShiftResponseEntity_EmploymentIdNotPresentError": {
			"type": "object",
			"properties": {
				"error": {
					"type": "string",
					"example": "employment_id must be present",
					"description": "Always 'employment_id must be present'"
				}
			},
			"required": ["error"],
			"description": "V1_StaffShiftResponseEntity_EmploymentIdNotPresentError model"
		},
		"V1_StaffShiftResponseEntity_DeleteStaffShiftResponse": {
			"type": "object",
			"properties": { "success": { "type": "boolean", "example": true } },
			"required": ["success"],
			"description": "V1_StaffShiftResponseEntity_DeleteStaffShiftResponse model"
		},
		"V1_StaffShiftsTags_Entities_StaffShiftsTag": {
			"type": "object",
			"properties": {
				"id": { "type": "integer", "format": "int32", "example": 42 },
				"staff_shift_id": { "type": "integer", "format": "int32", "example": 42 },
				"tag_id": { "type": "integer", "format": "int32", "example": 42 },
				"created_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				},
				"updated_at": {
					"type": "string",
					"format": "date-time",
					"example": "2019-12-31T01:00:00.000+01:00"
				}
			},
			"required": ["id", "staff_shift_id", "tag_id", "created_at", "updated_at"],
			"description": "V1_StaffShiftsTags_Entities_StaffShiftsTag model"
		},
		"V1_StaffShiftsTags_Entities_StaffShiftsTagIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/V1_StaffShiftsTags_Entities_StaffShiftsTag" }
				},
				"total": { "type": "integer", "format": "int32", "example": 3 }
			},
			"required": ["items", "total"],
			"description": "V1_StaffShiftsTags_Entities_StaffShiftsTagIndexResponse model"
		},
		"V1_TagResponseEntity": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Unique identifier of the Tag"
				},
				"location_id": {
					"type": "integer",
					"format": "int32",
					"example": 23,
					"description": "Location ID associated with the Tag"
				},
				"company_id": {
					"type": "integer",
					"format": "int32",
					"example": 23,
					"description": "Company ID associated with the Tag"
				},
				"name": { "type": "string", "example": "Tag name", "description": "Name of the Tag" },
				"color": {
					"type": "string",
					"example": "bdbdbd",
					"description": "Color assigned to the Tag"
				},
				"metadata": { "type": "json", "example": "{}", "description": "Metadata" },
				"context": {
					"type": "string",
					"enum": ["shift_tag", "staff_shift_tag", "employment_tag"],
					"example": "shift_tag",
					"description": "Tag context"
				}
			},
			"required": ["id", "name", "color", "context"],
			"description": "V1_TagResponseEntity model"
		},
		"V2_AbsenceEntitlementResponseEntity_AbsenceEntitlementResponse": {
			"type": "object",
			"properties": {
				"employment_id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Employment ID associated with the Absence"
				},
				"absence_reason_id": {
					"type": "integer",
					"format": "int32",
					"example": 42,
					"description": "Reason ID for the Absence"
				},
				"year": {
					"type": "integer",
					"format": "int32",
					"example": 2022,
					"description": "Absence Entitlements for Year"
				},
				"allocated_days": {
					"type": "number",
					"format": "float",
					"example": 0.5,
					"description": "Allocated Days of absences per absence reason type"
				},
				"approved_days": {
					"type": "number",
					"format": "float",
					"example": 0.5,
					"description": "Approved Days of absences per absence reason type"
				},
				"requested_days": {
					"type": "number",
					"format": "float",
					"example": 0.5,
					"description": "New absences per absence reason type"
				},
				"remaining_days": {
					"type": "number",
					"format": "float",
					"example": 0.5,
					"description": "Remaining Days of absences per absence reason type"
				}
			},
			"required": [
				"employment_id",
				"absence_reason_id",
				"allocated_days",
				"approved_days",
				"requested_days",
				"remaining_days"
			],
			"description": "V2_AbsenceEntitlementResponseEntity_AbsenceEntitlementResponse model"
		},
		"V2_AbsenceEntitlementResponseEntity_AbsenceEntitlementIndexResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/V2_AbsenceEntitlementResponseEntity_AbsenceEntitlementResponse"
					}
				},
				"total": { "type": "integer", "format": "int32", "example": 42 }
			},
			"required": ["items", "total"],
			"description": "V2_AbsenceEntitlementResponseEntity_AbsenceEntitlementIndexResponse model"
		}
	}
}
